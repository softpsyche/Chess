// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Arcesoft.Chess.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class GameStepsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "Game.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "GameSteps", "\tValidate game behavior works as expected", ProgrammingLanguage.CSharp, new string[] {
                        "Unit"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "GameSteps")))
            {
                global::Arcesoft.Chess.Tests.GameStepsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(TestContext);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 16
#line 17
 testRunner.Given("I have a container", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 18
 testRunner.Given("I have a game factory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("New game should start in correct state")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void NewGameShouldStartInCorrectState()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("New game should start in correct state", ((string[])(null)));
#line 23
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line 24
 testRunner.When("I start a new game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 25
 testRunner.Then("I expect the game to not be over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 26
 testRunner.Then("I expect the gamestate to be \'InPlay\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 27
 testRunner.Then("I expect no moves to have been made", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 28
 testRunner.Then("I expect the current player is \'White\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table1.AddRow(new string[] {
                        "BR",
                        "BN",
                        "BB",
                        "BQ",
                        "BK",
                        "BB",
                        "BN",
                        "BR"});
            table1.AddRow(new string[] {
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP"});
            table1.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1.AddRow(new string[] {
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP"});
            table1.AddRow(new string[] {
                        "WR",
                        "WN",
                        "WB",
                        "WQ",
                        "WK",
                        "WB",
                        "WN",
                        "WR"});
#line 29
 testRunner.Then("I expect the current board to contain the following", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("New game should find moves for starting board")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void NewGameShouldFindMovesForStartingBoard()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("New game should find moves for starting board", ((string[])(null)));
#line 40
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line 41
 testRunner.Given("I start a new game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 42
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table2.AddRow(new string[] {
                        "A2",
                        "A3"});
            table2.AddRow(new string[] {
                        "A2",
                        "A4"});
            table2.AddRow(new string[] {
                        "B1",
                        "A3"});
            table2.AddRow(new string[] {
                        "B1",
                        "C3"});
            table2.AddRow(new string[] {
                        "B2",
                        "B3"});
            table2.AddRow(new string[] {
                        "B2",
                        "B4"});
            table2.AddRow(new string[] {
                        "C2",
                        "C3"});
            table2.AddRow(new string[] {
                        "C2",
                        "C4"});
            table2.AddRow(new string[] {
                        "D2",
                        "D3"});
            table2.AddRow(new string[] {
                        "D2",
                        "D4"});
            table2.AddRow(new string[] {
                        "E2",
                        "E3"});
            table2.AddRow(new string[] {
                        "E2",
                        "E4"});
            table2.AddRow(new string[] {
                        "F2",
                        "F3"});
            table2.AddRow(new string[] {
                        "F2",
                        "F4"});
            table2.AddRow(new string[] {
                        "G1",
                        "F3"});
            table2.AddRow(new string[] {
                        "G1",
                        "H3"});
            table2.AddRow(new string[] {
                        "G2",
                        "G3"});
            table2.AddRow(new string[] {
                        "G2",
                        "G4"});
            table2.AddRow(new string[] {
                        "H2",
                        "H3"});
            table2.AddRow(new string[] {
                        "H2",
                        "H4"});
#line 43
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for white pawns")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForWhitePawns()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for white pawns", ((string[])(null)));
#line 72
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table3.AddRow(new string[] {
                        "BK",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table3.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table3.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BP",
                        ""});
            table3.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BP",
                        "WP",
                        "BP"});
            table3.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "BP",
                        "",
                        "",
                        "",
                        ""});
            table3.AddRow(new string[] {
                        "",
                        "WP",
                        "WP",
                        "",
                        "BP",
                        "",
                        "",
                        "WK"});
            table3.AddRow(new string[] {
                        "WP",
                        "",
                        "",
                        "WP",
                        "WP",
                        "",
                        "",
                        "WP"});
            table3.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 73
 testRunner.Given("I start a new game in the following state", ((string)(null)), table3, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table4.AddRow(new string[] {
                        "A1",
                        "A2",
                        "Move"});
            table4.AddRow(new string[] {
                        "F7",
                        "F5",
                        "Move"});
#line 85
 testRunner.Given("I have the following move history", ((string)(null)), table4, "Given ");
#line 89
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table5.AddRow(new string[] {
                        "A2",
                        "A3",
                        "Move"});
            table5.AddRow(new string[] {
                        "A2",
                        "A4",
                        "Move"});
            table5.AddRow(new string[] {
                        "B3",
                        "B4",
                        "Move"});
            table5.AddRow(new string[] {
                        "C3",
                        "C4",
                        "Move"});
            table5.AddRow(new string[] {
                        "C3",
                        "D4",
                        "CapturePawn"});
            table5.AddRow(new string[] {
                        "D2",
                        "D3",
                        "Move"});
            table5.AddRow(new string[] {
                        "D2",
                        "E3",
                        "CapturePawn"});
            table5.AddRow(new string[] {
                        "G5",
                        "F6",
                        "AuPassant"});
            table5.AddRow(new string[] {
                        "H3",
                        "H4",
                        "Move"});
            table5.AddRow(new string[] {
                        "H3",
                        "G3",
                        "Move"});
            table5.AddRow(new string[] {
                        "H3",
                        "G2",
                        "Move"});
#line 90
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for white pawn promotions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForWhitePawnPromotions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for white pawn promotions", ((string[])(null)));
#line 104
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table6.AddRow(new string[] {
                        "BK",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WP"});
            table6.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 105
 testRunner.Given("I start a new game in the following state", ((string)(null)), table6, "Given ");
#line 115
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table7.AddRow(new string[] {
                        "H1",
                        "H2",
                        "Move"});
            table7.AddRow(new string[] {
                        "H1",
                        "G1",
                        "Move"});
            table7.AddRow(new string[] {
                        "H1",
                        "G2",
                        "Move"});
            table7.AddRow(new string[] {
                        "H7",
                        "H8",
                        "PawnPromotionKnight"});
            table7.AddRow(new string[] {
                        "H7",
                        "H8",
                        "PawnPromotionBishop"});
            table7.AddRow(new string[] {
                        "H7",
                        "H8",
                        "PawnPromotionRook"});
            table7.AddRow(new string[] {
                        "H7",
                        "H8",
                        "PawnPromotionQueen"});
#line 116
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for black pawns")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForBlackPawns()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for black pawns", ((string[])(null)));
#line 132
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table8.AddRow(new string[] {
                        "BK",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table8.AddRow(new string[] {
                        "BP",
                        "BP",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table8.AddRow(new string[] {
                        "",
                        "WP",
                        "BP",
                        "BP",
                        "",
                        "",
                        "",
                        "BP"});
            table8.AddRow(new string[] {
                        "",
                        "WP",
                        "",
                        "WP",
                        "",
                        "",
                        "",
                        ""});
            table8.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BP",
                        "WP"});
            table8.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WP",
                        ""});
            table8.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table8.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 133
 testRunner.Given("I start a new game in the following state", ((string)(null)), table8, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table9.AddRow(new string[] {
                        "H2",
                        "H4",
                        "Move"});
#line 145
 testRunner.Given("I have the following move history", ((string)(null)), table9, "Given ");
#line 148
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table10.AddRow(new string[] {
                        "A7",
                        "A6",
                        "Move"});
            table10.AddRow(new string[] {
                        "A7",
                        "A5",
                        "Move"});
            table10.AddRow(new string[] {
                        "A7",
                        "B6",
                        "CapturePawn"});
            table10.AddRow(new string[] {
                        "A8",
                        "B8",
                        "Move"});
            table10.AddRow(new string[] {
                        "C6",
                        "C5",
                        "Move"});
            table10.AddRow(new string[] {
                        "C6",
                        "B5",
                        "CapturePawn"});
            table10.AddRow(new string[] {
                        "C6",
                        "D5",
                        "CapturePawn"});
            table10.AddRow(new string[] {
                        "G4",
                        "H3",
                        "AuPassant"});
            table10.AddRow(new string[] {
                        "H6",
                        "H5",
                        "Move"});
#line 149
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table10, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for black pawn promotions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForBlackPawnPromotions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for black pawn promotions", ((string[])(null)));
#line 161
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table11.AddRow(new string[] {
                        "BK",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table11.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table11.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table11.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table11.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table11.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table11.AddRow(new string[] {
                        "BP",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table11.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 162
 testRunner.Given("I start a new game in the following state", ((string)(null)), table11, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table12.AddRow(new string[] {
                        "H2",
                        "H4",
                        "Move"});
#line 172
 testRunner.Given("I have the following move history", ((string)(null)), table12, "Given ");
#line 175
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table13.AddRow(new string[] {
                        "A8",
                        "A7",
                        "Move"});
            table13.AddRow(new string[] {
                        "A8",
                        "B8",
                        "Move"});
            table13.AddRow(new string[] {
                        "A8",
                        "B7",
                        "Move"});
            table13.AddRow(new string[] {
                        "A2",
                        "A1",
                        "PawnPromotionKnight"});
            table13.AddRow(new string[] {
                        "A2",
                        "A1",
                        "PawnPromotionBishop"});
            table13.AddRow(new string[] {
                        "A2",
                        "A1",
                        "PawnPromotionRook"});
            table13.AddRow(new string[] {
                        "A2",
                        "A1",
                        "PawnPromotionQueen"});
#line 176
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table13, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for white knights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForWhiteKnights()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for white knights", ((string[])(null)));
#line 186
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table14.AddRow(new string[] {
                        "BK",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WN"});
            table14.AddRow(new string[] {
                        "BP",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BP",
                        ""});
            table14.AddRow(new string[] {
                        "",
                        "",
                        "WN",
                        "",
                        "",
                        "",
                        "WP",
                        ""});
            table14.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table14.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "BP",
                        "",
                        "",
                        "",
                        ""});
            table14.AddRow(new string[] {
                        "",
                        "WN",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table14.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WN",
                        ""});
            table14.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 187
 testRunner.Given("I start a new game in the following state", ((string)(null)), table14, "Given ");
#line 197
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table15.AddRow(new string[] {
                        "B3",
                        "A1"});
            table15.AddRow(new string[] {
                        "B3",
                        "A5"});
            table15.AddRow(new string[] {
                        "B3",
                        "C5"});
            table15.AddRow(new string[] {
                        "B3",
                        "C1"});
            table15.AddRow(new string[] {
                        "B3",
                        "D4"});
            table15.AddRow(new string[] {
                        "B3",
                        "D2"});
            table15.AddRow(new string[] {
                        "C6",
                        "A5"});
            table15.AddRow(new string[] {
                        "C6",
                        "A7"});
            table15.AddRow(new string[] {
                        "C6",
                        "B8"});
            table15.AddRow(new string[] {
                        "C6",
                        "B4"});
            table15.AddRow(new string[] {
                        "C6",
                        "D8"});
            table15.AddRow(new string[] {
                        "C6",
                        "D4"});
            table15.AddRow(new string[] {
                        "C6",
                        "E7"});
            table15.AddRow(new string[] {
                        "C6",
                        "E5"});
            table15.AddRow(new string[] {
                        "G2",
                        "E1"});
            table15.AddRow(new string[] {
                        "G2",
                        "E3"});
            table15.AddRow(new string[] {
                        "G2",
                        "F4"});
            table15.AddRow(new string[] {
                        "G2",
                        "H4"});
            table15.AddRow(new string[] {
                        "H1",
                        "H2"});
            table15.AddRow(new string[] {
                        "H1",
                        "G1"});
            table15.AddRow(new string[] {
                        "H8",
                        "F7"});
#line 198
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table15, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for black knights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForBlackKnights()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for black knights", ((string[])(null)));
#line 222
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table16.AddRow(new string[] {
                        "WK",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BN"});
            table16.AddRow(new string[] {
                        "WP",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table16.AddRow(new string[] {
                        "",
                        "",
                        "BN",
                        "",
                        "",
                        "",
                        "BP",
                        ""});
            table16.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WP",
                        ""});
            table16.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "WP",
                        "",
                        "",
                        "",
                        ""});
            table16.AddRow(new string[] {
                        "",
                        "BN",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table16.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BN",
                        ""});
            table16.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BK"});
#line 223
 testRunner.Given("I start a new game in the following state", ((string)(null)), table16, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table17.AddRow(new string[] {
                        "A1",
                        "A1",
                        "Move"});
#line 233
 testRunner.Given("I have the following move history", ((string)(null)), table17, "Given ");
#line 236
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table18.AddRow(new string[] {
                        "B3",
                        "A5"});
            table18.AddRow(new string[] {
                        "B3",
                        "C5"});
            table18.AddRow(new string[] {
                        "B3",
                        "C1"});
            table18.AddRow(new string[] {
                        "B3",
                        "D4"});
            table18.AddRow(new string[] {
                        "B3",
                        "D2"});
            table18.AddRow(new string[] {
                        "B3",
                        "A1"});
            table18.AddRow(new string[] {
                        "C6",
                        "A5"});
            table18.AddRow(new string[] {
                        "C6",
                        "A7"});
            table18.AddRow(new string[] {
                        "C6",
                        "B8"});
            table18.AddRow(new string[] {
                        "C6",
                        "B4"});
            table18.AddRow(new string[] {
                        "C6",
                        "D8"});
            table18.AddRow(new string[] {
                        "C6",
                        "D4"});
            table18.AddRow(new string[] {
                        "C6",
                        "E7"});
            table18.AddRow(new string[] {
                        "C6",
                        "E5"});
            table18.AddRow(new string[] {
                        "G2",
                        "E1"});
            table18.AddRow(new string[] {
                        "G2",
                        "E3"});
            table18.AddRow(new string[] {
                        "G2",
                        "F4"});
            table18.AddRow(new string[] {
                        "G2",
                        "H4"});
            table18.AddRow(new string[] {
                        "H1",
                        "H2"});
            table18.AddRow(new string[] {
                        "H1",
                        "G1"});
            table18.AddRow(new string[] {
                        "H8",
                        "F7"});
#line 237
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table18, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for white bishops")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForWhiteBishops()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for white bishops", ((string[])(null)));
#line 261
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table19.AddRow(new string[] {
                        "WB",
                        "BK",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table19.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table19.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table19.AddRow(new string[] {
                        "",
                        "BP",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table19.AddRow(new string[] {
                        "",
                        "",
                        "WB",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table19.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BP",
                        "",
                        "",
                        "BP"});
            table19.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "WP",
                        "",
                        "",
                        "WP"});
            table19.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 262
 testRunner.Given("I start a new game in the following state", ((string)(null)), table19, "Given ");
#line 272
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table20.AddRow(new string[] {
                        "A8",
                        "B7"});
            table20.AddRow(new string[] {
                        "A8",
                        "C6"});
            table20.AddRow(new string[] {
                        "A8",
                        "D5"});
            table20.AddRow(new string[] {
                        "A8",
                        "E4"});
            table20.AddRow(new string[] {
                        "A8",
                        "F3"});
            table20.AddRow(new string[] {
                        "A8",
                        "G2"});
            table20.AddRow(new string[] {
                        "C4",
                        "B5"});
            table20.AddRow(new string[] {
                        "C4",
                        "B3"});
            table20.AddRow(new string[] {
                        "C4",
                        "A2"});
            table20.AddRow(new string[] {
                        "C4",
                        "D3"});
            table20.AddRow(new string[] {
                        "C4",
                        "D5"});
            table20.AddRow(new string[] {
                        "C4",
                        "E6"});
            table20.AddRow(new string[] {
                        "C4",
                        "F7"});
            table20.AddRow(new string[] {
                        "C4",
                        "G8"});
            table20.AddRow(new string[] {
                        "H1",
                        "G1"});
#line 273
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table20, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for black bishops")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForBlackBishops()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for black bishops", ((string[])(null)));
#line 291
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table21.AddRow(new string[] {
                        "BK",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table21.AddRow(new string[] {
                        "BP",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table21.AddRow(new string[] {
                        "WP",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table21.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table21.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "BB",
                        "",
                        "",
                        "",
                        ""});
            table21.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table21.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WP",
                        "WK",
                        ""});
            table21.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 292
 testRunner.Given("I start a new game in the following state", ((string)(null)), table21, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table22.AddRow(new string[] {
                        "A1",
                        "A1",
                        "Move"});
#line 302
 testRunner.Given("I have the following move history", ((string)(null)), table22, "Given ");
#line 305
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table23.AddRow(new string[] {
                        "A8",
                        "B8"});
            table23.AddRow(new string[] {
                        "D4",
                        "C5"});
            table23.AddRow(new string[] {
                        "D4",
                        "B6"});
            table23.AddRow(new string[] {
                        "D4",
                        "E3"});
            table23.AddRow(new string[] {
                        "D4",
                        "F2"});
            table23.AddRow(new string[] {
                        "D4",
                        "C3"});
            table23.AddRow(new string[] {
                        "D4",
                        "B2"});
            table23.AddRow(new string[] {
                        "D4",
                        "A1"});
            table23.AddRow(new string[] {
                        "D4",
                        "E5"});
            table23.AddRow(new string[] {
                        "D4",
                        "F6"});
            table23.AddRow(new string[] {
                        "D4",
                        "G7"});
            table23.AddRow(new string[] {
                        "D4",
                        "H8"});
#line 306
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table23, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for white rooks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForWhiteRooks()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for white rooks", ((string[])(null)));
#line 321
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table24.AddRow(new string[] {
                        "BK",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table24.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "BP",
                        "",
                        "",
                        "",
                        ""});
            table24.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table24.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "WR",
                        "",
                        "",
                        "",
                        ""});
            table24.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table24.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BP",
                        "BP"});
            table24.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "WP",
                        "",
                        "",
                        "",
                        "BP"});
            table24.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 322
 testRunner.Given("I start a new game in the following state", ((string)(null)), table24, "Given ");
#line 332
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table25.AddRow(new string[] {
                        "D2",
                        "D3"});
            table25.AddRow(new string[] {
                        "D2",
                        "D4"});
            table25.AddRow(new string[] {
                        "D5",
                        "E5"});
            table25.AddRow(new string[] {
                        "D5",
                        "F5"});
            table25.AddRow(new string[] {
                        "D5",
                        "G5"});
            table25.AddRow(new string[] {
                        "D5",
                        "H5"});
            table25.AddRow(new string[] {
                        "D5",
                        "C5"});
            table25.AddRow(new string[] {
                        "D5",
                        "B5"});
            table25.AddRow(new string[] {
                        "D5",
                        "A5"});
            table25.AddRow(new string[] {
                        "D5",
                        "D6"});
            table25.AddRow(new string[] {
                        "D5",
                        "D7"});
            table25.AddRow(new string[] {
                        "D5",
                        "D4"});
            table25.AddRow(new string[] {
                        "D5",
                        "D3"});
#line 333
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table25, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for black rooks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForBlackRooks()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for black rooks", ((string[])(null)));
#line 349
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table26.AddRow(new string[] {
                        "BK",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table26.AddRow(new string[] {
                        "WP",
                        "",
                        "",
                        "",
                        "BP",
                        "",
                        "",
                        ""});
            table26.AddRow(new string[] {
                        "WP",
                        "WP",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table26.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table26.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BR",
                        "",
                        "",
                        ""});
            table26.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table26.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table26.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "WR",
                        "",
                        "",
                        "WK"});
#line 350
 testRunner.Given("I start a new game in the following state", ((string)(null)), table26, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table27.AddRow(new string[] {
                        "A1",
                        "A1",
                        "Move"});
#line 360
 testRunner.Given("I have the following move history", ((string)(null)), table27, "Given ");
#line 363
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table28.AddRow(new string[] {
                        "E4",
                        "F4"});
            table28.AddRow(new string[] {
                        "E4",
                        "G4"});
            table28.AddRow(new string[] {
                        "E4",
                        "H4"});
            table28.AddRow(new string[] {
                        "E4",
                        "D4"});
            table28.AddRow(new string[] {
                        "E4",
                        "C4"});
            table28.AddRow(new string[] {
                        "E4",
                        "B4"});
            table28.AddRow(new string[] {
                        "E4",
                        "A4"});
            table28.AddRow(new string[] {
                        "E4",
                        "E5"});
            table28.AddRow(new string[] {
                        "E4",
                        "E6"});
            table28.AddRow(new string[] {
                        "E4",
                        "E3"});
            table28.AddRow(new string[] {
                        "E4",
                        "E2"});
            table28.AddRow(new string[] {
                        "E4",
                        "E1"});
            table28.AddRow(new string[] {
                        "E7",
                        "E6"});
            table28.AddRow(new string[] {
                        "E7",
                        "E5"});
#line 364
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table28, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for white queens")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForWhiteQueens()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for white queens", ((string[])(null)));
#line 381
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table29.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BK"});
            table29.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "BP",
                        "",
                        "",
                        "",
                        ""});
            table29.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table29.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "WQ",
                        "",
                        "",
                        "",
                        ""});
            table29.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table29.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BP",
                        "BP"});
            table29.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "WP",
                        "",
                        "",
                        "",
                        "BP"});
            table29.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 382
 testRunner.Given("I start a new game in the following state", ((string)(null)), table29, "Given ");
#line 392
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table30.AddRow(new string[] {
                        "D2",
                        "D3"});
            table30.AddRow(new string[] {
                        "D2",
                        "D4"});
            table30.AddRow(new string[] {
                        "D5",
                        "E5"});
            table30.AddRow(new string[] {
                        "D5",
                        "F5"});
            table30.AddRow(new string[] {
                        "D5",
                        "G5"});
            table30.AddRow(new string[] {
                        "D5",
                        "H5"});
            table30.AddRow(new string[] {
                        "D5",
                        "C5"});
            table30.AddRow(new string[] {
                        "D5",
                        "B5"});
            table30.AddRow(new string[] {
                        "D5",
                        "A5"});
            table30.AddRow(new string[] {
                        "D5",
                        "D6"});
            table30.AddRow(new string[] {
                        "D5",
                        "D7"});
            table30.AddRow(new string[] {
                        "D5",
                        "D4"});
            table30.AddRow(new string[] {
                        "D5",
                        "D3"});
            table30.AddRow(new string[] {
                        "D5",
                        "C6"});
            table30.AddRow(new string[] {
                        "D5",
                        "B7"});
            table30.AddRow(new string[] {
                        "D5",
                        "A8"});
            table30.AddRow(new string[] {
                        "D5",
                        "E4"});
            table30.AddRow(new string[] {
                        "D5",
                        "F3"});
            table30.AddRow(new string[] {
                        "D5",
                        "G2"});
            table30.AddRow(new string[] {
                        "D5",
                        "C4"});
            table30.AddRow(new string[] {
                        "D5",
                        "B3"});
            table30.AddRow(new string[] {
                        "D5",
                        "A2"});
            table30.AddRow(new string[] {
                        "D5",
                        "E6"});
            table30.AddRow(new string[] {
                        "D5",
                        "F7"});
            table30.AddRow(new string[] {
                        "D5",
                        "G8"});
#line 393
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table30, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for black queens")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForBlackQueens()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for black queens", ((string[])(null)));
#line 421
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table31.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BK"});
            table31.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "BP",
                        "",
                        "",
                        "",
                        "WP"});
            table31.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WP",
                        "WP"});
            table31.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table31.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "BQ",
                        "",
                        "",
                        "",
                        ""});
            table31.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table31.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "WP",
                        "",
                        "",
                        "",
                        ""});
            table31.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 422
 testRunner.Given("I start a new game in the following state", ((string)(null)), table31, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table32.AddRow(new string[] {
                        "A1",
                        "A1",
                        "Move"});
#line 432
 testRunner.Given("I have the following move history", ((string)(null)), table32, "Given ");
#line 435
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table33.AddRow(new string[] {
                        "D4",
                        "E4"});
            table33.AddRow(new string[] {
                        "D4",
                        "F4"});
            table33.AddRow(new string[] {
                        "D4",
                        "G4"});
            table33.AddRow(new string[] {
                        "D4",
                        "H4"});
            table33.AddRow(new string[] {
                        "D4",
                        "C4"});
            table33.AddRow(new string[] {
                        "D4",
                        "B4"});
            table33.AddRow(new string[] {
                        "D4",
                        "A4"});
            table33.AddRow(new string[] {
                        "D4",
                        "D5"});
            table33.AddRow(new string[] {
                        "D4",
                        "D6"});
            table33.AddRow(new string[] {
                        "D4",
                        "D3"});
            table33.AddRow(new string[] {
                        "D4",
                        "D2"});
            table33.AddRow(new string[] {
                        "D4",
                        "C5"});
            table33.AddRow(new string[] {
                        "D4",
                        "B6"});
            table33.AddRow(new string[] {
                        "D4",
                        "A7"});
            table33.AddRow(new string[] {
                        "D4",
                        "E3"});
            table33.AddRow(new string[] {
                        "D4",
                        "F2"});
            table33.AddRow(new string[] {
                        "D4",
                        "G1"});
            table33.AddRow(new string[] {
                        "D4",
                        "C3"});
            table33.AddRow(new string[] {
                        "D4",
                        "B2"});
            table33.AddRow(new string[] {
                        "D4",
                        "A1"});
            table33.AddRow(new string[] {
                        "D4",
                        "E5"});
            table33.AddRow(new string[] {
                        "D4",
                        "F6"});
            table33.AddRow(new string[] {
                        "D4",
                        "G7"});
            table33.AddRow(new string[] {
                        "D7",
                        "D6"});
            table33.AddRow(new string[] {
                        "D7",
                        "D5"});
#line 436
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table33, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for white King (no threats)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForWhiteKingNoThreats()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for white King (no threats)", ((string[])(null)));
#line 464
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table34.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table34.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table34.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table34.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "WK",
                        "",
                        "",
                        "",
                        ""});
            table34.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table34.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table34.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table34.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BK"});
#line 465
 testRunner.Given("I start a new game in the following state", ((string)(null)), table34, "Given ");
#line 475
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table35.AddRow(new string[] {
                        "D5",
                        "D6"});
            table35.AddRow(new string[] {
                        "D5",
                        "E5"});
            table35.AddRow(new string[] {
                        "D5",
                        "C4"});
            table35.AddRow(new string[] {
                        "D5",
                        "D4"});
            table35.AddRow(new string[] {
                        "D5",
                        "C5"});
            table35.AddRow(new string[] {
                        "D5",
                        "E6"});
            table35.AddRow(new string[] {
                        "D5",
                        "C6"});
            table35.AddRow(new string[] {
                        "D5",
                        "E4"});
#line 476
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table35, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for white King")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForWhiteKing()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for white King", ((string[])(null)));
#line 487
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table36.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table36.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table36.AddRow(new string[] {
                        "",
                        "",
                        "BB",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table36.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "WK",
                        "",
                        "",
                        "",
                        ""});
            table36.AddRow(new string[] {
                        "",
                        "",
                        "BQ",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table36.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table36.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table36.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BK"});
#line 488
 testRunner.Given("I start a new game in the following state", ((string)(null)), table36, "Given ");
#line 498
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table37.AddRow(new string[] {
                        "D5",
                        "D6"});
            table37.AddRow(new string[] {
                        "D5",
                        "E5"});
            table37.AddRow(new string[] {
                        "D5",
                        "C4"});
#line 499
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table37, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for black King (no threats)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForBlackKingNoThreats()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for black King (no threats)", ((string[])(null)));
#line 505
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table38.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table38.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table38.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table38.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "BK",
                        "",
                        "",
                        "",
                        ""});
            table38.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table38.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table38.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table38.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 506
 testRunner.Given("I start a new game in the following state", ((string)(null)), table38, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table39.AddRow(new string[] {
                        "A1",
                        "A1",
                        "Move"});
#line 516
 testRunner.Given("I have the following move history", ((string)(null)), table39, "Given ");
#line 519
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table40.AddRow(new string[] {
                        "D5",
                        "D6"});
            table40.AddRow(new string[] {
                        "D5",
                        "E5"});
            table40.AddRow(new string[] {
                        "D5",
                        "C4"});
            table40.AddRow(new string[] {
                        "D5",
                        "D4"});
            table40.AddRow(new string[] {
                        "D5",
                        "C5"});
            table40.AddRow(new string[] {
                        "D5",
                        "E6"});
            table40.AddRow(new string[] {
                        "D5",
                        "C6"});
            table40.AddRow(new string[] {
                        "D5",
                        "E4"});
#line 520
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table40, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for black King")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForBlackKing()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for black King", ((string[])(null)));
#line 531
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table41.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table41.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table41.AddRow(new string[] {
                        "",
                        "",
                        "WB",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table41.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "BK",
                        "",
                        "",
                        "",
                        ""});
            table41.AddRow(new string[] {
                        "",
                        "",
                        "WQ",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table41.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table41.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table41.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 532
 testRunner.Given("I start a new game in the following state", ((string)(null)), table41, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table42.AddRow(new string[] {
                        "A1",
                        "A1",
                        "Move"});
#line 542
 testRunner.Given("I have the following move history", ((string)(null)), table42, "Given ");
#line 545
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table43.AddRow(new string[] {
                        "D5",
                        "D6"});
            table43.AddRow(new string[] {
                        "D5",
                        "E5"});
            table43.AddRow(new string[] {
                        "D5",
                        "C4"});
#line 546
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table43, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find castle moves for white king")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindCastleMovesForWhiteKing()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find castle moves for white king", ((string[])(null)));
#line 552
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table44.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BK",
                        "",
                        "",
                        ""});
            table44.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table44.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table44.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table44.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table44.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table44.AddRow(new string[] {
                        "WP",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WP"});
            table44.AddRow(new string[] {
                        "WR",
                        "",
                        "",
                        "",
                        "WK",
                        "",
                        "",
                        "WR"});
#line 553
 testRunner.Given("I start a new game in the following state", ((string)(null)), table44, "Given ");
#line 563
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table45.AddRow(new string[] {
                        "E1",
                        "F1"});
            table45.AddRow(new string[] {
                        "E1",
                        "F2"});
            table45.AddRow(new string[] {
                        "E1",
                        "E2"});
            table45.AddRow(new string[] {
                        "E1",
                        "D2"});
            table45.AddRow(new string[] {
                        "E1",
                        "D1"});
            table45.AddRow(new string[] {
                        "E1",
                        "G1"});
            table45.AddRow(new string[] {
                        "E1",
                        "C1"});
            table45.AddRow(new string[] {
                        "A1",
                        "B1"});
            table45.AddRow(new string[] {
                        "A1",
                        "C1"});
            table45.AddRow(new string[] {
                        "A1",
                        "D1"});
            table45.AddRow(new string[] {
                        "A2",
                        "A3"});
            table45.AddRow(new string[] {
                        "A2",
                        "A4"});
            table45.AddRow(new string[] {
                        "H1",
                        "G1"});
            table45.AddRow(new string[] {
                        "H1",
                        "F1"});
            table45.AddRow(new string[] {
                        "H2",
                        "H3"});
            table45.AddRow(new string[] {
                        "H2",
                        "H4"});
#line 564
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table45, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find castle moves for black king")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindCastleMovesForBlackKing()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find castle moves for black king", ((string[])(null)));
#line 586
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table46.AddRow(new string[] {
                        "BR",
                        "",
                        "",
                        "",
                        "BK",
                        "",
                        "",
                        "BR"});
            table46.AddRow(new string[] {
                        "BP",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BP"});
            table46.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table46.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table46.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table46.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table46.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table46.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "WK",
                        "",
                        "",
                        ""});
#line 587
 testRunner.Given("I start a new game in the following state", ((string)(null)), table46, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table47.AddRow(new string[] {
                        "A1",
                        "A1",
                        "Move"});
#line 597
 testRunner.Given("I have the following move history", ((string)(null)), table47, "Given ");
#line 600
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table48.AddRow(new string[] {
                        "E8",
                        "F8"});
            table48.AddRow(new string[] {
                        "E8",
                        "F7"});
            table48.AddRow(new string[] {
                        "E8",
                        "E7"});
            table48.AddRow(new string[] {
                        "E8",
                        "D7"});
            table48.AddRow(new string[] {
                        "E8",
                        "D8"});
            table48.AddRow(new string[] {
                        "E8",
                        "G8"});
            table48.AddRow(new string[] {
                        "E8",
                        "C8"});
            table48.AddRow(new string[] {
                        "A7",
                        "A6"});
            table48.AddRow(new string[] {
                        "A7",
                        "A5"});
            table48.AddRow(new string[] {
                        "A8",
                        "B8"});
            table48.AddRow(new string[] {
                        "A8",
                        "C8"});
            table48.AddRow(new string[] {
                        "A8",
                        "D8"});
            table48.AddRow(new string[] {
                        "H7",
                        "H6"});
            table48.AddRow(new string[] {
                        "H7",
                        "H5"});
            table48.AddRow(new string[] {
                        "H8",
                        "G8"});
            table48.AddRow(new string[] {
                        "H8",
                        "F8"});
#line 601
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table48, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void FindMovesShouldNOTFindCastleMovesForWhiteKingWhen(string testName, string moveHistorySource, string moveHistoryDestination, string b3, string c3, string d1, string f8, string g1, string expectedMoves, string nonExpectedMoves, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should NOT find castle moves for white king when", exampleTags);
#line 631
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table49.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BK",
                        string.Format("{0}", f8),
                        "",
                        ""});
            table49.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table49.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table49.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table49.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table49.AddRow(new string[] {
                        "",
                        string.Format("{0}", b3),
                        string.Format("{0}", c3),
                        "",
                        "",
                        "",
                        "",
                        ""});
            table49.AddRow(new string[] {
                        "WP",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WP"});
            table49.AddRow(new string[] {
                        "WR",
                        "",
                        "",
                        string.Format("{0}", d1),
                        "WK",
                        "",
                        string.Format("{0}", g1),
                        "WR"});
#line 632
 testRunner.Given("I start a new game in the following state", ((string)(null)), table49, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table50.AddRow(new string[] {
                        "D1",
                        "D1",
                        "Move"});
            table50.AddRow(new string[] {
                        string.Format("{0}", moveHistorySource),
                        string.Format("{0}", moveHistoryDestination),
                        "Move"});
#line 642
 testRunner.Given("I have the following move history", ((string)(null)), table50, "Given ");
#line 646
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 647
 testRunner.Then(string.Format("I expect the moves found should NOT contain \'{0}\'", nonExpectedMoves), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 648
 testRunner.Then(string.Format("I expect the moves found should contain \'{0}\'", expectedMoves), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should NOT find castle moves for white king when: king has moved")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "king has moved")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "king has moved")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistorySource", "E1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistoryDestination", "F1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:B3", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:C3", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:D1", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:F8", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:G1", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoves", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:NonExpectedMoves", "E1-G1,E1-C1")]
        public virtual void FindMovesShouldNOTFindCastleMovesForWhiteKingWhen_KingHasMoved()
        {
#line 631
this.FindMovesShouldNOTFindCastleMovesForWhiteKingWhen("king has moved", "E1", "F1", "", "", "", "", "", "", "E1-G1,E1-C1", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should NOT find castle moves for white king when: king is in check")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "king is in check")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "king is in check")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistorySource", "D4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistoryDestination", "D4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:B3", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:C3", "BB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:D1", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:F8", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:G1", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoves", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:NonExpectedMoves", "E1-G1,E1-C1")]
        public virtual void FindMovesShouldNOTFindCastleMovesForWhiteKingWhen_KingIsInCheck()
        {
#line 631
this.FindMovesShouldNOTFindCastleMovesForWhiteKingWhen("king is in check", "D4", "D4", "", "BB", "", "", "", "", "E1-G1,E1-C1", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should NOT find castle moves for white king when: eastern rook has mov" +
            "ed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "eastern rook has moved")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "eastern rook has moved")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistorySource", "H1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistoryDestination", "H3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:B3", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:C3", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:D1", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:F8", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:G1", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoves", "E1-C1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:NonExpectedMoves", "E1-G1")]
        public virtual void FindMovesShouldNOTFindCastleMovesForWhiteKingWhen_EasternRookHasMoved()
        {
#line 631
this.FindMovesShouldNOTFindCastleMovesForWhiteKingWhen("eastern rook has moved", "H1", "H3", "", "", "", "", "", "E1-C1", "E1-G1", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should NOT find castle moves for white king when: eastern path blocked" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "eastern path blocked")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "eastern path blocked")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistorySource", "D4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistoryDestination", "D4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:B3", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:C3", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:D1", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:F8", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:G1", "WN")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoves", "E1-C1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:NonExpectedMoves", "E1-G1")]
        public virtual void FindMovesShouldNOTFindCastleMovesForWhiteKingWhen_EasternPathBlocked()
        {
#line 631
this.FindMovesShouldNOTFindCastleMovesForWhiteKingWhen("eastern path blocked", "D4", "D4", "", "", "", "", "WN", "E1-C1", "E1-G1", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should NOT find castle moves for white king when: eastern path is thre" +
            "atened")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "eastern path is threatened")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "eastern path is threatened")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistorySource", "D4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistoryDestination", "D4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:B3", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:C3", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:D1", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:F8", "BR")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:G1", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoves", "E1-C1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:NonExpectedMoves", "E1-G1")]
        public virtual void FindMovesShouldNOTFindCastleMovesForWhiteKingWhen_EasternPathIsThreatened()
        {
#line 631
this.FindMovesShouldNOTFindCastleMovesForWhiteKingWhen("eastern path is threatened", "D4", "D4", "", "", "", "BR", "", "E1-C1", "E1-G1", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should NOT find castle moves for white king when: western rook has mov" +
            "ed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "western rook has moved")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "western rook has moved")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistorySource", "A1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistoryDestination", "D1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:B3", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:C3", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:D1", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:F8", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:G1", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoves", "E1-G1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:NonExpectedMoves", "E1-C1")]
        public virtual void FindMovesShouldNOTFindCastleMovesForWhiteKingWhen_WesternRookHasMoved()
        {
#line 631
this.FindMovesShouldNOTFindCastleMovesForWhiteKingWhen("western rook has moved", "A1", "D1", "", "", "", "", "", "E1-G1", "E1-C1", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should NOT find castle moves for white king when: western path blocked" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "western path blocked")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "western path blocked")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistorySource", "D4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistoryDestination", "D4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:B3", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:C3", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:D1", "WQ")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:F8", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:G1", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoves", "E1-G1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:NonExpectedMoves", "E1-C1")]
        public virtual void FindMovesShouldNOTFindCastleMovesForWhiteKingWhen_WesternPathBlocked()
        {
#line 631
this.FindMovesShouldNOTFindCastleMovesForWhiteKingWhen("western path blocked", "D4", "D4", "", "", "WQ", "", "", "E1-G1", "E1-C1", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should NOT find castle moves for white king when: western path is thre" +
            "atened")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "western path is threatened")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "western path is threatened")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistorySource", "D4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistoryDestination", "D4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:B3", "BB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:C3", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:D1", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:F8", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:G1", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoves", "E1-G1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:NonExpectedMoves", "E1-C1")]
        public virtual void FindMovesShouldNOTFindCastleMovesForWhiteKingWhen_WesternPathIsThreatened()
        {
#line 631
this.FindMovesShouldNOTFindCastleMovesForWhiteKingWhen("western path is threatened", "D4", "D4", "BB", "", "", "", "", "E1-G1", "E1-C1", ((string[])(null)));
#line hidden
        }
        
        public virtual void FindMovesShouldNOTFindCastleMovesForBlackKingWhen(string testName, string moveHistorySource, string moveHistoryDestination, string b6, string c6, string d8, string f1, string g8, string expectedMoves, string nonExpectedMoves, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should NOT find castle moves for black king when", exampleTags);
#line 660
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table51.AddRow(new string[] {
                        "BR",
                        "",
                        "",
                        string.Format("{0}", d8),
                        "BK",
                        "",
                        string.Format("{0}", g8),
                        "BR"});
            table51.AddRow(new string[] {
                        "BP",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BP"});
            table51.AddRow(new string[] {
                        "",
                        string.Format("{0}", b6),
                        string.Format("{0}", c6),
                        "",
                        "",
                        "",
                        "",
                        ""});
            table51.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table51.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table51.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table51.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table51.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "WK",
                        string.Format("{0}", f1),
                        "",
                        ""});
#line 661
 testRunner.Given("I start a new game in the following state", ((string)(null)), table51, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table52.AddRow(new string[] {
                        string.Format("{0}", moveHistorySource),
                        string.Format("{0}", moveHistoryDestination),
                        "Move"});
#line 671
 testRunner.Given("I have the following move history", ((string)(null)), table52, "Given ");
#line 674
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 675
 testRunner.Then(string.Format("I expect the moves found should NOT contain \'{0}\'", nonExpectedMoves), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 676
 testRunner.Then(string.Format("I expect the moves found should contain \'{0}\'", expectedMoves), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should NOT find castle moves for black king when: king has moved")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "king has moved")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "king has moved")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistorySource", "E8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistoryDestination", "F8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:B6", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:C6", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:D8", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:F1", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:G8", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoves", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:NonExpectedMoves", "E8-G8,E8-C8")]
        public virtual void FindMovesShouldNOTFindCastleMovesForBlackKingWhen_KingHasMoved()
        {
#line 660
this.FindMovesShouldNOTFindCastleMovesForBlackKingWhen("king has moved", "E8", "F8", "", "", "", "", "", "", "E8-G8,E8-C8", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should NOT find castle moves for black king when: king is in check")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "king is in check")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "king is in check")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistorySource", "D4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistoryDestination", "D4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:B6", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:C6", "WB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:D8", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:F1", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:G8", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoves", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:NonExpectedMoves", "E8-G8,E8-C8")]
        public virtual void FindMovesShouldNOTFindCastleMovesForBlackKingWhen_KingIsInCheck()
        {
#line 660
this.FindMovesShouldNOTFindCastleMovesForBlackKingWhen("king is in check", "D4", "D4", "", "WB", "", "", "", "", "E8-G8,E8-C8", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should NOT find castle moves for black king when: eastern rook has mov" +
            "ed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "eastern rook has moved")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "eastern rook has moved")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistorySource", "H8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistoryDestination", "H3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:B6", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:C6", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:D8", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:F1", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:G8", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoves", "E8-C8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:NonExpectedMoves", "E8-G8")]
        public virtual void FindMovesShouldNOTFindCastleMovesForBlackKingWhen_EasternRookHasMoved()
        {
#line 660
this.FindMovesShouldNOTFindCastleMovesForBlackKingWhen("eastern rook has moved", "H8", "H3", "", "", "", "", "", "E8-C8", "E8-G8", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should NOT find castle moves for black king when: eastern path blocked" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "eastern path blocked")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "eastern path blocked")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistorySource", "D4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistoryDestination", "D4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:B6", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:C6", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:D8", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:F1", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:G8", "BN")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoves", "E8-C8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:NonExpectedMoves", "E8-G8")]
        public virtual void FindMovesShouldNOTFindCastleMovesForBlackKingWhen_EasternPathBlocked()
        {
#line 660
this.FindMovesShouldNOTFindCastleMovesForBlackKingWhen("eastern path blocked", "D4", "D4", "", "", "", "", "BN", "E8-C8", "E8-G8", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should NOT find castle moves for black king when: eastern path is thre" +
            "atened")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "eastern path is threatened")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "eastern path is threatened")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistorySource", "D4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistoryDestination", "D4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:B6", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:C6", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:D8", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:F1", "WR")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:G8", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoves", "E8-C8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:NonExpectedMoves", "E8-G8")]
        public virtual void FindMovesShouldNOTFindCastleMovesForBlackKingWhen_EasternPathIsThreatened()
        {
#line 660
this.FindMovesShouldNOTFindCastleMovesForBlackKingWhen("eastern path is threatened", "D4", "D4", "", "", "", "WR", "", "E8-C8", "E8-G8", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should NOT find castle moves for black king when: western rook has mov" +
            "ed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "western rook has moved")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "western rook has moved")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistorySource", "A8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistoryDestination", "D8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:B6", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:C6", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:D8", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:F1", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:G8", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoves", "E8-G8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:NonExpectedMoves", "E8-C8")]
        public virtual void FindMovesShouldNOTFindCastleMovesForBlackKingWhen_WesternRookHasMoved()
        {
#line 660
this.FindMovesShouldNOTFindCastleMovesForBlackKingWhen("western rook has moved", "A8", "D8", "", "", "", "", "", "E8-G8", "E8-C8", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should NOT find castle moves for black king when: western path blocked" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "western path blocked")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "western path blocked")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistorySource", "D4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistoryDestination", "D4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:B6", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:C6", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:D8", "BQ")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:F1", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:G8", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoves", "E8-G8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:NonExpectedMoves", "E8-C8")]
        public virtual void FindMovesShouldNOTFindCastleMovesForBlackKingWhen_WesternPathBlocked()
        {
#line 660
this.FindMovesShouldNOTFindCastleMovesForBlackKingWhen("western path blocked", "D4", "D4", "", "", "BQ", "", "", "E8-G8", "E8-C8", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should NOT find castle moves for black king when: western path is thre" +
            "atened")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "western path is threatened")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "western path is threatened")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistorySource", "D4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistoryDestination", "D4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:B6", "WB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:C6", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:D8", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:F1", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:G8", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoves", "E8-G8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:NonExpectedMoves", "E8-C8")]
        public virtual void FindMovesShouldNOTFindCastleMovesForBlackKingWhen_WesternPathIsThreatened()
        {
#line 660
this.FindMovesShouldNOTFindCastleMovesForBlackKingWhen("western path is threatened", "D4", "D4", "WB", "", "", "", "", "E8-G8", "E8-C8", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for pinned white pawns")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForPinnedWhitePawns()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for pinned white pawns", ((string[])(null)));
#line 693
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table53.AddRow(new string[] {
                        "BB",
                        "",
                        "",
                        "BR",
                        "",
                        "",
                        "BB",
                        ""});
            table53.AddRow(new string[] {
                        "",
                        "WP",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table53.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "WP",
                        "WP",
                        "",
                        "",
                        ""});
            table53.AddRow(new string[] {
                        "BN",
                        "BR",
                        "WP",
                        "WK",
                        "",
                        "WP",
                        "",
                        "BR"});
            table53.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table53.AddRow(new string[] {
                        "",
                        "WP",
                        "BR",
                        "",
                        "",
                        "WP",
                        "",
                        ""});
            table53.AddRow(new string[] {
                        "BB",
                        "",
                        "",
                        "WP",
                        "",
                        "",
                        "BB",
                        ""});
            table53.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "BR",
                        "",
                        "",
                        "",
                        "BK"});
#line 694
 testRunner.Given("I start a new game in the following state", ((string)(null)), table53, "Given ");
#line 704
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table54.AddRow(new string[] {
                        "D5",
                        "E5"});
            table54.AddRow(new string[] {
                        "D5",
                        "E4"});
            table54.AddRow(new string[] {
                        "D5",
                        "D4"});
            table54.AddRow(new string[] {
                        "B7",
                        "A8"});
            table54.AddRow(new string[] {
                        "D6",
                        "D7"});
            table54.AddRow(new string[] {
                        "D2",
                        "D3"});
            table54.AddRow(new string[] {
                        "D2",
                        "D4"});
#line 705
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table54, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for pinned black pawns")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForPinnedBlackPawns()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for pinned black pawns", ((string[])(null)));
#line 717
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table55.AddRow(new string[] {
                        "WB",
                        "",
                        "",
                        "WR",
                        "",
                        "",
                        "WB",
                        ""});
            table55.AddRow(new string[] {
                        "",
                        "BP",
                        "",
                        "BP",
                        "",
                        "",
                        "",
                        ""});
            table55.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BP",
                        "",
                        "",
                        ""});
            table55.AddRow(new string[] {
                        "WN",
                        "WR",
                        "BP",
                        "BK",
                        "",
                        "BP",
                        "",
                        "WR"});
            table55.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BP",
                        "",
                        "",
                        ""});
            table55.AddRow(new string[] {
                        "",
                        "BP",
                        "",
                        "BP",
                        "",
                        "",
                        "",
                        ""});
            table55.AddRow(new string[] {
                        "WB",
                        "",
                        "",
                        "",
                        "WP",
                        "",
                        "WB",
                        ""});
            table55.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "WR",
                        "",
                        "",
                        "",
                        "WK"});
#line 718
 testRunner.Given("I start a new game in the following state", ((string)(null)), table55, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table56.AddRow(new string[] {
                        "A1",
                        "A1",
                        "Move"});
#line 728
 testRunner.Given("I have the following move history", ((string)(null)), table56, "Given ");
#line 731
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table57.AddRow(new string[] {
                        "D5",
                        "D6"});
            table57.AddRow(new string[] {
                        "D5",
                        "E5"});
            table57.AddRow(new string[] {
                        "D5",
                        "D4"});
            table57.AddRow(new string[] {
                        "D7",
                        "D6"});
            table57.AddRow(new string[] {
                        "D3",
                        "D2"});
            table57.AddRow(new string[] {
                        "B3",
                        "A2"});
#line 732
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table57, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for pinned white knights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForPinnedWhiteKnights()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for pinned white knights", ((string[])(null)));
#line 743
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table58.AddRow(new string[] {
                        "BB",
                        "",
                        "",
                        "BR",
                        "",
                        "",
                        "BB",
                        ""});
            table58.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table58.AddRow(new string[] {
                        "",
                        "",
                        "WN",
                        "WN",
                        "WN",
                        "",
                        "",
                        ""});
            table58.AddRow(new string[] {
                        "BR",
                        "",
                        "WN",
                        "WK",
                        "WN",
                        "",
                        "BR",
                        ""});
            table58.AddRow(new string[] {
                        "",
                        "",
                        "WN",
                        "WN",
                        "WN",
                        "",
                        "",
                        ""});
            table58.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table58.AddRow(new string[] {
                        "BB",
                        "",
                        "",
                        "BR",
                        "",
                        "",
                        "BB",
                        ""});
            table58.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BK"});
#line 744
 testRunner.Given("I start a new game in the following state", ((string)(null)), table58, "Given ");
#line 754
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 755
 testRunner.Then("I expect no moves were found", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for pinned black knights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForPinnedBlackKnights()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for pinned black knights", ((string[])(null)));
#line 757
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table59.AddRow(new string[] {
                        "WB",
                        "",
                        "",
                        "WR",
                        "",
                        "",
                        "WB",
                        ""});
            table59.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table59.AddRow(new string[] {
                        "",
                        "",
                        "BN",
                        "BN",
                        "BN",
                        "",
                        "",
                        ""});
            table59.AddRow(new string[] {
                        "WR",
                        "",
                        "BN",
                        "BK",
                        "BN",
                        "",
                        "WR",
                        ""});
            table59.AddRow(new string[] {
                        "",
                        "",
                        "BN",
                        "BN",
                        "BN",
                        "",
                        "",
                        ""});
            table59.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table59.AddRow(new string[] {
                        "WB",
                        "",
                        "",
                        "WR",
                        "",
                        "",
                        "WB",
                        ""});
            table59.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 758
 testRunner.Given("I start a new game in the following state", ((string)(null)), table59, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table60.AddRow(new string[] {
                        "A1",
                        "A1",
                        "Move"});
#line 768
 testRunner.Given("I have the following move history", ((string)(null)), table60, "Given ");
#line 771
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 772
 testRunner.Then("I expect no moves were found", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for pinned white bishops")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForPinnedWhiteBishops()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for pinned white bishops", ((string[])(null)));
#line 774
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table61.AddRow(new string[] {
                        "BB",
                        "",
                        "",
                        "BR",
                        "",
                        "",
                        "BB",
                        ""});
            table61.AddRow(new string[] {
                        "",
                        "WB",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table61.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "WB",
                        "WB",
                        "",
                        "",
                        ""});
            table61.AddRow(new string[] {
                        "BR",
                        "",
                        "WB",
                        "WK",
                        "WB",
                        "",
                        "BR",
                        ""});
            table61.AddRow(new string[] {
                        "",
                        "",
                        "WB",
                        "WB",
                        "WB",
                        "",
                        "",
                        ""});
            table61.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table61.AddRow(new string[] {
                        "BB",
                        "",
                        "",
                        "BR",
                        "",
                        "",
                        "BB",
                        ""});
            table61.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BK"});
#line 775
 testRunner.Given("I start a new game in the following state", ((string)(null)), table61, "Given ");
#line 785
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table62.AddRow(new string[] {
                        "B7",
                        "A8"});
            table62.AddRow(new string[] {
                        "B7",
                        "C6"});
            table62.AddRow(new string[] {
                        "C4",
                        "B3"});
            table62.AddRow(new string[] {
                        "C4",
                        "A2"});
            table62.AddRow(new string[] {
                        "D5",
                        "C6"});
            table62.AddRow(new string[] {
                        "E4",
                        "F3"});
            table62.AddRow(new string[] {
                        "E4",
                        "G2"});
            table62.AddRow(new string[] {
                        "E6",
                        "F7"});
            table62.AddRow(new string[] {
                        "E6",
                        "G8"});
#line 786
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table62, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for pinned black bishops")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForPinnedBlackBishops()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for pinned black bishops", ((string[])(null)));
#line 798
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table63.AddRow(new string[] {
                        "WB",
                        "",
                        "",
                        "WR",
                        "",
                        "",
                        "WB",
                        ""});
            table63.AddRow(new string[] {
                        "",
                        "BB",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table63.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "BB",
                        "BB",
                        "",
                        "",
                        ""});
            table63.AddRow(new string[] {
                        "WR",
                        "",
                        "BB",
                        "BK",
                        "BB",
                        "",
                        "WR",
                        ""});
            table63.AddRow(new string[] {
                        "",
                        "",
                        "BB",
                        "BB",
                        "BB",
                        "",
                        "",
                        ""});
            table63.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table63.AddRow(new string[] {
                        "WB",
                        "",
                        "",
                        "WR",
                        "",
                        "",
                        "WB",
                        ""});
            table63.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 799
 testRunner.Given("I start a new game in the following state", ((string)(null)), table63, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table64.AddRow(new string[] {
                        "A1",
                        "A1",
                        "Move"});
#line 809
 testRunner.Given("I have the following move history", ((string)(null)), table64, "Given ");
#line 812
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table65.AddRow(new string[] {
                        "B7",
                        "A8"});
            table65.AddRow(new string[] {
                        "B7",
                        "C6"});
            table65.AddRow(new string[] {
                        "C4",
                        "B3"});
            table65.AddRow(new string[] {
                        "C4",
                        "A2"});
            table65.AddRow(new string[] {
                        "D5",
                        "C6"});
            table65.AddRow(new string[] {
                        "E4",
                        "F3"});
            table65.AddRow(new string[] {
                        "E4",
                        "G2"});
            table65.AddRow(new string[] {
                        "E6",
                        "F7"});
            table65.AddRow(new string[] {
                        "E6",
                        "G8"});
#line 813
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table65, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for pinned white rooks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForPinnedWhiteRooks()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for pinned white rooks", ((string[])(null)));
#line 825
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table66.AddRow(new string[] {
                        "BB",
                        "",
                        "",
                        "BR",
                        "",
                        "",
                        "BB",
                        ""});
            table66.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table66.AddRow(new string[] {
                        "",
                        "",
                        "WR",
                        "WR",
                        "WR",
                        "",
                        "",
                        ""});
            table66.AddRow(new string[] {
                        "BR",
                        "",
                        "WR",
                        "WK",
                        "WR",
                        "",
                        "BR",
                        ""});
            table66.AddRow(new string[] {
                        "",
                        "",
                        "WR",
                        "",
                        "WR",
                        "",
                        "",
                        ""});
            table66.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "WR",
                        "",
                        "",
                        "",
                        ""});
            table66.AddRow(new string[] {
                        "BB",
                        "",
                        "",
                        "BR",
                        "",
                        "",
                        "BB",
                        ""});
            table66.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BK"});
#line 826
 testRunner.Given("I start a new game in the following state", ((string)(null)), table66, "Given ");
#line 836
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table67.AddRow(new string[] {
                        "D5",
                        "D4"});
            table67.AddRow(new string[] {
                        "D6",
                        "D7"});
            table67.AddRow(new string[] {
                        "D6",
                        "D8"});
            table67.AddRow(new string[] {
                        "E5",
                        "F5"});
            table67.AddRow(new string[] {
                        "E5",
                        "G5"});
            table67.AddRow(new string[] {
                        "D3",
                        "D4"});
            table67.AddRow(new string[] {
                        "D3",
                        "D2"});
            table67.AddRow(new string[] {
                        "C5",
                        "B5"});
            table67.AddRow(new string[] {
                        "C5",
                        "A5"});
#line 837
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table67, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for pinned black rooks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForPinnedBlackRooks()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for pinned black rooks", ((string[])(null)));
#line 849
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table68.AddRow(new string[] {
                        "WB",
                        "",
                        "",
                        "WR",
                        "",
                        "",
                        "WB",
                        ""});
            table68.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table68.AddRow(new string[] {
                        "",
                        "",
                        "BR",
                        "BR",
                        "BR",
                        "",
                        "",
                        ""});
            table68.AddRow(new string[] {
                        "WR",
                        "",
                        "BR",
                        "BK",
                        "BR",
                        "",
                        "WR",
                        ""});
            table68.AddRow(new string[] {
                        "",
                        "",
                        "BR",
                        "",
                        "BR",
                        "",
                        "",
                        ""});
            table68.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "BR",
                        "",
                        "",
                        "",
                        ""});
            table68.AddRow(new string[] {
                        "WB",
                        "",
                        "",
                        "WR",
                        "",
                        "",
                        "WB",
                        ""});
            table68.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 850
 testRunner.Given("I start a new game in the following state", ((string)(null)), table68, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table69.AddRow(new string[] {
                        "A1",
                        "A1",
                        "Move"});
#line 860
 testRunner.Given("I have the following move history", ((string)(null)), table69, "Given ");
#line 863
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table70.AddRow(new string[] {
                        "D5",
                        "D4"});
            table70.AddRow(new string[] {
                        "D6",
                        "D7"});
            table70.AddRow(new string[] {
                        "D6",
                        "D8"});
            table70.AddRow(new string[] {
                        "E5",
                        "F5"});
            table70.AddRow(new string[] {
                        "E5",
                        "G5"});
            table70.AddRow(new string[] {
                        "D3",
                        "D4"});
            table70.AddRow(new string[] {
                        "D3",
                        "D2"});
            table70.AddRow(new string[] {
                        "C5",
                        "B5"});
            table70.AddRow(new string[] {
                        "C5",
                        "A5"});
#line 864
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table70, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for pinned white queens")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForPinnedWhiteQueens()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for pinned white queens", ((string[])(null)));
#line 876
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table71 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table71.AddRow(new string[] {
                        "BB",
                        "",
                        "",
                        "BR",
                        "",
                        "",
                        "BB",
                        ""});
            table71.AddRow(new string[] {
                        "",
                        "WQ",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table71.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "WQ",
                        "WQ",
                        "",
                        "",
                        ""});
            table71.AddRow(new string[] {
                        "BR",
                        "",
                        "WQ",
                        "WK",
                        "WQ",
                        "",
                        "BR",
                        ""});
            table71.AddRow(new string[] {
                        "",
                        "",
                        "WQ",
                        "",
                        "WQ",
                        "",
                        "",
                        ""});
            table71.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "WQ",
                        "",
                        "",
                        "",
                        ""});
            table71.AddRow(new string[] {
                        "BB",
                        "",
                        "",
                        "BR",
                        "",
                        "",
                        "BB",
                        ""});
            table71.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BK"});
#line 877
 testRunner.Given("I start a new game in the following state", ((string)(null)), table71, "Given ");
#line 887
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table72 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table72.AddRow(new string[] {
                        "D5",
                        "D4"});
            table72.AddRow(new string[] {
                        "D5",
                        "C6"});
            table72.AddRow(new string[] {
                        "D6",
                        "D7"});
            table72.AddRow(new string[] {
                        "D6",
                        "D8"});
            table72.AddRow(new string[] {
                        "E5",
                        "F5"});
            table72.AddRow(new string[] {
                        "E5",
                        "G5"});
            table72.AddRow(new string[] {
                        "D3",
                        "D4"});
            table72.AddRow(new string[] {
                        "D3",
                        "D2"});
            table72.AddRow(new string[] {
                        "C5",
                        "B5"});
            table72.AddRow(new string[] {
                        "C5",
                        "A5"});
            table72.AddRow(new string[] {
                        "B7",
                        "A8"});
            table72.AddRow(new string[] {
                        "B7",
                        "C6"});
            table72.AddRow(new string[] {
                        "C4",
                        "B3"});
            table72.AddRow(new string[] {
                        "C4",
                        "A2"});
            table72.AddRow(new string[] {
                        "E4",
                        "F3"});
            table72.AddRow(new string[] {
                        "E4",
                        "G2"});
            table72.AddRow(new string[] {
                        "E6",
                        "F7"});
            table72.AddRow(new string[] {
                        "E6",
                        "G8"});
#line 888
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table72, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for pinned black queens")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForPinnedBlackQueens()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for pinned black queens", ((string[])(null)));
#line 909
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table73 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table73.AddRow(new string[] {
                        "WB",
                        "",
                        "",
                        "WR",
                        "",
                        "",
                        "WB",
                        ""});
            table73.AddRow(new string[] {
                        "",
                        "BQ",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table73.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "BQ",
                        "BQ",
                        "",
                        "",
                        ""});
            table73.AddRow(new string[] {
                        "WR",
                        "",
                        "BQ",
                        "BK",
                        "BQ",
                        "",
                        "WR",
                        ""});
            table73.AddRow(new string[] {
                        "",
                        "",
                        "BQ",
                        "",
                        "BQ",
                        "",
                        "",
                        ""});
            table73.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "BQ",
                        "",
                        "",
                        "",
                        ""});
            table73.AddRow(new string[] {
                        "WB",
                        "",
                        "",
                        "WR",
                        "",
                        "",
                        "WB",
                        ""});
            table73.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 910
 testRunner.Given("I start a new game in the following state", ((string)(null)), table73, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table74 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table74.AddRow(new string[] {
                        "A1",
                        "A1",
                        "Move"});
#line 920
 testRunner.Given("I have the following move history", ((string)(null)), table74, "Given ");
#line 923
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table75 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table75.AddRow(new string[] {
                        "D5",
                        "D4"});
            table75.AddRow(new string[] {
                        "D5",
                        "C6"});
            table75.AddRow(new string[] {
                        "D6",
                        "D7"});
            table75.AddRow(new string[] {
                        "D6",
                        "D8"});
            table75.AddRow(new string[] {
                        "E5",
                        "F5"});
            table75.AddRow(new string[] {
                        "E5",
                        "G5"});
            table75.AddRow(new string[] {
                        "D3",
                        "D4"});
            table75.AddRow(new string[] {
                        "D3",
                        "D2"});
            table75.AddRow(new string[] {
                        "C5",
                        "B5"});
            table75.AddRow(new string[] {
                        "C5",
                        "A5"});
            table75.AddRow(new string[] {
                        "B7",
                        "A8"});
            table75.AddRow(new string[] {
                        "B7",
                        "C6"});
            table75.AddRow(new string[] {
                        "C4",
                        "B3"});
            table75.AddRow(new string[] {
                        "C4",
                        "A2"});
            table75.AddRow(new string[] {
                        "E4",
                        "F3"});
            table75.AddRow(new string[] {
                        "E4",
                        "G2"});
            table75.AddRow(new string[] {
                        "E6",
                        "F7"});
            table75.AddRow(new string[] {
                        "E6",
                        "G8"});
#line 924
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table75, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for double checked white king")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForDoubleCheckedWhiteKing()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for double checked white king", ((string[])(null)));
#line 950
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table76.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WQ",
                        ""});
            table76.AddRow(new string[] {
                        "",
                        "",
                        "BN",
                        "",
                        "",
                        "BB",
                        "",
                        ""});
            table76.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BR"});
            table76.AddRow(new string[] {
                        "",
                        "WR",
                        "",
                        "WK",
                        "",
                        "",
                        "",
                        ""});
            table76.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WR",
                        "",
                        ""});
            table76.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BN",
                        "",
                        ""});
            table76.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table76.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BK"});
#line 951
 testRunner.Given("I start a new game in the following state", ((string)(null)), table76, "Given ");
#line 961
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table77.AddRow(new string[] {
                        "D5",
                        "C5"});
            table77.AddRow(new string[] {
                        "D5",
                        "E4"});
#line 962
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table77, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for double checked black king")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForDoubleCheckedBlackKing()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for double checked black king", ((string[])(null)));
#line 967
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table78 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table78.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table78.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table78.AddRow(new string[] {
                        "",
                        "",
                        "WR",
                        "",
                        "BK",
                        "",
                        "",
                        ""});
            table78.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table78.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table78.AddRow(new string[] {
                        "",
                        "WB",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table78.AddRow(new string[] {
                        "BQ",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table78.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 968
 testRunner.Given("I start a new game in the following state", ((string)(null)), table78, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table79 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table79.AddRow(new string[] {
                        "C1",
                        "C1",
                        "Move"});
#line 978
 testRunner.Given("I have the following move history", ((string)(null)), table79, "Given ");
#line 981
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table80 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table80.AddRow(new string[] {
                        "E6",
                        "E7"});
            table80.AddRow(new string[] {
                        "E6",
                        "E5"});
            table80.AddRow(new string[] {
                        "E6",
                        "D7"});
            table80.AddRow(new string[] {
                        "E6",
                        "F5"});
#line 982
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table80, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for white king checked by pawn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForWhiteKingCheckedByPawn()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for white king checked by pawn", ((string[])(null)));
#line 989
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table81 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table81.AddRow(new string[] {
                        "",
                        "WR",
                        "",
                        "WN",
                        "WB",
                        "",
                        "",
                        ""});
            table81.AddRow(new string[] {
                        "",
                        "BP",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table81.AddRow(new string[] {
                        "WQ",
                        "",
                        "BP",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table81.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "WK",
                        "",
                        "",
                        "",
                        ""});
            table81.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table81.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table81.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table81.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BK"});
#line 990
 testRunner.Given("I start a new game in the following state", ((string)(null)), table81, "Given ");
#line 1000
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table82 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table82.AddRow(new string[] {
                        "A6",
                        "C6"});
            table82.AddRow(new string[] {
                        "D5",
                        "D6"});
            table82.AddRow(new string[] {
                        "D5",
                        "D4"});
            table82.AddRow(new string[] {
                        "D5",
                        "E5"});
            table82.AddRow(new string[] {
                        "D5",
                        "C5"});
            table82.AddRow(new string[] {
                        "D5",
                        "E6"});
            table82.AddRow(new string[] {
                        "D5",
                        "E4"});
            table82.AddRow(new string[] {
                        "D5",
                        "C4"});
            table82.AddRow(new string[] {
                        "D8",
                        "C6"});
            table82.AddRow(new string[] {
                        "E8",
                        "C6"});
#line 1001
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table82, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for black king checked by pawn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForBlackKingCheckedByPawn()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for black king checked by pawn", ((string[])(null)));
#line 1014
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table83 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table83.AddRow(new string[] {
                        "",
                        "",
                        "BQ",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table83.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table83.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table83.AddRow(new string[] {
                        "BB",
                        "",
                        "",
                        "",
                        "BP",
                        "",
                        "",
                        ""});
            table83.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "BK",
                        "BN",
                        "",
                        "",
                        ""});
            table83.AddRow(new string[] {
                        "",
                        "",
                        "WP",
                        "",
                        "",
                        "",
                        "",
                        "BR"});
            table83.AddRow(new string[] {
                        "",
                        "WP",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table83.AddRow(new string[] {
                        "",
                        "WK",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 1015
 testRunner.Given("I start a new game in the following state", ((string)(null)), table83, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table84 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table84.AddRow(new string[] {
                        "C1",
                        "C1",
                        "Move"});
#line 1025
 testRunner.Given("I have the following move history", ((string)(null)), table84, "Given ");
#line 1028
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table85 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table85.AddRow(new string[] {
                        "A5",
                        "C3"});
            table85.AddRow(new string[] {
                        "C8",
                        "C3"});
            table85.AddRow(new string[] {
                        "D4",
                        "D5"});
            table85.AddRow(new string[] {
                        "D4",
                        "D3"});
            table85.AddRow(new string[] {
                        "D4",
                        "C4"});
            table85.AddRow(new string[] {
                        "D4",
                        "C5"});
            table85.AddRow(new string[] {
                        "D4",
                        "E3"});
            table85.AddRow(new string[] {
                        "E4",
                        "C3"});
            table85.AddRow(new string[] {
                        "H3",
                        "C3"});
#line 1029
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table85, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for white king checked by knight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForWhiteKingCheckedByKnight()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for white king checked by knight", ((string[])(null)));
#line 1041
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table86 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table86.AddRow(new string[] {
                        "",
                        "WQ",
                        "",
                        "",
                        "",
                        "",
                        "WB",
                        "BK"});
            table86.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BP"});
            table86.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table86.AddRow(new string[] {
                        "WN",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table86.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table86.AddRow(new string[] {
                        "",
                        "BN",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WR"});
            table86.AddRow(new string[] {
                        "WP",
                        "WP",
                        "WP",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table86.AddRow(new string[] {
                        "WK",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 1042
 testRunner.Given("I start a new game in the following state", ((string)(null)), table86, "Given ");
#line 1052
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table87 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table87.AddRow(new string[] {
                        "A1",
                        "B1"});
            table87.AddRow(new string[] {
                        "A2",
                        "B3"});
            table87.AddRow(new string[] {
                        "A5",
                        "B3"});
            table87.AddRow(new string[] {
                        "B8",
                        "B3"});
            table87.AddRow(new string[] {
                        "C2",
                        "B3"});
            table87.AddRow(new string[] {
                        "G8",
                        "B3"});
            table87.AddRow(new string[] {
                        "H3",
                        "B3"});
#line 1053
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table87, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for black king checked by knight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForBlackKingCheckedByKnight()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for black king checked by knight", ((string[])(null)));
#line 1063
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table88 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table88.AddRow(new string[] {
                        "BK",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table88.AddRow(new string[] {
                        "BP",
                        "BP",
                        "BP",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table88.AddRow(new string[] {
                        "",
                        "WN",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BR"});
            table88.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table88.AddRow(new string[] {
                        "BN",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table88.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table88.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WP"});
            table88.AddRow(new string[] {
                        "",
                        "BQ",
                        "",
                        "",
                        "",
                        "",
                        "BB",
                        "WK"});
#line 1064
 testRunner.Given("I start a new game in the following state", ((string)(null)), table88, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table89 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table89.AddRow(new string[] {
                        "C1",
                        "C1",
                        "Move"});
#line 1074
 testRunner.Given("I have the following move history", ((string)(null)), table89, "Given ");
#line 1077
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table90 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table90.AddRow(new string[] {
                        "A4",
                        "B6"});
            table90.AddRow(new string[] {
                        "A7",
                        "B6"});
            table90.AddRow(new string[] {
                        "A8",
                        "B8"});
            table90.AddRow(new string[] {
                        "B1",
                        "B6"});
            table90.AddRow(new string[] {
                        "C7",
                        "B6"});
            table90.AddRow(new string[] {
                        "G1",
                        "B6"});
            table90.AddRow(new string[] {
                        "H6",
                        "B6"});
#line 1078
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table90, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void FindMovesShouldFindAllMovesForWhiteKingCheckedBy(string testName, string h8, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for white king checked by", exampleTags);
#line 1088
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table91 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table91.AddRow(new string[] {
                        "BK",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        string.Format("{0}", h8)});
            table91.AddRow(new string[] {
                        "BP",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table91.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table91.AddRow(new string[] {
                        "",
                        "WR",
                        "",
                        "WN",
                        "",
                        "",
                        "",
                        ""});
            table91.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WQ"});
            table91.AddRow(new string[] {
                        "WB",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table91.AddRow(new string[] {
                        "WP",
                        "",
                        "WP",
                        "WP",
                        "",
                        "",
                        "",
                        ""});
            table91.AddRow(new string[] {
                        "WK",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 1089
 testRunner.Given("I start a new game in the following state", ((string)(null)), table91, "Given ");
#line 1099
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table92 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table92.AddRow(new string[] {
                        "A1",
                        "B1"});
            table92.AddRow(new string[] {
                        "C2",
                        "C3"});
            table92.AddRow(new string[] {
                        "D2",
                        "D4"});
            table92.AddRow(new string[] {
                        "D5",
                        "C3"});
            table92.AddRow(new string[] {
                        "D5",
                        "F6"});
            table92.AddRow(new string[] {
                        "A3",
                        "B2"});
            table92.AddRow(new string[] {
                        "B5",
                        "B2"});
            table92.AddRow(new string[] {
                        "H4",
                        "D4"});
            table92.AddRow(new string[] {
                        "H4",
                        "H8"});
            table92.AddRow(new string[] {
                        "H4",
                        "F6"});
#line 1100
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table92, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for white king checked by: Bishop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Bishop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test name", "Bishop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:H8", "BB")]
        public virtual void FindMovesShouldFindAllMovesForWhiteKingCheckedBy_Bishop()
        {
#line 1088
this.FindMovesShouldFindAllMovesForWhiteKingCheckedBy("Bishop", "BB", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for white king checked by: Queen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Queen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test name", "Queen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:H8", "BQ")]
        public virtual void FindMovesShouldFindAllMovesForWhiteKingCheckedBy_Queen()
        {
#line 1088
this.FindMovesShouldFindAllMovesForWhiteKingCheckedBy("Queen", "BQ", ((string[])(null)));
#line hidden
        }
        
        public virtual void FindMovesShouldFindAllMovesForBlackKingCheckedBy(string testName, string h1, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for black king checked by", exampleTags);
#line 1117
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table93 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table93.AddRow(new string[] {
                        "BK",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table93.AddRow(new string[] {
                        "BP",
                        "",
                        "BP",
                        "BP",
                        "",
                        "",
                        "",
                        ""});
            table93.AddRow(new string[] {
                        "BB",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table93.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BQ"});
            table93.AddRow(new string[] {
                        "",
                        "BR",
                        "",
                        "BN",
                        "",
                        "",
                        "",
                        ""});
            table93.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table93.AddRow(new string[] {
                        "WP",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table93.AddRow(new string[] {
                        "WK",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        string.Format("{0}", h1)});
#line 1118
 testRunner.Given("I start a new game in the following state", ((string)(null)), table93, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table94 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table94.AddRow(new string[] {
                        "C1",
                        "C1",
                        "Move"});
#line 1128
 testRunner.Given("I have the following move history", ((string)(null)), table94, "Given ");
#line 1131
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table95 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table95.AddRow(new string[] {
                        "A8",
                        "B8"});
            table95.AddRow(new string[] {
                        "A6",
                        "B7"});
            table95.AddRow(new string[] {
                        "B4",
                        "B7"});
            table95.AddRow(new string[] {
                        "C7",
                        "C6"});
            table95.AddRow(new string[] {
                        "D4",
                        "C6"});
            table95.AddRow(new string[] {
                        "D4",
                        "F3"});
            table95.AddRow(new string[] {
                        "D7",
                        "D5"});
            table95.AddRow(new string[] {
                        "H5",
                        "D5"});
            table95.AddRow(new string[] {
                        "H5",
                        "H1"});
            table95.AddRow(new string[] {
                        "H5",
                        "F3"});
#line 1132
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table95, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for black king checked by: Bishop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Bishop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test name", "Bishop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:H1", "WB")]
        public virtual void FindMovesShouldFindAllMovesForBlackKingCheckedBy_Bishop()
        {
#line 1117
this.FindMovesShouldFindAllMovesForBlackKingCheckedBy("Bishop", "WB", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for black king checked by: Queen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Queen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test name", "Queen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:H1", "WQ")]
        public virtual void FindMovesShouldFindAllMovesForBlackKingCheckedBy_Queen()
        {
#line 1117
this.FindMovesShouldFindAllMovesForBlackKingCheckedBy("Queen", "WQ", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should correctly move for white")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void MakeMoveShouldCorrectlyMoveForWhite()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make move should correctly move for white", ((string[])(null)));
#line 1153
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table96 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table96.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BK",
                        "",
                        "",
                        "BR"});
            table96.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table96.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table96.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table96.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table96.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table96.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table96.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "WK",
                        "",
                        "",
                        "WR"});
#line 1154
 testRunner.Given("I start a new game in the following state", ((string)(null)), table96, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table97 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table97.AddRow(new string[] {
                        "H1",
                        "H7"});
#line 1164
 testRunner.When("I make the following move", ((string)(null)), table97, "When ");
#line hidden
            TechTalk.SpecFlow.Table table98 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table98.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BK",
                        "",
                        "",
                        "BR"});
            table98.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WR"});
            table98.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table98.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table98.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table98.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table98.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table98.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "WK",
                        "",
                        "",
                        ""});
#line 1167
 testRunner.Then("I expect the current board to contain the following", ((string)(null)), table98, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should correctly move for black")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void MakeMoveShouldCorrectlyMoveForBlack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make move should correctly move for black", ((string[])(null)));
#line 1178
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table99 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table99.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BK",
                        "",
                        "",
                        "BR"});
            table99.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table99.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table99.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table99.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table99.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table99.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table99.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "WK",
                        "",
                        "",
                        "WR"});
#line 1179
 testRunner.Given("I start a new game in the following state", ((string)(null)), table99, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table100 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table100.AddRow(new string[] {
                        "A4",
                        "A4",
                        "Move"});
#line 1189
 testRunner.Given("I have the following move history", ((string)(null)), table100, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table101 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table101.AddRow(new string[] {
                        "H8",
                        "H2"});
#line 1192
 testRunner.When("I make the following move", ((string)(null)), table101, "When ");
#line hidden
            TechTalk.SpecFlow.Table table102 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table102.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BK",
                        "",
                        "",
                        ""});
            table102.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table102.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table102.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table102.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table102.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table102.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BR"});
            table102.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "WK",
                        "",
                        "",
                        "WR"});
#line 1195
 testRunner.Then("I expect the current board to contain the following", ((string)(null)), table102, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should correctly capture for white")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void MakeMoveShouldCorrectlyCaptureForWhite()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make move should correctly capture for white", ((string[])(null)));
#line 1206
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table103 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table103.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BK",
                        "",
                        "",
                        "BR"});
            table103.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table103.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table103.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table103.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table103.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table103.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table103.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "WK",
                        "",
                        "",
                        "WR"});
#line 1207
 testRunner.Given("I start a new game in the following state", ((string)(null)), table103, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table104 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table104.AddRow(new string[] {
                        "H1",
                        "H8"});
#line 1217
 testRunner.When("I make the following move", ((string)(null)), table104, "When ");
#line hidden
            TechTalk.SpecFlow.Table table105 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table105.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BK",
                        "",
                        "",
                        "WR"});
            table105.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table105.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table105.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table105.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table105.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table105.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table105.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "WK",
                        "",
                        "",
                        ""});
#line 1220
 testRunner.Then("I expect the current board to contain the following", ((string)(null)), table105, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should correctly capture for black")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void MakeMoveShouldCorrectlyCaptureForBlack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make move should correctly capture for black", ((string[])(null)));
#line 1231
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table106 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table106.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BK",
                        "",
                        "",
                        "BR"});
            table106.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table106.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table106.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table106.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table106.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table106.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table106.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "WK",
                        "",
                        "",
                        "WR"});
#line 1232
 testRunner.Given("I start a new game in the following state", ((string)(null)), table106, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table107 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table107.AddRow(new string[] {
                        "A4",
                        "A4",
                        "Move"});
#line 1242
 testRunner.Given("I have the following move history", ((string)(null)), table107, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table108 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table108.AddRow(new string[] {
                        "H8",
                        "H1"});
#line 1245
 testRunner.When("I make the following move", ((string)(null)), table108, "When ");
#line hidden
            TechTalk.SpecFlow.Table table109 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table109.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BK",
                        "",
                        "",
                        ""});
            table109.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table109.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table109.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table109.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table109.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table109.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table109.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "WK",
                        "",
                        "",
                        "BR"});
#line 1248
 testRunner.Then("I expect the current board to contain the following", ((string)(null)), table109, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should report an illegal move for a pawn promotion without promotion sp" +
            "ecified")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void MakeMoveShouldReportAnIllegalMoveForAPawnPromotionWithoutPromotionSpecified()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make move should report an illegal move for a pawn promotion without promotion sp" +
                    "ecified", ((string[])(null)));
#line 1259
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table110 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table110.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BK",
                        "",
                        "",
                        ""});
            table110.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WP"});
            table110.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table110.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table110.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table110.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table110.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table110.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "WK",
                        "",
                        "",
                        ""});
#line 1260
 testRunner.Given("I start a new game in the following state", ((string)(null)), table110, "Given ");
#line 1270
 testRunner.Given("I expect an exception to be thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table111 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table111.AddRow(new string[] {
                        "H7",
                        "H8"});
#line 1271
 testRunner.When("I make the following move", ((string)(null)), table111, "When ");
#line hidden
            TechTalk.SpecFlow.Table table112 = new TechTalk.SpecFlow.Table(new string[] {
                        "ErrorCode",
                        "Message"});
            table112.AddRow(new string[] {
                        "IllegalMove",
                        "The move is not valid because it is not legal."});
#line 1274
 testRunner.Then("I expect the following Exception to be thrown", ((string)(null)), table112, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void MakeMoveShouldCorrectlyPromotePawnForWhiteMoveTo(string promotionType, string h8, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make move should correctly promote pawn for white move to", exampleTags);
#line 1278
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table113 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table113.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BK",
                        "",
                        "",
                        ""});
            table113.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WP"});
            table113.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table113.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table113.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table113.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table113.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table113.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "WK",
                        "",
                        "",
                        ""});
#line 1279
 testRunner.Given("I start a new game in the following state", ((string)(null)), table113, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table114 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "PromotionType"});
            table114.AddRow(new string[] {
                        "H7",
                        "H8",
                        string.Format("{0}", promotionType)});
#line 1289
 testRunner.When("I make the following move", ((string)(null)), table114, "When ");
#line hidden
            TechTalk.SpecFlow.Table table115 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table115.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BK",
                        "",
                        "",
                        string.Format("{0}", h8)});
            table115.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table115.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table115.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table115.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table115.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table115.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table115.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "WK",
                        "",
                        "",
                        ""});
#line 1292
 testRunner.Then("I expect the current board to contain the following", ((string)(null)), table115, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should correctly promote pawn for white move to: Knight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Knight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:PromotionType", "Knight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:H8", "WN")]
        public virtual void MakeMoveShouldCorrectlyPromotePawnForWhiteMoveTo_Knight()
        {
#line 1278
this.MakeMoveShouldCorrectlyPromotePawnForWhiteMoveTo("Knight", "WN", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should correctly promote pawn for white move to: Bishop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Bishop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:PromotionType", "Bishop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:H8", "WB")]
        public virtual void MakeMoveShouldCorrectlyPromotePawnForWhiteMoveTo_Bishop()
        {
#line 1278
this.MakeMoveShouldCorrectlyPromotePawnForWhiteMoveTo("Bishop", "WB", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should correctly promote pawn for white move to: Rook")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Rook")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:PromotionType", "Rook")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:H8", "WR")]
        public virtual void MakeMoveShouldCorrectlyPromotePawnForWhiteMoveTo_Rook()
        {
#line 1278
this.MakeMoveShouldCorrectlyPromotePawnForWhiteMoveTo("Rook", "WR", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should correctly promote pawn for white move to: Queen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Queen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:PromotionType", "Queen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:H8", "WQ")]
        public virtual void MakeMoveShouldCorrectlyPromotePawnForWhiteMoveTo_Queen()
        {
#line 1278
this.MakeMoveShouldCorrectlyPromotePawnForWhiteMoveTo("Queen", "WQ", ((string[])(null)));
#line hidden
        }
        
        public virtual void MakeMoveShouldCorrectlyPromotePawnForBlackMoveTo(string promotionType, string h1, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make move should correctly promote pawn for black move to", exampleTags);
#line 1309
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table116 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table116.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BK",
                        "",
                        "",
                        ""});
            table116.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table116.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table116.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table116.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table116.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table116.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BP"});
            table116.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "WK",
                        "",
                        "",
                        ""});
#line 1310
 testRunner.Given("I start a new game in the following state", ((string)(null)), table116, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table117 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table117.AddRow(new string[] {
                        "H4",
                        "H4",
                        "Move"});
#line 1320
 testRunner.Given("I have the following move history", ((string)(null)), table117, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table118 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "PromotionType"});
            table118.AddRow(new string[] {
                        "H2",
                        "H1",
                        string.Format("{0}", promotionType)});
#line 1323
 testRunner.When("I make the following move", ((string)(null)), table118, "When ");
#line hidden
            TechTalk.SpecFlow.Table table119 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table119.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BK",
                        "",
                        "",
                        ""});
            table119.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table119.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table119.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table119.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table119.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table119.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table119.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "WK",
                        "",
                        "",
                        string.Format("{0}", h1)});
#line 1326
 testRunner.Then("I expect the current board to contain the following", ((string)(null)), table119, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should correctly promote pawn for black move to: Knight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Knight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:PromotionType", "Knight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:H1", "BN")]
        public virtual void MakeMoveShouldCorrectlyPromotePawnForBlackMoveTo_Knight()
        {
#line 1309
this.MakeMoveShouldCorrectlyPromotePawnForBlackMoveTo("Knight", "BN", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should correctly promote pawn for black move to: Bishop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Bishop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:PromotionType", "Bishop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:H1", "BB")]
        public virtual void MakeMoveShouldCorrectlyPromotePawnForBlackMoveTo_Bishop()
        {
#line 1309
this.MakeMoveShouldCorrectlyPromotePawnForBlackMoveTo("Bishop", "BB", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should correctly promote pawn for black move to: Rook")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Rook")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:PromotionType", "Rook")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:H1", "BR")]
        public virtual void MakeMoveShouldCorrectlyPromotePawnForBlackMoveTo_Rook()
        {
#line 1309
this.MakeMoveShouldCorrectlyPromotePawnForBlackMoveTo("Rook", "BR", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should correctly promote pawn for black move to: Queen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Queen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:PromotionType", "Queen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:H1", "BQ")]
        public virtual void MakeMoveShouldCorrectlyPromotePawnForBlackMoveTo_Queen()
        {
#line 1309
this.MakeMoveShouldCorrectlyPromotePawnForBlackMoveTo("Queen", "BQ", ((string[])(null)));
#line hidden
        }
        
        public virtual void MakeMoveShouldCorrectlyPromotePawnForWhiteCaptureTo(string promotionType, string destination, string h8, string f8, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make move should correctly promote pawn for white capture to", exampleTags);
#line 1343
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table120 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table120.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BK",
                        "BN",
                        "",
                        "BN"});
            table120.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WP",
                        ""});
            table120.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table120.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table120.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table120.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table120.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table120.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "WK",
                        "",
                        "",
                        ""});
#line 1344
 testRunner.Given("I start a new game in the following state", ((string)(null)), table120, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table121 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "PromotionType"});
            table121.AddRow(new string[] {
                        "H7",
                        string.Format("{0}", destination),
                        string.Format("{0}", promotionType)});
#line 1354
 testRunner.When("I make the following move", ((string)(null)), table121, "When ");
#line hidden
            TechTalk.SpecFlow.Table table122 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table122.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BK",
                        string.Format("{0}", f8),
                        "",
                        string.Format("{0}", h8)});
            table122.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table122.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table122.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table122.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table122.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table122.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table122.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "WK",
                        "",
                        "",
                        ""});
#line 1357
 testRunner.Then("I expect the current board to contain the following", ((string)(null)), table122, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should correctly promote pawn for white capture to: Knight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Knight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:PromotionType", "Knight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Destination", "H8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:H8", "WN")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:F8", "BN")]
        public virtual void MakeMoveShouldCorrectlyPromotePawnForWhiteCaptureTo_Knight()
        {
#line 1343
this.MakeMoveShouldCorrectlyPromotePawnForWhiteCaptureTo("Knight", "H8", "WN", "BN", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should correctly promote pawn for white capture to: Bishop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Bishop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:PromotionType", "Bishop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Destination", "F8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:H8", "BN")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:F8", "WB")]
        public virtual void MakeMoveShouldCorrectlyPromotePawnForWhiteCaptureTo_Bishop()
        {
#line 1343
this.MakeMoveShouldCorrectlyPromotePawnForWhiteCaptureTo("Bishop", "F8", "BN", "WB", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should correctly promote pawn for white capture to: Rook")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Rook")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:PromotionType", "Rook")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Destination", "H8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:H8", "WR")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:F8", "BN")]
        public virtual void MakeMoveShouldCorrectlyPromotePawnForWhiteCaptureTo_Rook()
        {
#line 1343
this.MakeMoveShouldCorrectlyPromotePawnForWhiteCaptureTo("Rook", "H8", "WR", "BN", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should correctly promote pawn for white capture to: Queen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Queen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:PromotionType", "Queen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Destination", "F8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:H8", "BN")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:F8", "WQ")]
        public virtual void MakeMoveShouldCorrectlyPromotePawnForWhiteCaptureTo_Queen()
        {
#line 1343
this.MakeMoveShouldCorrectlyPromotePawnForWhiteCaptureTo("Queen", "F8", "BN", "WQ", ((string[])(null)));
#line hidden
        }
        
        public virtual void MakeMoveShouldCorrectlyPromotePawnForBlackCaptureTo(string promotionType, string destination, string f1, string h1, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make move should correctly promote pawn for black capture to", exampleTags);
#line 1374
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table123 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table123.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BK",
                        "",
                        "",
                        ""});
            table123.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table123.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table123.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table123.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table123.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table123.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BP",
                        ""});
            table123.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "WK",
                        "WN",
                        "",
                        "WN"});
#line 1375
 testRunner.Given("I start a new game in the following state", ((string)(null)), table123, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table124 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table124.AddRow(new string[] {
                        "H4",
                        "H4",
                        "Move"});
#line 1385
 testRunner.Given("I have the following move history", ((string)(null)), table124, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table125 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "PromotionType"});
            table125.AddRow(new string[] {
                        "H2",
                        string.Format("{0}", destination),
                        string.Format("{0}", promotionType)});
#line 1388
 testRunner.When("I make the following move", ((string)(null)), table125, "When ");
#line hidden
            TechTalk.SpecFlow.Table table126 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table126.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BK",
                        "",
                        "",
                        ""});
            table126.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table126.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table126.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table126.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table126.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table126.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table126.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "WK",
                        string.Format("{0}", f1),
                        "",
                        string.Format("{0}", h1)});
#line 1391
 testRunner.Then("I expect the current board to contain the following", ((string)(null)), table126, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should correctly promote pawn for black capture to: Knight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Knight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:PromotionType", "Knight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Destination", "H1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:F1", "WN")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:H1", "BN")]
        public virtual void MakeMoveShouldCorrectlyPromotePawnForBlackCaptureTo_Knight()
        {
#line 1374
this.MakeMoveShouldCorrectlyPromotePawnForBlackCaptureTo("Knight", "H1", "WN", "BN", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should correctly promote pawn for black capture to: Bishop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Bishop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:PromotionType", "Bishop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Destination", "F1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:F1", "BB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:H1", "WN")]
        public virtual void MakeMoveShouldCorrectlyPromotePawnForBlackCaptureTo_Bishop()
        {
#line 1374
this.MakeMoveShouldCorrectlyPromotePawnForBlackCaptureTo("Bishop", "F1", "BB", "WN", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should correctly promote pawn for black capture to: Rook")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Rook")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:PromotionType", "Rook")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Destination", "H1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:F1", "WN")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:H1", "BR")]
        public virtual void MakeMoveShouldCorrectlyPromotePawnForBlackCaptureTo_Rook()
        {
#line 1374
this.MakeMoveShouldCorrectlyPromotePawnForBlackCaptureTo("Rook", "H1", "WN", "BR", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should correctly promote pawn for black capture to: Queen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Queen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:PromotionType", "Queen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Destination", "F1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:F1", "BQ")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:H1", "WN")]
        public virtual void MakeMoveShouldCorrectlyPromotePawnForBlackCaptureTo_Queen()
        {
#line 1374
this.MakeMoveShouldCorrectlyPromotePawnForBlackCaptureTo("Queen", "F1", "BQ", "WN", ((string[])(null)));
#line hidden
        }
        
        public virtual void MakeMoveShouldNotAllowAMoveIfTheGamestateIsIn(string gameState, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make move should not allow a move if the gamestate is in", exampleTags);
#line 1408
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line 1409
 testRunner.Given("I start a new game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1410
 testRunner.Given(string.Format("The game is in the following gamestate \'{0}\'", gameState), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1411
 testRunner.Given("I expect an exception to be thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table127 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table127.AddRow(new string[] {
                        "A2",
                        "A3"});
#line 1412
 testRunner.When("I make the following move", ((string)(null)), table127, "When ");
#line hidden
            TechTalk.SpecFlow.Table table128 = new TechTalk.SpecFlow.Table(new string[] {
                        "ErrorCode",
                        "Message"});
            table128.AddRow(new string[] {
                        "InvalidMoveGameOver",
                        "The move is not valid because the game is over."});
#line 1415
 testRunner.Then("I expect the following ChessException to be thrown", ((string)(null)), table128, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should not allow a move if the gamestate is in: WhiteWin")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "WhiteWin")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:GameState", "WhiteWin")]
        public virtual void MakeMoveShouldNotAllowAMoveIfTheGamestateIsIn_WhiteWin()
        {
#line 1408
this.MakeMoveShouldNotAllowAMoveIfTheGamestateIsIn("WhiteWin", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should not allow a move if the gamestate is in: BlackWin")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "BlackWin")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:GameState", "BlackWin")]
        public virtual void MakeMoveShouldNotAllowAMoveIfTheGamestateIsIn_BlackWin()
        {
#line 1408
this.MakeMoveShouldNotAllowAMoveIfTheGamestateIsIn("BlackWin", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should not allow a move if the gamestate is in: DrawStalemate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "DrawStalemate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:GameState", "DrawStalemate")]
        public virtual void MakeMoveShouldNotAllowAMoveIfTheGamestateIsIn_DrawStalemate()
        {
#line 1408
this.MakeMoveShouldNotAllowAMoveIfTheGamestateIsIn("DrawStalemate", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should not allow a move if the gamestate is in: DrawThreeFoldRepetition" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "DrawThreeFoldRepetition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:GameState", "DrawThreeFoldRepetition")]
        public virtual void MakeMoveShouldNotAllowAMoveIfTheGamestateIsIn_DrawThreeFoldRepetition()
        {
#line 1408
this.MakeMoveShouldNotAllowAMoveIfTheGamestateIsIn("DrawThreeFoldRepetition", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should not allow a move if the gamestate is in: DrawFiftyMoveRule")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "DrawFiftyMoveRule")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:GameState", "DrawFiftyMoveRule")]
        public virtual void MakeMoveShouldNotAllowAMoveIfTheGamestateIsIn_DrawFiftyMoveRule()
        {
#line 1408
this.MakeMoveShouldNotAllowAMoveIfTheGamestateIsIn("DrawFiftyMoveRule", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should not allow a move if the gamestate is in: DrawInDeadPosition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "DrawInDeadPosition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:GameState", "DrawInDeadPosition")]
        public virtual void MakeMoveShouldNotAllowAMoveIfTheGamestateIsIn_DrawInDeadPosition()
        {
#line 1408
this.MakeMoveShouldNotAllowAMoveIfTheGamestateIsIn("DrawInDeadPosition", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should not allow a move if the gamestate is in: DrawInsufficientMateria" +
            "l")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "DrawInsufficientMaterial")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:GameState", "DrawInsufficientMaterial")]
        public virtual void MakeMoveShouldNotAllowAMoveIfTheGamestateIsIn_DrawInsufficientMaterial()
        {
#line 1408
this.MakeMoveShouldNotAllowAMoveIfTheGamestateIsIn("DrawInsufficientMaterial", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should not allow a move if the move is illegal")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void MakeMoveShouldNotAllowAMoveIfTheMoveIsIllegal()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make move should not allow a move if the move is illegal", ((string[])(null)));
#line 1428
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table129 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table129.AddRow(new string[] {
                        "BR",
                        "BN",
                        "BB",
                        "BQ",
                        "BK",
                        "BB",
                        "BN",
                        "BR"});
            table129.AddRow(new string[] {
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP"});
            table129.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table129.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table129.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table129.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table129.AddRow(new string[] {
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP"});
            table129.AddRow(new string[] {
                        "WR",
                        "WN",
                        "WB",
                        "WQ",
                        "WK",
                        "WB",
                        "WN",
                        "WR"});
#line 1429
 testRunner.Given("I start a new game in the following state", ((string)(null)), table129, "Given ");
#line 1439
 testRunner.Given("I expect an exception to be thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table130 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table130.AddRow(new string[] {
                        "A4",
                        "F3"});
#line 1440
 testRunner.When("I make the following move", ((string)(null)), table130, "When ");
#line hidden
            TechTalk.SpecFlow.Table table131 = new TechTalk.SpecFlow.Table(new string[] {
                        "ErrorCode",
                        "Message"});
            table131.AddRow(new string[] {
                        "IllegalMove",
                        "The move is not valid because it is not legal."});
#line 1443
 testRunner.Then("I expect the following ChessException to be thrown", ((string)(null)), table131, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should correctly make kingside castle for white")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void MakeMoveShouldCorrectlyMakeKingsideCastleForWhite()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make move should correctly make kingside castle for white", ((string[])(null)));
#line 1447
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table132 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table132.AddRow(new string[] {
                        "BR",
                        "",
                        "",
                        "",
                        "BK",
                        "",
                        "",
                        "BR"});
            table132.AddRow(new string[] {
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP"});
            table132.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table132.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table132.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table132.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table132.AddRow(new string[] {
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP"});
            table132.AddRow(new string[] {
                        "WR",
                        "",
                        "",
                        "",
                        "WK",
                        "",
                        "",
                        "WR"});
#line 1448
 testRunner.Given("I start a new game in the following state", ((string)(null)), table132, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table133 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table133.AddRow(new string[] {
                        "E1",
                        "G1"});
#line 1458
 testRunner.When("I make the following move", ((string)(null)), table133, "When ");
#line hidden
            TechTalk.SpecFlow.Table table134 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table134.AddRow(new string[] {
                        "BR",
                        "",
                        "",
                        "",
                        "BK",
                        "",
                        "",
                        "BR"});
            table134.AddRow(new string[] {
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP"});
            table134.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table134.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table134.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table134.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table134.AddRow(new string[] {
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP"});
            table134.AddRow(new string[] {
                        "WR",
                        "",
                        "",
                        "",
                        "",
                        "WR",
                        "WK",
                        ""});
#line 1461
 testRunner.Then("I expect the current board to contain the following", ((string)(null)), table134, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should correctly make queenside castle for white")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void MakeMoveShouldCorrectlyMakeQueensideCastleForWhite()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make move should correctly make queenside castle for white", ((string[])(null)));
#line 1472
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table135 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table135.AddRow(new string[] {
                        "BR",
                        "",
                        "",
                        "",
                        "BK",
                        "",
                        "",
                        "BR"});
            table135.AddRow(new string[] {
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP"});
            table135.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table135.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table135.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table135.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table135.AddRow(new string[] {
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP"});
            table135.AddRow(new string[] {
                        "WR",
                        "",
                        "",
                        "",
                        "WK",
                        "",
                        "",
                        "WR"});
#line 1473
 testRunner.Given("I start a new game in the following state", ((string)(null)), table135, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table136 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table136.AddRow(new string[] {
                        "E1",
                        "C1"});
#line 1483
 testRunner.When("I make the following move", ((string)(null)), table136, "When ");
#line hidden
            TechTalk.SpecFlow.Table table137 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table137.AddRow(new string[] {
                        "BR",
                        "",
                        "",
                        "",
                        "BK",
                        "",
                        "",
                        "BR"});
            table137.AddRow(new string[] {
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP"});
            table137.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table137.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table137.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table137.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table137.AddRow(new string[] {
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP"});
            table137.AddRow(new string[] {
                        "",
                        "",
                        "WK",
                        "WR",
                        "",
                        "",
                        "",
                        "WR"});
#line 1486
 testRunner.Then("I expect the current board to contain the following", ((string)(null)), table137, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should correctly make kingside castle for black")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void MakeMoveShouldCorrectlyMakeKingsideCastleForBlack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make move should correctly make kingside castle for black", ((string[])(null)));
#line 1497
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table138 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table138.AddRow(new string[] {
                        "BR",
                        "",
                        "",
                        "",
                        "BK",
                        "",
                        "",
                        "BR"});
            table138.AddRow(new string[] {
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP"});
            table138.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table138.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table138.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table138.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table138.AddRow(new string[] {
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP"});
            table138.AddRow(new string[] {
                        "WR",
                        "",
                        "",
                        "",
                        "WK",
                        "",
                        "",
                        "WR"});
#line 1498
 testRunner.Given("I start a new game in the following state", ((string)(null)), table138, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table139 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table139.AddRow(new string[] {
                        "A4",
                        "A4",
                        "Move"});
#line 1508
 testRunner.Given("I have the following move history", ((string)(null)), table139, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table140 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table140.AddRow(new string[] {
                        "E8",
                        "G8"});
#line 1511
 testRunner.When("I make the following move", ((string)(null)), table140, "When ");
#line hidden
            TechTalk.SpecFlow.Table table141 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table141.AddRow(new string[] {
                        "BR",
                        "",
                        "",
                        "",
                        "",
                        "BR",
                        "BK",
                        ""});
            table141.AddRow(new string[] {
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP"});
            table141.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table141.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table141.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table141.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table141.AddRow(new string[] {
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP"});
            table141.AddRow(new string[] {
                        "WR",
                        "",
                        "",
                        "",
                        "WK",
                        "",
                        "",
                        "WR"});
#line 1514
 testRunner.Then("I expect the current board to contain the following", ((string)(null)), table141, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should correctly make queenside castle for black")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void MakeMoveShouldCorrectlyMakeQueensideCastleForBlack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make move should correctly make queenside castle for black", ((string[])(null)));
#line 1525
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table142 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table142.AddRow(new string[] {
                        "BR",
                        "",
                        "",
                        "",
                        "BK",
                        "",
                        "",
                        "BR"});
            table142.AddRow(new string[] {
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP"});
            table142.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table142.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table142.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table142.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table142.AddRow(new string[] {
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP"});
            table142.AddRow(new string[] {
                        "WR",
                        "",
                        "",
                        "",
                        "WK",
                        "",
                        "",
                        "WR"});
#line 1526
 testRunner.Given("I start a new game in the following state", ((string)(null)), table142, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table143 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table143.AddRow(new string[] {
                        "A4",
                        "A4",
                        "Move"});
#line 1536
 testRunner.Given("I have the following move history", ((string)(null)), table143, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table144 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table144.AddRow(new string[] {
                        "E8",
                        "C8"});
#line 1539
 testRunner.When("I make the following move", ((string)(null)), table144, "When ");
#line hidden
            TechTalk.SpecFlow.Table table145 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table145.AddRow(new string[] {
                        "",
                        "",
                        "BK",
                        "BR",
                        "",
                        "",
                        "",
                        "BR"});
            table145.AddRow(new string[] {
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP"});
            table145.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table145.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table145.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table145.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table145.AddRow(new string[] {
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP"});
            table145.AddRow(new string[] {
                        "WR",
                        "",
                        "",
                        "",
                        "WK",
                        "",
                        "",
                        "WR"});
#line 1542
 testRunner.Then("I expect the current board to contain the following", ((string)(null)), table145, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should correctly make northwest au passant move for white")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void MakeMoveShouldCorrectlyMakeNorthwestAuPassantMoveForWhite()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make move should correctly make northwest au passant move for white", ((string[])(null)));
#line 1553
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table146 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table146.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BK",
                        "",
                        "",
                        ""});
            table146.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table146.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table146.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BP",
                        "WP",
                        "BP",
                        ""});
            table146.AddRow(new string[] {
                        "",
                        "",
                        "WP",
                        "BP",
                        "WP",
                        "",
                        "",
                        ""});
            table146.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table146.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table146.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "WK",
                        "",
                        "",
                        ""});
#line 1554
 testRunner.Given("I start a new game in the following state", ((string)(null)), table146, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table147 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table147.AddRow(new string[] {
                        "A4",
                        "A4",
                        "Move"});
            table147.AddRow(new string[] {
                        "E7",
                        "E5",
                        "Move"});
#line 1564
 testRunner.Given("I have the following move history", ((string)(null)), table147, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table148 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table148.AddRow(new string[] {
                        "F5",
                        "E6"});
#line 1568
 testRunner.When("I make the following move", ((string)(null)), table148, "When ");
#line hidden
            TechTalk.SpecFlow.Table table149 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table149.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BK",
                        "",
                        "",
                        ""});
            table149.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table149.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "WP",
                        "",
                        "",
                        ""});
            table149.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BP",
                        ""});
            table149.AddRow(new string[] {
                        "",
                        "",
                        "WP",
                        "BP",
                        "WP",
                        "",
                        "",
                        ""});
            table149.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table149.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table149.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "WK",
                        "",
                        "",
                        ""});
#line 1571
 testRunner.Then("I expect the current board to contain the following", ((string)(null)), table149, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should correctly make northeast au passant move for white")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void MakeMoveShouldCorrectlyMakeNortheastAuPassantMoveForWhite()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make move should correctly make northeast au passant move for white", ((string[])(null)));
#line 1582
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table150 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table150.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BK",
                        "",
                        "",
                        ""});
            table150.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table150.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table150.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BP",
                        "WP",
                        "BP",
                        ""});
            table150.AddRow(new string[] {
                        "",
                        "",
                        "WP",
                        "BP",
                        "WP",
                        "",
                        "",
                        ""});
            table150.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table150.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table150.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "WK",
                        "",
                        "",
                        ""});
#line 1583
 testRunner.Given("I start a new game in the following state", ((string)(null)), table150, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table151 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table151.AddRow(new string[] {
                        "A4",
                        "A4",
                        "Move"});
            table151.AddRow(new string[] {
                        "G7",
                        "G5",
                        "Move"});
#line 1593
 testRunner.Given("I have the following move history", ((string)(null)), table151, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table152 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table152.AddRow(new string[] {
                        "F5",
                        "G6"});
#line 1597
 testRunner.When("I make the following move", ((string)(null)), table152, "When ");
#line hidden
            TechTalk.SpecFlow.Table table153 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table153.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BK",
                        "",
                        "",
                        ""});
            table153.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table153.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WP",
                        ""});
            table153.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BP",
                        "",
                        "",
                        ""});
            table153.AddRow(new string[] {
                        "",
                        "",
                        "WP",
                        "BP",
                        "WP",
                        "",
                        "",
                        ""});
            table153.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table153.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table153.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "WK",
                        "",
                        "",
                        ""});
#line 1600
 testRunner.Then("I expect the current board to contain the following", ((string)(null)), table153, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should correctly make southwest au passant move for black")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void MakeMoveShouldCorrectlyMakeSouthwestAuPassantMoveForBlack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make move should correctly make southwest au passant move for black", ((string[])(null)));
#line 1611
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table154 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table154.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BK",
                        "",
                        "",
                        ""});
            table154.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table154.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table154.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BP",
                        "WP",
                        "BP",
                        ""});
            table154.AddRow(new string[] {
                        "",
                        "",
                        "WP",
                        "BP",
                        "WP",
                        "",
                        "",
                        ""});
            table154.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table154.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table154.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "WK",
                        "",
                        "",
                        ""});
#line 1612
 testRunner.Given("I start a new game in the following state", ((string)(null)), table154, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table155 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table155.AddRow(new string[] {
                        "C2",
                        "C4",
                        "Move"});
#line 1622
 testRunner.Given("I have the following move history", ((string)(null)), table155, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table156 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table156.AddRow(new string[] {
                        "D4",
                        "C3"});
#line 1625
 testRunner.When("I make the following move", ((string)(null)), table156, "When ");
#line hidden
            TechTalk.SpecFlow.Table table157 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table157.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BK",
                        "",
                        "",
                        ""});
            table157.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table157.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table157.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BP",
                        "WP",
                        "BP",
                        ""});
            table157.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "WP",
                        "",
                        "",
                        ""});
            table157.AddRow(new string[] {
                        "",
                        "",
                        "BP",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table157.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table157.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "WK",
                        "",
                        "",
                        ""});
#line 1628
 testRunner.Then("I expect the current board to contain the following", ((string)(null)), table157, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should correctly make southeast au passant move for black")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void MakeMoveShouldCorrectlyMakeSoutheastAuPassantMoveForBlack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make move should correctly make southeast au passant move for black", ((string[])(null)));
#line 1639
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table158 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table158.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BK",
                        "",
                        "",
                        ""});
            table158.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table158.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table158.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BP",
                        "WP",
                        "BP",
                        ""});
            table158.AddRow(new string[] {
                        "",
                        "",
                        "WP",
                        "BP",
                        "WP",
                        "",
                        "",
                        ""});
            table158.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table158.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table158.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "WK",
                        "",
                        "",
                        ""});
#line 1640
 testRunner.Given("I start a new game in the following state", ((string)(null)), table158, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table159 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table159.AddRow(new string[] {
                        "E2",
                        "E4",
                        "Move"});
#line 1650
 testRunner.Given("I have the following move history", ((string)(null)), table159, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table160 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table160.AddRow(new string[] {
                        "D4",
                        "E3"});
#line 1653
 testRunner.When("I make the following move", ((string)(null)), table160, "When ");
#line hidden
            TechTalk.SpecFlow.Table table161 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table161.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BK",
                        "",
                        "",
                        ""});
            table161.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table161.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table161.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BP",
                        "WP",
                        "BP",
                        ""});
            table161.AddRow(new string[] {
                        "",
                        "",
                        "WP",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table161.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BP",
                        "",
                        "",
                        ""});
            table161.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table161.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "WK",
                        "",
                        "",
                        ""});
#line 1656
 testRunner.Then("I expect the current board to contain the following", ((string)(null)), table161, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should record move history correctly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void MakeMoveShouldRecordMoveHistoryCorrectly()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make move should record move history correctly", ((string[])(null)));
#line 1667
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line 1668
 testRunner.Given("I start a new game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table162 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table162.AddRow(new string[] {
                        "E2",
                        "E4"});
            table162.AddRow(new string[] {
                        "E7",
                        "E5"});
            table162.AddRow(new string[] {
                        "B1",
                        "C3"});
            table162.AddRow(new string[] {
                        "B8",
                        "C6"});
            table162.AddRow(new string[] {
                        "D2",
                        "D4"});
            table162.AddRow(new string[] {
                        "E5",
                        "D4"});
            table162.AddRow(new string[] {
                        "D1",
                        "D4"});
            table162.AddRow(new string[] {
                        "C6",
                        "D4"});
            table162.AddRow(new string[] {
                        "G1",
                        "F3"});
            table162.AddRow(new string[] {
                        "D8",
                        "G5"});
            table162.AddRow(new string[] {
                        "F3",
                        "D4"});
            table162.AddRow(new string[] {
                        "G5",
                        "C1"});
            table162.AddRow(new string[] {
                        "A1",
                        "C1"});
#line 1669
 testRunner.When("I make the following moves", ((string)(null)), table162, "When ");
#line hidden
            TechTalk.SpecFlow.Table table163 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table163.AddRow(new string[] {
                        "E2",
                        "E4",
                        "Move"});
            table163.AddRow(new string[] {
                        "E7",
                        "E5",
                        "Move"});
            table163.AddRow(new string[] {
                        "B1",
                        "C3",
                        "Move"});
            table163.AddRow(new string[] {
                        "B8",
                        "C6",
                        "Move"});
            table163.AddRow(new string[] {
                        "D2",
                        "D4",
                        "Move"});
            table163.AddRow(new string[] {
                        "E5",
                        "D4",
                        "CapturePawn"});
            table163.AddRow(new string[] {
                        "D1",
                        "D4",
                        "CapturePawn"});
            table163.AddRow(new string[] {
                        "C6",
                        "D4",
                        "CaptureQueen"});
            table163.AddRow(new string[] {
                        "G1",
                        "F3",
                        "Move"});
            table163.AddRow(new string[] {
                        "D8",
                        "G5",
                        "Move"});
            table163.AddRow(new string[] {
                        "F3",
                        "D4",
                        "CaptureKnight"});
            table163.AddRow(new string[] {
                        "G5",
                        "C1",
                        "CaptureBishop"});
            table163.AddRow(new string[] {
                        "A1",
                        "C1",
                        "CaptureQueen"});
#line 1684
 testRunner.Then("I expect the following move history", ((string)(null)), table163, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table164 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table164.AddRow(new string[] {
                        "BR",
                        "",
                        "BB",
                        "",
                        "BK",
                        "BB",
                        "BN",
                        "BR"});
            table164.AddRow(new string[] {
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "",
                        "BP",
                        "BP",
                        "BP"});
            table164.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table164.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table164.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "WN",
                        "WP",
                        "",
                        "",
                        ""});
            table164.AddRow(new string[] {
                        "",
                        "",
                        "WN",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table164.AddRow(new string[] {
                        "WP",
                        "WP",
                        "WP",
                        "",
                        "",
                        "WP",
                        "WP",
                        "WP"});
            table164.AddRow(new string[] {
                        "",
                        "",
                        "WR",
                        "",
                        "WK",
                        "WB",
                        "",
                        "WR"});
#line 1699
 testRunner.Then("I expect the current board to contain the following", ((string)(null)), table164, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should calculate white win")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void MakeMoveShouldCalculateWhiteWin()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make move should calculate white win", ((string[])(null)));
#line 1710
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table165 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table165.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BK"});
            table165.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table165.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table165.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table165.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table165.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table165.AddRow(new string[] {
                        "WR",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table165.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "WK",
                        "",
                        "WR",
                        ""});
#line 1711
 testRunner.Given("I start a new game in the following state", ((string)(null)), table165, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table166 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table166.AddRow(new string[] {
                        "A2",
                        "H2"});
#line 1721
 testRunner.When("I make the following move", ((string)(null)), table166, "When ");
#line 1724
 testRunner.Then("I expect the gamestate to be \'WhiteWin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1725
 testRunner.Then("I expect the game to be over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should calculate black win")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void MakeMoveShouldCalculateBlackWin()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make move should calculate black win", ((string[])(null)));
#line 1727
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table167 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table167.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
            table167.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table167.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table167.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table167.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table167.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table167.AddRow(new string[] {
                        "BR",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table167.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BK",
                        "",
                        "BR",
                        ""});
#line 1728
 testRunner.Given("I start a new game in the following state", ((string)(null)), table167, "Given ");
#line 1738
 testRunner.Given("Its blacks turn", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table168 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table168.AddRow(new string[] {
                        "A2",
                        "H2"});
#line 1739
 testRunner.When("I make the following move", ((string)(null)), table168, "When ");
#line 1742
 testRunner.Then("I expect the gamestate to be \'BlackWin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1743
 testRunner.Then("I expect the game to be over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should calculate stalemate draw for white")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void MakeMoveShouldCalculateStalemateDrawForWhite()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make move should calculate stalemate draw for white", ((string[])(null)));
#line 1745
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table169 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table169.AddRow(new string[] {
                        "BK",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table169.AddRow(new string[] {
                        "BP",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table169.AddRow(new string[] {
                        "WP",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table169.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table169.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table169.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table169.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table169.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WQ",
                        "WK"});
#line 1746
 testRunner.Given("I start a new game in the following state", ((string)(null)), table169, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table170 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table170.AddRow(new string[] {
                        "G1",
                        "B1"});
#line 1756
 testRunner.When("I make the following move", ((string)(null)), table170, "When ");
#line 1759
 testRunner.Then("I expect the gamestate to be \'DrawStalemate\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1760
 testRunner.Then("I expect the game to be over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should calculate stalemate draw for black")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void MakeMoveShouldCalculateStalemateDrawForBlack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make move should calculate stalemate draw for black", ((string[])(null)));
#line 1762
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table171 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table171.AddRow(new string[] {
                        "BK",
                        "BQ",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table171.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table171.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table171.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table171.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table171.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BP"});
            table171.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WP"});
            table171.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 1763
 testRunner.Given("I start a new game in the following state", ((string)(null)), table171, "Given ");
#line 1773
 testRunner.Given("Its blacks turn", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table172 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table172.AddRow(new string[] {
                        "B8",
                        "G8"});
#line 1774
 testRunner.When("I make the following move", ((string)(null)), table172, "When ");
#line 1777
 testRunner.Then("I expect the gamestate to be \'DrawStalemate\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1778
 testRunner.Then("I expect the game to be over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should calculate insufficient material draw for white (two kings)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void MakeMoveShouldCalculateInsufficientMaterialDrawForWhiteTwoKings()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make move should calculate insufficient material draw for white (two kings)", ((string[])(null)));
#line 1780
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table173 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table173.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BK"});
            table173.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table173.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table173.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table173.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table173.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table173.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BQ"});
            table173.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 1781
 testRunner.Given("I start a new game in the following state", ((string)(null)), table173, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table174 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table174.AddRow(new string[] {
                        "H1",
                        "H2"});
#line 1791
 testRunner.When("I make the following move", ((string)(null)), table174, "When ");
#line 1794
 testRunner.Then("I expect the gamestate to be \'DrawInsufficientMaterial\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1795
 testRunner.Then("I expect the game to be over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should calculate insufficient material draw for black (two kings)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void MakeMoveShouldCalculateInsufficientMaterialDrawForBlackTwoKings()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make move should calculate insufficient material draw for black (two kings)", ((string[])(null)));
#line 1797
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table175 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table175.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BK"});
            table175.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WQ"});
            table175.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table175.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table175.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table175.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table175.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table175.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 1798
 testRunner.Given("I start a new game in the following state", ((string)(null)), table175, "Given ");
#line 1808
 testRunner.Given("Its blacks turn", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table176 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table176.AddRow(new string[] {
                        "H8",
                        "H7"});
#line 1809
 testRunner.When("I make the following move", ((string)(null)), table176, "When ");
#line 1812
 testRunner.Then("I expect the gamestate to be \'DrawInsufficientMaterial\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1813
 testRunner.Then("I expect the game to be over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should calculate insufficient material draw for white (one knight two k" +
            "ings)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void MakeMoveShouldCalculateInsufficientMaterialDrawForWhiteOneKnightTwoKings()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make move should calculate insufficient material draw for white (one knight two k" +
                    "ings)", ((string[])(null)));
#line 1815
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table177 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table177.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BK"});
            table177.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table177.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table177.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table177.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table177.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BN"});
            table177.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BN"});
            table177.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 1816
 testRunner.Given("I start a new game in the following state", ((string)(null)), table177, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table178 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table178.AddRow(new string[] {
                        "H1",
                        "H2"});
#line 1826
 testRunner.When("I make the following move", ((string)(null)), table178, "When ");
#line 1829
 testRunner.Then("I expect the gamestate to be \'DrawInsufficientMaterial\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1830
 testRunner.Then("I expect the game to be over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should calculate insufficient material draw for black (one knight two k" +
            "ings)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void MakeMoveShouldCalculateInsufficientMaterialDrawForBlackOneKnightTwoKings()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make move should calculate insufficient material draw for black (one knight two k" +
                    "ings)", ((string[])(null)));
#line 1832
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table179 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table179.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BK"});
            table179.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WN"});
            table179.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WN"});
            table179.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table179.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table179.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table179.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table179.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 1833
 testRunner.Given("I start a new game in the following state", ((string)(null)), table179, "Given ");
#line 1843
 testRunner.Given("Its blacks turn", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table180 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table180.AddRow(new string[] {
                        "H8",
                        "H7"});
#line 1844
 testRunner.When("I make the following move", ((string)(null)), table180, "When ");
#line 1847
 testRunner.Then("I expect the gamestate to be \'DrawInsufficientMaterial\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1848
 testRunner.Then("I expect the game to be over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should calculate insufficient material draw for white (one bishop two k" +
            "ings)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void MakeMoveShouldCalculateInsufficientMaterialDrawForWhiteOneBishopTwoKings()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make move should calculate insufficient material draw for white (one bishop two k" +
                    "ings)", ((string[])(null)));
#line 1850
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table181 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table181.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BK"});
            table181.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table181.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table181.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table181.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table181.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BB"});
            table181.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BB"});
            table181.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 1851
 testRunner.Given("I start a new game in the following state", ((string)(null)), table181, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table182 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table182.AddRow(new string[] {
                        "H1",
                        "H2"});
#line 1861
 testRunner.When("I make the following move", ((string)(null)), table182, "When ");
#line 1864
 testRunner.Then("I expect the gamestate to be \'DrawInsufficientMaterial\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1865
 testRunner.Then("I expect the game to be over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should calculate insufficient material draw for black (one bishop two k" +
            "ings)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void MakeMoveShouldCalculateInsufficientMaterialDrawForBlackOneBishopTwoKings()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make move should calculate insufficient material draw for black (one bishop two k" +
                    "ings)", ((string[])(null)));
#line 1867
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table183 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table183.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BK"});
            table183.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WB"});
            table183.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WB"});
            table183.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table183.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table183.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table183.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table183.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 1868
 testRunner.Given("I start a new game in the following state", ((string)(null)), table183, "Given ");
#line 1878
 testRunner.Given("Its blacks turn", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table184 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table184.AddRow(new string[] {
                        "H8",
                        "H7"});
#line 1879
 testRunner.When("I make the following move", ((string)(null)), table184, "When ");
#line 1882
 testRunner.Then("I expect the gamestate to be \'DrawInsufficientMaterial\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1883
 testRunner.Then("I expect the game to be over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should calculate insufficient material draw for white (many bishops on " +
            "dark square two kings)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void MakeMoveShouldCalculateInsufficientMaterialDrawForWhiteManyBishopsOnDarkSquareTwoKings()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make move should calculate insufficient material draw for white (many bishops on " +
                    "dark square two kings)", ((string[])(null)));
#line 1885
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table185 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table185.AddRow(new string[] {
                        "",
                        "BB",
                        "",
                        "BB",
                        "",
                        "BB",
                        "",
                        "BB"});
            table185.AddRow(new string[] {
                        "BB",
                        "",
                        "BB",
                        "",
                        "BB",
                        "",
                        "BB",
                        "BK"});
            table185.AddRow(new string[] {
                        "",
                        "BB",
                        "",
                        "BB",
                        "",
                        "BB",
                        "",
                        "BB"});
            table185.AddRow(new string[] {
                        "BB",
                        "",
                        "BB",
                        "",
                        "BB",
                        "",
                        "BB",
                        ""});
            table185.AddRow(new string[] {
                        "",
                        "BB",
                        "",
                        "BB",
                        "",
                        "BB",
                        "",
                        "BB"});
            table185.AddRow(new string[] {
                        "BB",
                        "",
                        "BB",
                        "",
                        "BB",
                        "",
                        "BB",
                        ""});
            table185.AddRow(new string[] {
                        "",
                        "BB",
                        "",
                        "BB",
                        "",
                        "BB",
                        "BB",
                        "BB"});
            table185.AddRow(new string[] {
                        "BB",
                        "",
                        "BB",
                        "",
                        "BB",
                        "",
                        "BB",
                        "WK"});
#line 1886
 testRunner.Given("I start a new game in the following state", ((string)(null)), table185, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table186 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table186.AddRow(new string[] {
                        "H1",
                        "G2"});
#line 1896
 testRunner.When("I make the following move", ((string)(null)), table186, "When ");
#line 1899
 testRunner.Then("I expect the gamestate to be \'DrawInsufficientMaterial\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1900
 testRunner.Then("I expect the game to be over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should calculate insufficient material draw for white (many bishops on " +
            "light square two kings)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void MakeMoveShouldCalculateInsufficientMaterialDrawForWhiteManyBishopsOnLightSquareTwoKings()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make move should calculate insufficient material draw for white (many bishops on " +
                    "light square two kings)", ((string[])(null)));
#line 1902
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table187 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table187.AddRow(new string[] {
                        "BB",
                        "",
                        "BB",
                        "",
                        "BB",
                        "",
                        "BB",
                        "BK"});
            table187.AddRow(new string[] {
                        "",
                        "BB",
                        "",
                        "BB",
                        "",
                        "BB",
                        "",
                        "BB"});
            table187.AddRow(new string[] {
                        "BB",
                        "",
                        "BB",
                        "",
                        "BB",
                        "",
                        "BB",
                        ""});
            table187.AddRow(new string[] {
                        "",
                        "BB",
                        "",
                        "BB",
                        "",
                        "BB",
                        "",
                        "BB"});
            table187.AddRow(new string[] {
                        "BB",
                        "",
                        "BB",
                        "",
                        "BB",
                        "",
                        "BB",
                        ""});
            table187.AddRow(new string[] {
                        "",
                        "BB",
                        "",
                        "BB",
                        "",
                        "BB",
                        "",
                        "BB"});
            table187.AddRow(new string[] {
                        "BB",
                        "",
                        "BB",
                        "",
                        "BB",
                        "",
                        "BB",
                        "WK"});
            table187.AddRow(new string[] {
                        "",
                        "BB",
                        "",
                        "BB",
                        "",
                        "BB",
                        "BB",
                        "BB"});
#line 1903
 testRunner.Given("I start a new game in the following state", ((string)(null)), table187, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table188 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table188.AddRow(new string[] {
                        "H2",
                        "G1"});
#line 1913
 testRunner.When("I make the following move", ((string)(null)), table188, "When ");
#line 1916
 testRunner.Then("I expect the gamestate to be \'DrawInsufficientMaterial\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1917
 testRunner.Then("I expect the game to be over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should calculate insufficient material draw for black (many bishops on " +
            "dark square two kings)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void MakeMoveShouldCalculateInsufficientMaterialDrawForBlackManyBishopsOnDarkSquareTwoKings()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make move should calculate insufficient material draw for black (many bishops on " +
                    "dark square two kings)", ((string[])(null)));
#line 1919
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table189 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table189.AddRow(new string[] {
                        "",
                        "WB",
                        "",
                        "WB",
                        "",
                        "WB",
                        "",
                        "WB"});
            table189.AddRow(new string[] {
                        "WB",
                        "",
                        "WB",
                        "",
                        "WB",
                        "",
                        "WB",
                        "WK"});
            table189.AddRow(new string[] {
                        "",
                        "WB",
                        "",
                        "WB",
                        "",
                        "WB",
                        "",
                        "WB"});
            table189.AddRow(new string[] {
                        "WB",
                        "",
                        "WB",
                        "",
                        "WB",
                        "",
                        "WB",
                        ""});
            table189.AddRow(new string[] {
                        "",
                        "WB",
                        "",
                        "WB",
                        "",
                        "WB",
                        "",
                        "WB"});
            table189.AddRow(new string[] {
                        "WB",
                        "",
                        "WB",
                        "",
                        "WB",
                        "",
                        "WB",
                        ""});
            table189.AddRow(new string[] {
                        "",
                        "WB",
                        "",
                        "WB",
                        "",
                        "WB",
                        "WB",
                        "WB"});
            table189.AddRow(new string[] {
                        "WB",
                        "",
                        "WB",
                        "",
                        "WB",
                        "",
                        "WB",
                        "BK"});
#line 1920
 testRunner.Given("I start a new game in the following state", ((string)(null)), table189, "Given ");
#line 1930
 testRunner.Given("Its blacks turn", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table190 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table190.AddRow(new string[] {
                        "H1",
                        "G2"});
#line 1931
 testRunner.When("I make the following move", ((string)(null)), table190, "When ");
#line 1934
 testRunner.Then("I expect the gamestate to be \'DrawInsufficientMaterial\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1935
 testRunner.Then("I expect the game to be over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should calculate insufficient material draw for black (many bishops on " +
            "light square two kings)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void MakeMoveShouldCalculateInsufficientMaterialDrawForBlackManyBishopsOnLightSquareTwoKings()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make move should calculate insufficient material draw for black (many bishops on " +
                    "light square two kings)", ((string[])(null)));
#line 1937
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table191 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table191.AddRow(new string[] {
                        "WB",
                        "",
                        "WB",
                        "",
                        "WB",
                        "",
                        "WB",
                        "WK"});
            table191.AddRow(new string[] {
                        "",
                        "WB",
                        "",
                        "WB",
                        "",
                        "WB",
                        "",
                        "WB"});
            table191.AddRow(new string[] {
                        "WB",
                        "",
                        "WB",
                        "",
                        "WB",
                        "",
                        "WB",
                        ""});
            table191.AddRow(new string[] {
                        "",
                        "WB",
                        "",
                        "WB",
                        "",
                        "WB",
                        "",
                        "WB"});
            table191.AddRow(new string[] {
                        "WB",
                        "",
                        "WB",
                        "",
                        "WB",
                        "",
                        "WB",
                        ""});
            table191.AddRow(new string[] {
                        "",
                        "WB",
                        "",
                        "WB",
                        "",
                        "WB",
                        "",
                        "WB"});
            table191.AddRow(new string[] {
                        "WB",
                        "",
                        "WB",
                        "",
                        "WB",
                        "",
                        "WB",
                        "BK"});
            table191.AddRow(new string[] {
                        "",
                        "WB",
                        "",
                        "WB",
                        "",
                        "WB",
                        "WB",
                        "WB"});
#line 1938
 testRunner.Given("I start a new game in the following state", ((string)(null)), table191, "Given ");
#line 1948
 testRunner.Given("Its blacks turn", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table192 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table192.AddRow(new string[] {
                        "H2",
                        "G1"});
#line 1949
 testRunner.When("I make the following move", ((string)(null)), table192, "When ");
#line 1952
 testRunner.Then("I expect the gamestate to be \'DrawInsufficientMaterial\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1953
 testRunner.Then("I expect the game to be over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Undo last move should throw exception if no moves have been made")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void UndoLastMoveShouldThrowExceptionIfNoMovesHaveBeenMade()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Undo last move should throw exception if no moves have been made", ((string[])(null)));
#line 1958
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table193 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table193.AddRow(new string[] {
                        "BR",
                        "BN",
                        "BB",
                        "BQ",
                        "BK",
                        "BB",
                        "BN",
                        "BR"});
            table193.AddRow(new string[] {
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP"});
            table193.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table193.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table193.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table193.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table193.AddRow(new string[] {
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP"});
            table193.AddRow(new string[] {
                        "WR",
                        "WN",
                        "WB",
                        "WQ",
                        "WK",
                        "WB",
                        "WN",
                        "WR"});
#line 1959
 testRunner.Given("I start a new game in the following state", ((string)(null)), table193, "Given ");
#line 1969
 testRunner.Given("I expect an exception to be thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1970
 testRunner.When("I undo the last move", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table194 = new TechTalk.SpecFlow.Table(new string[] {
                        "ErrorCode",
                        "Message"});
            table194.AddRow(new string[] {
                        "UndoMoveIllegal",
                        "Unable to undo last move because no moves have been made"});
#line 1971
 testRunner.Then("I expect the following ChessException to be thrown", ((string)(null)), table194, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Undo last move should undo a simple move for white")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void UndoLastMoveShouldUndoASimpleMoveForWhite()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Undo last move should undo a simple move for white", ((string[])(null)));
#line 1975
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table195 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table195.AddRow(new string[] {
                        "BR",
                        "BN",
                        "BB",
                        "BQ",
                        "BK",
                        "BB",
                        "BN",
                        "BR"});
            table195.AddRow(new string[] {
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP"});
            table195.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table195.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table195.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "WP",
                        "",
                        "",
                        ""});
            table195.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table195.AddRow(new string[] {
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "",
                        "WP",
                        "WP",
                        "WP"});
            table195.AddRow(new string[] {
                        "WR",
                        "WN",
                        "WB",
                        "WQ",
                        "WK",
                        "WB",
                        "WN",
                        "WR"});
#line 1976
 testRunner.Given("I start a new game in the following state", ((string)(null)), table195, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table196 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table196.AddRow(new string[] {
                        "E2",
                        "E4",
                        "Move"});
#line 1986
 testRunner.Given("I have the following move history", ((string)(null)), table196, "Given ");
#line 1989
 testRunner.When("I undo the last move", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1990
 testRunner.Then("I expect the game to not be over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1991
 testRunner.Then("I expect the gamestate to be \'InPlay\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1992
 testRunner.Then("I expect no moves to have been made", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1993
 testRunner.Then("I expect the current player is \'White\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table197 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table197.AddRow(new string[] {
                        "BR",
                        "BN",
                        "BB",
                        "BQ",
                        "BK",
                        "BB",
                        "BN",
                        "BR"});
            table197.AddRow(new string[] {
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP"});
            table197.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table197.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table197.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table197.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table197.AddRow(new string[] {
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP"});
            table197.AddRow(new string[] {
                        "WR",
                        "WN",
                        "WB",
                        "WQ",
                        "WK",
                        "WB",
                        "WN",
                        "WR"});
#line 1994
 testRunner.Then("I expect the current board to contain the following", ((string)(null)), table197, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Undo last move should undo a simple move for black")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void UndoLastMoveShouldUndoASimpleMoveForBlack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Undo last move should undo a simple move for black", ((string[])(null)));
#line 2005
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table198 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table198.AddRow(new string[] {
                        "BR",
                        "BN",
                        "BB",
                        "BQ",
                        "BK",
                        "BB",
                        "BN",
                        "BR"});
            table198.AddRow(new string[] {
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "",
                        "BP",
                        "BP",
                        "BP"});
            table198.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table198.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BP",
                        "",
                        "",
                        ""});
            table198.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "WP",
                        "",
                        "",
                        ""});
            table198.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table198.AddRow(new string[] {
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "",
                        "WP",
                        "WP",
                        "WP"});
            table198.AddRow(new string[] {
                        "WR",
                        "WN",
                        "WB",
                        "WQ",
                        "WK",
                        "WB",
                        "WN",
                        "WR"});
#line 2006
 testRunner.Given("I start a new game in the following state", ((string)(null)), table198, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table199 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table199.AddRow(new string[] {
                        "E2",
                        "E4",
                        "Move"});
            table199.AddRow(new string[] {
                        "E7",
                        "E5",
                        "Move"});
#line 2016
 testRunner.Given("I have the following move history", ((string)(null)), table199, "Given ");
#line 2020
 testRunner.When("I undo the last move", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2021
 testRunner.Then("I expect the game to not be over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2022
 testRunner.Then("I expect the gamestate to be \'InPlay\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2023
 testRunner.Then("I expect the current player is \'Black\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table200 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table200.AddRow(new string[] {
                        "E2",
                        "E4",
                        "Move"});
#line 2024
 testRunner.Then("I expect the following move history", ((string)(null)), table200, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table201 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table201.AddRow(new string[] {
                        "BR",
                        "BN",
                        "BB",
                        "BQ",
                        "BK",
                        "BB",
                        "BN",
                        "BR"});
            table201.AddRow(new string[] {
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP"});
            table201.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table201.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table201.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "WP",
                        "",
                        "",
                        ""});
            table201.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table201.AddRow(new string[] {
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "",
                        "WP",
                        "WP",
                        "WP"});
            table201.AddRow(new string[] {
                        "WR",
                        "WN",
                        "WB",
                        "WQ",
                        "WK",
                        "WB",
                        "WN",
                        "WR"});
#line 2027
 testRunner.Then("I expect the current board to contain the following", ((string)(null)), table201, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void UndoLastMoveShouldUndoACaptureMoveForWhiteCaptureOfBlack(string testName, string type, string h2, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Undo last move should undo a capture move for white capture of black", exampleTags);
#line 2038
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table202 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table202.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BK"});
            table202.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BP"});
            table202.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table202.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table202.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table202.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table202.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
            table202.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 2039
 testRunner.Given("I start a new game in the following state", ((string)(null)), table202, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table203 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table203.AddRow(new string[] {
                        "H1",
                        "H2",
                        string.Format("{0}", type)});
#line 2049
 testRunner.Given("I have the following move history", ((string)(null)), table203, "Given ");
#line 2052
 testRunner.When("I undo the last move", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2053
 testRunner.Then("I expect the game to not be over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2054
 testRunner.Then("I expect the gamestate to be \'InPlay\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2055
 testRunner.Then("I expect the current player is \'White\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table204 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table204.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BK"});
            table204.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BP"});
            table204.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table204.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table204.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table204.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table204.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        string.Format("{0}", h2)});
            table204.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 2056
 testRunner.Then("I expect the current board to contain the following", ((string)(null)), table204, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Undo last move should undo a capture move for white capture of black: pawn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "pawn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "pawn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type", "CapturePawn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:H2", "BP")]
        public virtual void UndoLastMoveShouldUndoACaptureMoveForWhiteCaptureOfBlack_Pawn()
        {
#line 2038
this.UndoLastMoveShouldUndoACaptureMoveForWhiteCaptureOfBlack("pawn", "CapturePawn", "BP", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Undo last move should undo a capture move for white capture of black: knight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "knight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "knight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type", "CaptureKnight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:H2", "BN")]
        public virtual void UndoLastMoveShouldUndoACaptureMoveForWhiteCaptureOfBlack_Knight()
        {
#line 2038
this.UndoLastMoveShouldUndoACaptureMoveForWhiteCaptureOfBlack("knight", "CaptureKnight", "BN", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Undo last move should undo a capture move for white capture of black: bishop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "bishop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "bishop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type", "CaptureBishop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:H2", "BB")]
        public virtual void UndoLastMoveShouldUndoACaptureMoveForWhiteCaptureOfBlack_Bishop()
        {
#line 2038
this.UndoLastMoveShouldUndoACaptureMoveForWhiteCaptureOfBlack("bishop", "CaptureBishop", "BB", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Undo last move should undo a capture move for white capture of black: rook")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "rook")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "rook")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type", "CaptureRook")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:H2", "BR")]
        public virtual void UndoLastMoveShouldUndoACaptureMoveForWhiteCaptureOfBlack_Rook()
        {
#line 2038
this.UndoLastMoveShouldUndoACaptureMoveForWhiteCaptureOfBlack("rook", "CaptureRook", "BR", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Undo last move should undo a capture move for white capture of black: queen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "queen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "queen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type", "CaptureQueen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:H2", "BQ")]
        public virtual void UndoLastMoveShouldUndoACaptureMoveForWhiteCaptureOfBlack_Queen()
        {
#line 2038
this.UndoLastMoveShouldUndoACaptureMoveForWhiteCaptureOfBlack("queen", "CaptureQueen", "BQ", ((string[])(null)));
#line hidden
        }
        
        public virtual void UndoLastMoveShouldUndoACaptureMoveForBlackCaptureOfWhite(string testName, string type, string h7, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Undo last move should undo a capture move for black capture of white", exampleTags);
#line 2074
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table205 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table205.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table205.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BK"});
            table205.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table205.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table205.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table205.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table205.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WP"});
            table205.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 2075
 testRunner.Given("I start a new game in the following state", ((string)(null)), table205, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table206 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table206.AddRow(new string[] {
                        "A1",
                        "A1",
                        "Move"});
            table206.AddRow(new string[] {
                        "H8",
                        "H7",
                        string.Format("{0}", type)});
#line 2085
 testRunner.Given("I have the following move history", ((string)(null)), table206, "Given ");
#line 2089
 testRunner.When("I undo the last move", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2090
 testRunner.Then("I expect the game to not be over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2091
 testRunner.Then("I expect the gamestate to be \'InPlay\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2092
 testRunner.Then("I expect the current player is \'Black\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table207 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table207.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BK"});
            table207.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        string.Format("{0}", h7)});
            table207.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table207.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table207.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table207.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table207.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WP"});
            table207.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 2093
 testRunner.Then("I expect the current board to contain the following", ((string)(null)), table207, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Undo last move should undo a capture move for black capture of white: pawn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "pawn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "pawn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type", "CapturePawn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:H7", "WP")]
        public virtual void UndoLastMoveShouldUndoACaptureMoveForBlackCaptureOfWhite_Pawn()
        {
#line 2074
this.UndoLastMoveShouldUndoACaptureMoveForBlackCaptureOfWhite("pawn", "CapturePawn", "WP", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Undo last move should undo a capture move for black capture of white: knight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "knight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "knight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type", "CaptureKnight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:H7", "WN")]
        public virtual void UndoLastMoveShouldUndoACaptureMoveForBlackCaptureOfWhite_Knight()
        {
#line 2074
this.UndoLastMoveShouldUndoACaptureMoveForBlackCaptureOfWhite("knight", "CaptureKnight", "WN", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Undo last move should undo a capture move for black capture of white: bishop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "bishop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "bishop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type", "CaptureBishop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:H7", "WB")]
        public virtual void UndoLastMoveShouldUndoACaptureMoveForBlackCaptureOfWhite_Bishop()
        {
#line 2074
this.UndoLastMoveShouldUndoACaptureMoveForBlackCaptureOfWhite("bishop", "CaptureBishop", "WB", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Undo last move should undo a capture move for black capture of white: rook")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "rook")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "rook")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type", "CaptureRook")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:H7", "WR")]
        public virtual void UndoLastMoveShouldUndoACaptureMoveForBlackCaptureOfWhite_Rook()
        {
#line 2074
this.UndoLastMoveShouldUndoACaptureMoveForBlackCaptureOfWhite("rook", "CaptureRook", "WR", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Undo last move should undo a capture move for black capture of white: queen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "queen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "queen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type", "CaptureQueen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:H7", "WQ")]
        public virtual void UndoLastMoveShouldUndoACaptureMoveForBlackCaptureOfWhite_Queen()
        {
#line 2074
this.UndoLastMoveShouldUndoACaptureMoveForBlackCaptureOfWhite("queen", "CaptureQueen", "WQ", ((string[])(null)));
#line hidden
        }
        
        public virtual void UndoLastMoveShouldUndoAPawnPromotionMoveForWhite(string testName, string type, string a8, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Undo last move should undo a pawn promotion move for white", exampleTags);
#line 2111
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table208 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table208.AddRow(new string[] {
                        string.Format("{0}", a8),
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BK"});
            table208.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table208.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table208.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table208.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table208.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table208.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table208.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 2112
 testRunner.Given("I start a new game in the following state", ((string)(null)), table208, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table209 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table209.AddRow(new string[] {
                        "A7",
                        "A8",
                        string.Format("{0}", type)});
#line 2122
 testRunner.Given("I have the following move history", ((string)(null)), table209, "Given ");
#line 2125
 testRunner.When("I undo the last move", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2126
 testRunner.Then("I expect the game to not be over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2127
 testRunner.Then("I expect the gamestate to be \'InPlay\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2128
 testRunner.Then("I expect the current player is \'White\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table210 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table210.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BK"});
            table210.AddRow(new string[] {
                        "WP",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table210.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table210.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table210.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table210.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table210.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table210.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 2129
 testRunner.Then("I expect the current board to contain the following", ((string)(null)), table210, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Undo last move should undo a pawn promotion move for white: knight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "knight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "knight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type", "PawnPromotionKnight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:A8", "WN")]
        public virtual void UndoLastMoveShouldUndoAPawnPromotionMoveForWhite_Knight()
        {
#line 2111
this.UndoLastMoveShouldUndoAPawnPromotionMoveForWhite("knight", "PawnPromotionKnight", "WN", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Undo last move should undo a pawn promotion move for white: bishop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "bishop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "bishop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type", "PawnPromotionBishop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:A8", "WB")]
        public virtual void UndoLastMoveShouldUndoAPawnPromotionMoveForWhite_Bishop()
        {
#line 2111
this.UndoLastMoveShouldUndoAPawnPromotionMoveForWhite("bishop", "PawnPromotionBishop", "WB", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Undo last move should undo a pawn promotion move for white: rook")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "rook")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "rook")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type", "PawnPromotionRook")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:A8", "WR")]
        public virtual void UndoLastMoveShouldUndoAPawnPromotionMoveForWhite_Rook()
        {
#line 2111
this.UndoLastMoveShouldUndoAPawnPromotionMoveForWhite("rook", "PawnPromotionRook", "WR", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Undo last move should undo a pawn promotion move for white: queen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "queen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "queen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type", "PawnPromotionQueen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:A8", "WQ")]
        public virtual void UndoLastMoveShouldUndoAPawnPromotionMoveForWhite_Queen()
        {
#line 2111
this.UndoLastMoveShouldUndoAPawnPromotionMoveForWhite("queen", "PawnPromotionQueen", "WQ", ((string[])(null)));
#line hidden
        }
        
        public virtual void UndoLastMoveShouldUndoAPawnPromotionMoveForBlack(string testName, string type, string a1, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Undo last move should undo a pawn promotion move for black", exampleTags);
#line 2146
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table211 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table211.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BK"});
            table211.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table211.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table211.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table211.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table211.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table211.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table211.AddRow(new string[] {
                        string.Format("{0}", a1),
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 2147
 testRunner.Given("I start a new game in the following state", ((string)(null)), table211, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table212 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table212.AddRow(new string[] {
                        "A4",
                        "A4",
                        "Move"});
            table212.AddRow(new string[] {
                        "A2",
                        "A1",
                        string.Format("{0}", type)});
#line 2157
 testRunner.Given("I have the following move history", ((string)(null)), table212, "Given ");
#line 2161
 testRunner.When("I undo the last move", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2162
 testRunner.Then("I expect the game to not be over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2163
 testRunner.Then("I expect the gamestate to be \'InPlay\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2164
 testRunner.Then("I expect the current player is \'Black\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table213 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table213.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BK"});
            table213.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table213.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table213.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table213.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table213.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table213.AddRow(new string[] {
                        "BP",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table213.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 2165
 testRunner.Then("I expect the current board to contain the following", ((string)(null)), table213, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Undo last move should undo a pawn promotion move for black: knight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "knight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "knight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type", "PawnPromotionKnight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:A1", "BN")]
        public virtual void UndoLastMoveShouldUndoAPawnPromotionMoveForBlack_Knight()
        {
#line 2146
this.UndoLastMoveShouldUndoAPawnPromotionMoveForBlack("knight", "PawnPromotionKnight", "BN", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Undo last move should undo a pawn promotion move for black: bishop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "bishop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "bishop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type", "PawnPromotionBishop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:A1", "BB")]
        public virtual void UndoLastMoveShouldUndoAPawnPromotionMoveForBlack_Bishop()
        {
#line 2146
this.UndoLastMoveShouldUndoAPawnPromotionMoveForBlack("bishop", "PawnPromotionBishop", "BB", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Undo last move should undo a pawn promotion move for black: rook")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "rook")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "rook")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type", "PawnPromotionRook")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:A1", "BR")]
        public virtual void UndoLastMoveShouldUndoAPawnPromotionMoveForBlack_Rook()
        {
#line 2146
this.UndoLastMoveShouldUndoAPawnPromotionMoveForBlack("rook", "PawnPromotionRook", "BR", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Undo last move should undo a pawn promotion move for black: queen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "queen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "queen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type", "PawnPromotionQueen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:A1", "BQ")]
        public virtual void UndoLastMoveShouldUndoAPawnPromotionMoveForBlack_Queen()
        {
#line 2146
this.UndoLastMoveShouldUndoAPawnPromotionMoveForBlack("queen", "PawnPromotionQueen", "BQ", ((string[])(null)));
#line hidden
        }
        
        public virtual void UndoLastMoveShouldUndoAPawnPromotionCaptureForWhite(string testName, string type, string destination, string a8, string c8, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Undo last move should undo a pawn promotion capture for white", exampleTags);
#line 2182
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table214 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table214.AddRow(new string[] {
                        string.Format("{0}", a8),
                        "",
                        string.Format("{0}", c8),
                        "",
                        "",
                        "",
                        "",
                        "BK"});
            table214.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table214.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table214.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table214.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table214.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table214.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table214.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 2183
 testRunner.Given("I start a new game in the following state", ((string)(null)), table214, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table215 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table215.AddRow(new string[] {
                        "A7",
                        string.Format("{0}", destination),
                        string.Format("{0}", type)});
#line 2193
 testRunner.Given("I have the following move history", ((string)(null)), table215, "Given ");
#line 2196
 testRunner.When("I undo the last move", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2197
 testRunner.Then("I expect the game to not be over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2198
 testRunner.Then("I expect the gamestate to be \'InPlay\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2199
 testRunner.Then("I expect the current player is \'White\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table216 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table216.AddRow(new string[] {
                        "BN",
                        "",
                        "BN",
                        "",
                        "",
                        "",
                        "",
                        "BK"});
            table216.AddRow(new string[] {
                        "",
                        "WP",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table216.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table216.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table216.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table216.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table216.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table216.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 2200
 testRunner.Then("I expect the current board to contain the following", ((string)(null)), table216, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Undo last move should undo a pawn promotion capture for white: knight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "knight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "knight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type", "PawnPromotionKnight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Destination", "A8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:A8", "WN")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:C8", "BN")]
        public virtual void UndoLastMoveShouldUndoAPawnPromotionCaptureForWhite_Knight()
        {
#line 2182
this.UndoLastMoveShouldUndoAPawnPromotionCaptureForWhite("knight", "PawnPromotionKnight", "A8", "WN", "BN", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Undo last move should undo a pawn promotion capture for white: bishop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "bishop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "bishop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type", "PawnPromotionBishop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Destination", "C8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:A8", "BN")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:C8", "WB")]
        public virtual void UndoLastMoveShouldUndoAPawnPromotionCaptureForWhite_Bishop()
        {
#line 2182
this.UndoLastMoveShouldUndoAPawnPromotionCaptureForWhite("bishop", "PawnPromotionBishop", "C8", "BN", "WB", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Undo last move should undo a pawn promotion capture for white: rook")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "rook")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "rook")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type", "PawnPromotionRook")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Destination", "A8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:A8", "WR")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:C8", "BN")]
        public virtual void UndoLastMoveShouldUndoAPawnPromotionCaptureForWhite_Rook()
        {
#line 2182
this.UndoLastMoveShouldUndoAPawnPromotionCaptureForWhite("rook", "PawnPromotionRook", "A8", "WR", "BN", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Undo last move should undo a pawn promotion capture for white: queen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "queen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "queen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type", "PawnPromotionQueen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Destination", "C8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:A8", "BN")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:C8", "WQ")]
        public virtual void UndoLastMoveShouldUndoAPawnPromotionCaptureForWhite_Queen()
        {
#line 2182
this.UndoLastMoveShouldUndoAPawnPromotionCaptureForWhite("queen", "PawnPromotionQueen", "C8", "BN", "WQ", ((string[])(null)));
#line hidden
        }
        
        public virtual void UndoLastMoveShouldUndoAPawnPromotionCaptureForBlack(string testName, string type, string destination, string a1, string c1, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Undo last move should undo a pawn promotion capture for black", exampleTags);
#line 2217
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table217 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table217.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BK"});
            table217.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table217.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table217.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table217.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table217.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table217.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table217.AddRow(new string[] {
                        string.Format("{0}", a1),
                        "",
                        string.Format("{0}", c1),
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 2218
 testRunner.Given("I start a new game in the following state", ((string)(null)), table217, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table218 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table218.AddRow(new string[] {
                        "A4",
                        "A4",
                        "Move"});
            table218.AddRow(new string[] {
                        "A2",
                        string.Format("{0}", destination),
                        string.Format("{0}", type)});
#line 2228
 testRunner.Given("I have the following move history", ((string)(null)), table218, "Given ");
#line 2232
 testRunner.When("I undo the last move", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2233
 testRunner.Then("I expect the game to not be over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2234
 testRunner.Then("I expect the gamestate to be \'InPlay\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2235
 testRunner.Then("I expect the current player is \'Black\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table219 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table219.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BK"});
            table219.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table219.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table219.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table219.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table219.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table219.AddRow(new string[] {
                        "",
                        "BP",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table219.AddRow(new string[] {
                        "WN",
                        "",
                        "WN",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 2236
 testRunner.Then("I expect the current board to contain the following", ((string)(null)), table219, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Undo last move should undo a pawn promotion capture for black: knight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "knight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "knight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type", "PawnPromotionKnight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Destination", "A1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:A1", "BN")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:C1", "WN")]
        public virtual void UndoLastMoveShouldUndoAPawnPromotionCaptureForBlack_Knight()
        {
#line 2217
this.UndoLastMoveShouldUndoAPawnPromotionCaptureForBlack("knight", "PawnPromotionKnight", "A1", "BN", "WN", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Undo last move should undo a pawn promotion capture for black: bishop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "bishop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "bishop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type", "PawnPromotionBishop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Destination", "C1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:A1", "WN")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:C1", "BB")]
        public virtual void UndoLastMoveShouldUndoAPawnPromotionCaptureForBlack_Bishop()
        {
#line 2217
this.UndoLastMoveShouldUndoAPawnPromotionCaptureForBlack("bishop", "PawnPromotionBishop", "C1", "WN", "BB", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Undo last move should undo a pawn promotion capture for black: rook")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "rook")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "rook")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type", "PawnPromotionRook")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Destination", "A1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:A1", "BR")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:C1", "WN")]
        public virtual void UndoLastMoveShouldUndoAPawnPromotionCaptureForBlack_Rook()
        {
#line 2217
this.UndoLastMoveShouldUndoAPawnPromotionCaptureForBlack("rook", "PawnPromotionRook", "A1", "BR", "WN", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Undo last move should undo a pawn promotion capture for black: queen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "queen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "queen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type", "PawnPromotionQueen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Destination", "C1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:A1", "WN")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:C1", "BQ")]
        public virtual void UndoLastMoveShouldUndoAPawnPromotionCaptureForBlack_Queen()
        {
#line 2217
this.UndoLastMoveShouldUndoAPawnPromotionCaptureForBlack("queen", "PawnPromotionQueen", "C1", "WN", "BQ", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Undo last move should undo an au passant northwest move for white")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void UndoLastMoveShouldUndoAnAuPassantNorthwestMoveForWhite()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Undo last move should undo an au passant northwest move for white", ((string[])(null)));
#line 2253
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table220 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table220.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BK"});
            table220.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table220.AddRow(new string[] {
                        "WP",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table220.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table220.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table220.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table220.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table220.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 2254
 testRunner.Given("I start a new game in the following state", ((string)(null)), table220, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table221 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table221.AddRow(new string[] {
                        "B5",
                        "A6",
                        "AuPassant"});
#line 2264
 testRunner.Given("I have the following move history", ((string)(null)), table221, "Given ");
#line 2267
 testRunner.When("I undo the last move", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2268
 testRunner.Then("I expect the game to not be over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2269
 testRunner.Then("I expect the gamestate to be \'InPlay\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2270
 testRunner.Then("I expect the current player is \'White\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table222 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table222.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BK"});
            table222.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table222.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table222.AddRow(new string[] {
                        "BP",
                        "WP",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table222.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table222.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table222.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table222.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 2271
 testRunner.Then("I expect the current board to contain the following", ((string)(null)), table222, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Undo last move should undo an au passant northeast move for white")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void UndoLastMoveShouldUndoAnAuPassantNortheastMoveForWhite()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Undo last move should undo an au passant northeast move for white", ((string[])(null)));
#line 2282
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table223 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table223.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BK"});
            table223.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table223.AddRow(new string[] {
                        "",
                        "",
                        "WP",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table223.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table223.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table223.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table223.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table223.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 2283
 testRunner.Given("I start a new game in the following state", ((string)(null)), table223, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table224 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table224.AddRow(new string[] {
                        "B5",
                        "C6",
                        "AuPassant"});
#line 2293
 testRunner.Given("I have the following move history", ((string)(null)), table224, "Given ");
#line 2296
 testRunner.When("I undo the last move", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2297
 testRunner.Then("I expect the game to not be over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2298
 testRunner.Then("I expect the gamestate to be \'InPlay\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2299
 testRunner.Then("I expect the current player is \'White\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table225 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table225.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BK"});
            table225.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table225.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table225.AddRow(new string[] {
                        "",
                        "WP",
                        "BP",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table225.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table225.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table225.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table225.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 2300
 testRunner.Then("I expect the current board to contain the following", ((string)(null)), table225, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Undo last move should undo an au passant southwest move for black")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void UndoLastMoveShouldUndoAnAuPassantSouthwestMoveForBlack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Undo last move should undo an au passant southwest move for black", ((string[])(null)));
#line 2311
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table226 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table226.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BK"});
            table226.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table226.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table226.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table226.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table226.AddRow(new string[] {
                        "BP",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table226.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table226.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 2312
 testRunner.Given("I start a new game in the following state", ((string)(null)), table226, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table227 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table227.AddRow(new string[] {
                        "A1",
                        "A1",
                        "Move"});
            table227.AddRow(new string[] {
                        "B4",
                        "A3",
                        "AuPassant"});
#line 2322
 testRunner.Given("I have the following move history", ((string)(null)), table227, "Given ");
#line 2326
 testRunner.When("I undo the last move", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2327
 testRunner.Then("I expect the game to not be over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2328
 testRunner.Then("I expect the gamestate to be \'InPlay\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2329
 testRunner.Then("I expect the current player is \'Black\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table228 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table228.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BK"});
            table228.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table228.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table228.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table228.AddRow(new string[] {
                        "WP",
                        "BP",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table228.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table228.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table228.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 2330
 testRunner.Then("I expect the current board to contain the following", ((string)(null)), table228, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Undo last move should undo an au passant southeast move for black")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void UndoLastMoveShouldUndoAnAuPassantSoutheastMoveForBlack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Undo last move should undo an au passant southeast move for black", ((string[])(null)));
#line 2341
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table229 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table229.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BK"});
            table229.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table229.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table229.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table229.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table229.AddRow(new string[] {
                        "",
                        "",
                        "BP",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table229.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table229.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 2342
 testRunner.Given("I start a new game in the following state", ((string)(null)), table229, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table230 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table230.AddRow(new string[] {
                        "A1",
                        "A1",
                        "Move"});
            table230.AddRow(new string[] {
                        "B4",
                        "C3",
                        "AuPassant"});
#line 2352
 testRunner.Given("I have the following move history", ((string)(null)), table230, "Given ");
#line 2356
 testRunner.When("I undo the last move", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2357
 testRunner.Then("I expect the game to not be over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2358
 testRunner.Then("I expect the gamestate to be \'InPlay\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2359
 testRunner.Then("I expect the current player is \'Black\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table231 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table231.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BK"});
            table231.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table231.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table231.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table231.AddRow(new string[] {
                        "",
                        "BP",
                        "WP",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table231.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table231.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table231.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 2360
 testRunner.Then("I expect the current board to contain the following", ((string)(null)), table231, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Undo last move should undo a castle kingside move for white")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void UndoLastMoveShouldUndoACastleKingsideMoveForWhite()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Undo last move should undo a castle kingside move for white", ((string[])(null)));
#line 2371
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table232 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table232.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BK",
                        "",
                        "",
                        ""});
            table232.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table232.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table232.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table232.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table232.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table232.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table232.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WR",
                        "WK",
                        ""});
#line 2372
 testRunner.Given("I start a new game in the following state", ((string)(null)), table232, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table233 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table233.AddRow(new string[] {
                        "E1",
                        "G1",
                        "CastleKingside"});
#line 2382
 testRunner.Given("I have the following move history", ((string)(null)), table233, "Given ");
#line 2385
 testRunner.When("I undo the last move", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2386
 testRunner.Then("I expect the game to not be over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2387
 testRunner.Then("I expect the gamestate to be \'InPlay\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2388
 testRunner.Then("I expect the current player is \'White\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table234 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table234.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BK",
                        "",
                        "",
                        ""});
            table234.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table234.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table234.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table234.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table234.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table234.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table234.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "WK",
                        "",
                        "",
                        "WR"});
#line 2389
 testRunner.Then("I expect the current board to contain the following", ((string)(null)), table234, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Undo last move should undo a castle queenside move for white")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void UndoLastMoveShouldUndoACastleQueensideMoveForWhite()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Undo last move should undo a castle queenside move for white", ((string[])(null)));
#line 2400
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table235 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table235.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BK",
                        "",
                        "",
                        ""});
            table235.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table235.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table235.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table235.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table235.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table235.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table235.AddRow(new string[] {
                        "",
                        "",
                        "WK",
                        "WR",
                        "",
                        "",
                        "",
                        ""});
#line 2401
 testRunner.Given("I start a new game in the following state", ((string)(null)), table235, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table236 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table236.AddRow(new string[] {
                        "E1",
                        "C1",
                        "CastleQueenside"});
#line 2411
 testRunner.Given("I have the following move history", ((string)(null)), table236, "Given ");
#line 2414
 testRunner.When("I undo the last move", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2415
 testRunner.Then("I expect the game to not be over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2416
 testRunner.Then("I expect the gamestate to be \'InPlay\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2417
 testRunner.Then("I expect the current player is \'White\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table237 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table237.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BK",
                        "",
                        "",
                        ""});
            table237.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table237.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table237.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table237.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table237.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table237.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table237.AddRow(new string[] {
                        "WR",
                        "",
                        "",
                        "",
                        "WK",
                        "",
                        "",
                        ""});
#line 2418
 testRunner.Then("I expect the current board to contain the following", ((string)(null)), table237, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Undo last move should undo a castle kingside move for black")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void UndoLastMoveShouldUndoACastleKingsideMoveForBlack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Undo last move should undo a castle kingside move for black", ((string[])(null)));
#line 2429
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table238 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table238.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BR",
                        "BK",
                        ""});
            table238.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table238.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table238.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table238.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table238.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table238.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table238.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "WK",
                        "",
                        "",
                        ""});
#line 2430
 testRunner.Given("I start a new game in the following state", ((string)(null)), table238, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table239 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table239.AddRow(new string[] {
                        "A1",
                        "A1",
                        "Move"});
            table239.AddRow(new string[] {
                        "E8",
                        "G8",
                        "CastleKingside"});
#line 2440
 testRunner.Given("I have the following move history", ((string)(null)), table239, "Given ");
#line 2444
 testRunner.When("I undo the last move", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2445
 testRunner.Then("I expect the game to not be over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2446
 testRunner.Then("I expect the gamestate to be \'InPlay\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2447
 testRunner.Then("I expect the current player is \'Black\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table240 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table240.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BK",
                        "",
                        "",
                        "BR"});
            table240.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table240.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table240.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table240.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table240.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table240.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table240.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "WK",
                        "",
                        "",
                        ""});
#line 2448
 testRunner.Then("I expect the current board to contain the following", ((string)(null)), table240, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Undo last move should undo a castle queenside move for black")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void UndoLastMoveShouldUndoACastleQueensideMoveForBlack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Undo last move should undo a castle queenside move for black", ((string[])(null)));
#line 2459
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table241 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table241.AddRow(new string[] {
                        "",
                        "",
                        "BK",
                        "BR",
                        "",
                        "",
                        "",
                        ""});
            table241.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table241.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table241.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table241.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table241.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table241.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table241.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "WK",
                        "",
                        "",
                        ""});
#line 2460
 testRunner.Given("I start a new game in the following state", ((string)(null)), table241, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table242 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Type"});
            table242.AddRow(new string[] {
                        "A1",
                        "A1",
                        "Move"});
            table242.AddRow(new string[] {
                        "E8",
                        "C8",
                        "CastleQueenside"});
#line 2470
 testRunner.Given("I have the following move history", ((string)(null)), table242, "Given ");
#line 2474
 testRunner.When("I undo the last move", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2475
 testRunner.Then("I expect the game to not be over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2476
 testRunner.Then("I expect the gamestate to be \'InPlay\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2477
 testRunner.Then("I expect the current player is \'Black\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table243 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table243.AddRow(new string[] {
                        "BR",
                        "",
                        "",
                        "",
                        "BK",
                        "",
                        "",
                        ""});
            table243.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table243.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table243.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table243.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table243.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table243.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table243.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "WK",
                        "",
                        "",
                        ""});
#line 2478
 testRunner.Then("I expect the current board to contain the following", ((string)(null)), table243, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
