// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Arcesoft.Chess.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class GameStepsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "GameSteps.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "GameSteps", "\tValidate game behavior works as expected", ProgrammingLanguage.CSharp, new string[] {
                        "Unit"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "GameSteps")))
            {
                global::Arcesoft.Chess.Tests.GameStepsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(TestContext);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 16
#line 17
 testRunner.Given("I have a container", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 18
 testRunner.Given("I have a game factory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("New game should start in correct state")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void NewGameShouldStartInCorrectState()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("New game should start in correct state", ((string[])(null)));
#line 20
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line 21
 testRunner.When("I start a new game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 22
 testRunner.Then("I expect the game to not be over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 23
 testRunner.Then("I expect the gamestate to be \'InPlay\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 24
 testRunner.Then("I expect no moves to have been made", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 25
 testRunner.Then("I expect the current player is \'White\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table1.AddRow(new string[] {
                        "BR",
                        "BN",
                        "BB",
                        "BQ",
                        "BK",
                        "BB",
                        "BN",
                        "BR"});
            table1.AddRow(new string[] {
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP"});
            table1.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1.AddRow(new string[] {
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP"});
            table1.AddRow(new string[] {
                        "WR",
                        "WN",
                        "WB",
                        "WQ",
                        "WK",
                        "WB",
                        "WN",
                        "WR"});
#line 26
 testRunner.Then("I expect the current board to contain the following", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("New game should find moves for starting board")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void NewGameShouldFindMovesForStartingBoard()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("New game should find moves for starting board", ((string[])(null)));
#line 37
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line 38
 testRunner.Given("I start a new game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 39
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table2.AddRow(new string[] {
                        "A2",
                        "A3"});
            table2.AddRow(new string[] {
                        "A2",
                        "A4"});
            table2.AddRow(new string[] {
                        "B1",
                        "A3"});
            table2.AddRow(new string[] {
                        "B1",
                        "C3"});
            table2.AddRow(new string[] {
                        "B2",
                        "B3"});
            table2.AddRow(new string[] {
                        "B2",
                        "B4"});
            table2.AddRow(new string[] {
                        "C2",
                        "C3"});
            table2.AddRow(new string[] {
                        "C2",
                        "C4"});
            table2.AddRow(new string[] {
                        "D2",
                        "D3"});
            table2.AddRow(new string[] {
                        "D2",
                        "D4"});
            table2.AddRow(new string[] {
                        "E2",
                        "E3"});
            table2.AddRow(new string[] {
                        "E2",
                        "E4"});
            table2.AddRow(new string[] {
                        "F2",
                        "F3"});
            table2.AddRow(new string[] {
                        "F2",
                        "F4"});
            table2.AddRow(new string[] {
                        "G1",
                        "F3"});
            table2.AddRow(new string[] {
                        "G1",
                        "H3"});
            table2.AddRow(new string[] {
                        "G2",
                        "G3"});
            table2.AddRow(new string[] {
                        "G2",
                        "G4"});
            table2.AddRow(new string[] {
                        "H2",
                        "H3"});
            table2.AddRow(new string[] {
                        "H2",
                        "H4"});
#line 40
 testRunner.Then("I expect the the moves found to contain", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for white pawns")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForWhitePawns()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for white pawns", ((string[])(null)));
#line 69
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table3.AddRow(new string[] {
                        "BK",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table3.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table3.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BP",
                        ""});
            table3.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BP",
                        "WP",
                        "BP"});
            table3.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "BP",
                        "",
                        "",
                        "",
                        ""});
            table3.AddRow(new string[] {
                        "",
                        "WP",
                        "WP",
                        "",
                        "BP",
                        "",
                        "",
                        "WK"});
            table3.AddRow(new string[] {
                        "WP",
                        "",
                        "",
                        "WP",
                        "WP",
                        "",
                        "",
                        "WP"});
            table3.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 70
 testRunner.Given("I start a new game in the following state", ((string)(null)), table3, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Result"});
            table4.AddRow(new string[] {
                        "A1",
                        "A2",
                        "None"});
            table4.AddRow(new string[] {
                        "F7",
                        "F5",
                        "None"});
#line 82
 testRunner.Given("I have the following move history", ((string)(null)), table4, "Given ");
#line 86
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table5.AddRow(new string[] {
                        "A2",
                        "A3"});
            table5.AddRow(new string[] {
                        "A2",
                        "A4"});
            table5.AddRow(new string[] {
                        "B3",
                        "B4"});
            table5.AddRow(new string[] {
                        "C3",
                        "C4"});
            table5.AddRow(new string[] {
                        "C3",
                        "D4"});
            table5.AddRow(new string[] {
                        "D2",
                        "D3"});
            table5.AddRow(new string[] {
                        "D2",
                        "E3"});
            table5.AddRow(new string[] {
                        "G5",
                        "F6"});
            table5.AddRow(new string[] {
                        "H3",
                        "H4"});
            table5.AddRow(new string[] {
                        "H3",
                        "G3"});
            table5.AddRow(new string[] {
                        "H3",
                        "G2"});
#line 87
 testRunner.Then("I expect the the moves found to contain", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for black pawns")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForBlackPawns()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for black pawns", ((string[])(null)));
#line 107
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table6.AddRow(new string[] {
                        "BK",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "BP",
                        "BP",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BP"});
            table6.AddRow(new string[] {
                        "",
                        "WP",
                        "BP",
                        "BP",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "",
                        "WP",
                        "",
                        "WP",
                        "",
                        "",
                        "BP",
                        "WP"});
            table6.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WP",
                        ""});
            table6.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 108
 testRunner.Given("I start a new game in the following state", ((string)(null)), table6, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Result"});
            table7.AddRow(new string[] {
                        "G2",
                        "G4",
                        "None"});
#line 120
 testRunner.Given("I have the following move history", ((string)(null)), table7, "Given ");
#line 123
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table8.AddRow(new string[] {
                        "A2",
                        "A3"});
#line 124
 testRunner.Then("I expect the the moves found to contain", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
