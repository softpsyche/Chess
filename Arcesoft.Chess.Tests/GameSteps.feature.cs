// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Arcesoft.Chess.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class GameStepsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "GameSteps.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "GameSteps", "\tValidate game behavior works as expected", ProgrammingLanguage.CSharp, new string[] {
                        "Unit"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "GameSteps")))
            {
                global::Arcesoft.Chess.Tests.GameStepsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(TestContext);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 16
#line 17
 testRunner.Given("I have a container", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 18
 testRunner.Given("I have a game factory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("New game should start in correct state")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void NewGameShouldStartInCorrectState()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("New game should start in correct state", ((string[])(null)));
#line 23
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line 24
 testRunner.When("I start a new game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 25
 testRunner.Then("I expect the game to not be over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 26
 testRunner.Then("I expect the gamestate to be \'InPlay\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 27
 testRunner.Then("I expect no moves to have been made", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 28
 testRunner.Then("I expect the current player is \'White\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table1.AddRow(new string[] {
                        "BR",
                        "BN",
                        "BB",
                        "BQ",
                        "BK",
                        "BB",
                        "BN",
                        "BR"});
            table1.AddRow(new string[] {
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP"});
            table1.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1.AddRow(new string[] {
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP"});
            table1.AddRow(new string[] {
                        "WR",
                        "WN",
                        "WB",
                        "WQ",
                        "WK",
                        "WB",
                        "WN",
                        "WR"});
#line 29
 testRunner.Then("I expect the current board to contain the following", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("New game should find moves for starting board")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void NewGameShouldFindMovesForStartingBoard()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("New game should find moves for starting board", ((string[])(null)));
#line 40
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line 41
 testRunner.Given("I start a new game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 42
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table2.AddRow(new string[] {
                        "A2",
                        "A3"});
            table2.AddRow(new string[] {
                        "A2",
                        "A4"});
            table2.AddRow(new string[] {
                        "B1",
                        "A3"});
            table2.AddRow(new string[] {
                        "B1",
                        "C3"});
            table2.AddRow(new string[] {
                        "B2",
                        "B3"});
            table2.AddRow(new string[] {
                        "B2",
                        "B4"});
            table2.AddRow(new string[] {
                        "C2",
                        "C3"});
            table2.AddRow(new string[] {
                        "C2",
                        "C4"});
            table2.AddRow(new string[] {
                        "D2",
                        "D3"});
            table2.AddRow(new string[] {
                        "D2",
                        "D4"});
            table2.AddRow(new string[] {
                        "E2",
                        "E3"});
            table2.AddRow(new string[] {
                        "E2",
                        "E4"});
            table2.AddRow(new string[] {
                        "F2",
                        "F3"});
            table2.AddRow(new string[] {
                        "F2",
                        "F4"});
            table2.AddRow(new string[] {
                        "G1",
                        "F3"});
            table2.AddRow(new string[] {
                        "G1",
                        "H3"});
            table2.AddRow(new string[] {
                        "G2",
                        "G3"});
            table2.AddRow(new string[] {
                        "G2",
                        "G4"});
            table2.AddRow(new string[] {
                        "H2",
                        "H3"});
            table2.AddRow(new string[] {
                        "H2",
                        "H4"});
#line 43
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for white pawns")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForWhitePawns()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for white pawns", ((string[])(null)));
#line 72
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table3.AddRow(new string[] {
                        "BK",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table3.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table3.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BP",
                        ""});
            table3.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BP",
                        "WP",
                        "BP"});
            table3.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "BP",
                        "",
                        "",
                        "",
                        ""});
            table3.AddRow(new string[] {
                        "",
                        "WP",
                        "WP",
                        "",
                        "BP",
                        "",
                        "",
                        "WK"});
            table3.AddRow(new string[] {
                        "WP",
                        "",
                        "",
                        "WP",
                        "WP",
                        "",
                        "",
                        "WP"});
            table3.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 73
 testRunner.Given("I start a new game in the following state", ((string)(null)), table3, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Result"});
            table4.AddRow(new string[] {
                        "A1",
                        "A2",
                        "None"});
            table4.AddRow(new string[] {
                        "F7",
                        "F5",
                        "None"});
#line 85
 testRunner.Given("I have the following move history", ((string)(null)), table4, "Given ");
#line 89
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table5.AddRow(new string[] {
                        "A2",
                        "A3"});
            table5.AddRow(new string[] {
                        "A2",
                        "A4"});
            table5.AddRow(new string[] {
                        "B3",
                        "B4"});
            table5.AddRow(new string[] {
                        "C3",
                        "C4"});
            table5.AddRow(new string[] {
                        "C3",
                        "D4"});
            table5.AddRow(new string[] {
                        "D2",
                        "D3"});
            table5.AddRow(new string[] {
                        "D2",
                        "E3"});
            table5.AddRow(new string[] {
                        "G5",
                        "F6"});
            table5.AddRow(new string[] {
                        "H3",
                        "H4"});
            table5.AddRow(new string[] {
                        "H3",
                        "G3"});
            table5.AddRow(new string[] {
                        "H3",
                        "G2"});
#line 90
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for black pawns")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForBlackPawns()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for black pawns", ((string[])(null)));
#line 110
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table6.AddRow(new string[] {
                        "BK",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "BP",
                        "BP",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "",
                        "WP",
                        "BP",
                        "BP",
                        "",
                        "",
                        "",
                        "BP"});
            table6.AddRow(new string[] {
                        "",
                        "WP",
                        "",
                        "WP",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BP",
                        "WP"});
            table6.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WP",
                        ""});
            table6.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 111
 testRunner.Given("I start a new game in the following state", ((string)(null)), table6, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Result"});
            table7.AddRow(new string[] {
                        "H2",
                        "H4",
                        "None"});
#line 123
 testRunner.Given("I have the following move history", ((string)(null)), table7, "Given ");
#line 126
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table8.AddRow(new string[] {
                        "A8",
                        "B8"});
            table8.AddRow(new string[] {
                        "A7",
                        "A6"});
            table8.AddRow(new string[] {
                        "A7",
                        "A5"});
            table8.AddRow(new string[] {
                        "A7",
                        "B6"});
            table8.AddRow(new string[] {
                        "C6",
                        "B5"});
            table8.AddRow(new string[] {
                        "C6",
                        "C5"});
            table8.AddRow(new string[] {
                        "C6",
                        "D5"});
            table8.AddRow(new string[] {
                        "G4",
                        "H3"});
            table8.AddRow(new string[] {
                        "H6",
                        "H5"});
#line 127
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for white knights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForWhiteKnights()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for white knights", ((string[])(null)));
#line 139
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table9.AddRow(new string[] {
                        "BK",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WN"});
            table9.AddRow(new string[] {
                        "BP",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BP",
                        ""});
            table9.AddRow(new string[] {
                        "",
                        "",
                        "WN",
                        "",
                        "",
                        "",
                        "WP",
                        ""});
            table9.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table9.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "BP",
                        "",
                        "",
                        "",
                        ""});
            table9.AddRow(new string[] {
                        "",
                        "WN",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table9.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WN",
                        ""});
            table9.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 140
 testRunner.Given("I start a new game in the following state", ((string)(null)), table9, "Given ");
#line 150
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table10.AddRow(new string[] {
                        "B3",
                        "A1"});
            table10.AddRow(new string[] {
                        "B3",
                        "A5"});
            table10.AddRow(new string[] {
                        "B3",
                        "C5"});
            table10.AddRow(new string[] {
                        "B3",
                        "C1"});
            table10.AddRow(new string[] {
                        "B3",
                        "D4"});
            table10.AddRow(new string[] {
                        "B3",
                        "D2"});
            table10.AddRow(new string[] {
                        "C6",
                        "A5"});
            table10.AddRow(new string[] {
                        "C6",
                        "A7"});
            table10.AddRow(new string[] {
                        "C6",
                        "B8"});
            table10.AddRow(new string[] {
                        "C6",
                        "B4"});
            table10.AddRow(new string[] {
                        "C6",
                        "D8"});
            table10.AddRow(new string[] {
                        "C6",
                        "D4"});
            table10.AddRow(new string[] {
                        "C6",
                        "E7"});
            table10.AddRow(new string[] {
                        "C6",
                        "E5"});
            table10.AddRow(new string[] {
                        "G2",
                        "E1"});
            table10.AddRow(new string[] {
                        "G2",
                        "E3"});
            table10.AddRow(new string[] {
                        "G2",
                        "F4"});
            table10.AddRow(new string[] {
                        "G2",
                        "H4"});
            table10.AddRow(new string[] {
                        "H1",
                        "H2"});
            table10.AddRow(new string[] {
                        "H1",
                        "G1"});
            table10.AddRow(new string[] {
                        "H8",
                        "F7"});
#line 151
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table10, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for black knights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForBlackKnights()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for black knights", ((string[])(null)));
#line 175
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table11.AddRow(new string[] {
                        "WK",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BN"});
            table11.AddRow(new string[] {
                        "WP",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table11.AddRow(new string[] {
                        "",
                        "",
                        "BN",
                        "",
                        "",
                        "",
                        "BP",
                        ""});
            table11.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WP",
                        ""});
            table11.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "WP",
                        "",
                        "",
                        "",
                        ""});
            table11.AddRow(new string[] {
                        "",
                        "BN",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table11.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BN",
                        ""});
            table11.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BK"});
#line 176
 testRunner.Given("I start a new game in the following state", ((string)(null)), table11, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Result"});
            table12.AddRow(new string[] {
                        "A1",
                        "A1",
                        "None"});
#line 186
 testRunner.Given("I have the following move history", ((string)(null)), table12, "Given ");
#line 189
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table13.AddRow(new string[] {
                        "B3",
                        "A5"});
            table13.AddRow(new string[] {
                        "B3",
                        "C5"});
            table13.AddRow(new string[] {
                        "B3",
                        "C1"});
            table13.AddRow(new string[] {
                        "B3",
                        "D4"});
            table13.AddRow(new string[] {
                        "B3",
                        "D2"});
            table13.AddRow(new string[] {
                        "B3",
                        "A1"});
            table13.AddRow(new string[] {
                        "C6",
                        "A5"});
            table13.AddRow(new string[] {
                        "C6",
                        "A7"});
            table13.AddRow(new string[] {
                        "C6",
                        "B8"});
            table13.AddRow(new string[] {
                        "C6",
                        "B4"});
            table13.AddRow(new string[] {
                        "C6",
                        "D8"});
            table13.AddRow(new string[] {
                        "C6",
                        "D4"});
            table13.AddRow(new string[] {
                        "C6",
                        "E7"});
            table13.AddRow(new string[] {
                        "C6",
                        "E5"});
            table13.AddRow(new string[] {
                        "G2",
                        "E1"});
            table13.AddRow(new string[] {
                        "G2",
                        "E3"});
            table13.AddRow(new string[] {
                        "G2",
                        "F4"});
            table13.AddRow(new string[] {
                        "G2",
                        "H4"});
            table13.AddRow(new string[] {
                        "H1",
                        "H2"});
            table13.AddRow(new string[] {
                        "H1",
                        "G1"});
            table13.AddRow(new string[] {
                        "H8",
                        "F7"});
#line 190
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table13, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for white bishops")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForWhiteBishops()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for white bishops", ((string[])(null)));
#line 214
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table14.AddRow(new string[] {
                        "WB",
                        "BK",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table14.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table14.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table14.AddRow(new string[] {
                        "",
                        "BP",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table14.AddRow(new string[] {
                        "",
                        "",
                        "WB",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table14.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BP",
                        "",
                        "",
                        "BP"});
            table14.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "WP",
                        "",
                        "",
                        "WP"});
            table14.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 215
 testRunner.Given("I start a new game in the following state", ((string)(null)), table14, "Given ");
#line 225
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table15.AddRow(new string[] {
                        "A8",
                        "B7"});
            table15.AddRow(new string[] {
                        "A8",
                        "C6"});
            table15.AddRow(new string[] {
                        "A8",
                        "D5"});
            table15.AddRow(new string[] {
                        "A8",
                        "E4"});
            table15.AddRow(new string[] {
                        "A8",
                        "F3"});
            table15.AddRow(new string[] {
                        "A8",
                        "G2"});
            table15.AddRow(new string[] {
                        "C4",
                        "B5"});
            table15.AddRow(new string[] {
                        "C4",
                        "B3"});
            table15.AddRow(new string[] {
                        "C4",
                        "A2"});
            table15.AddRow(new string[] {
                        "C4",
                        "D3"});
            table15.AddRow(new string[] {
                        "C4",
                        "D5"});
            table15.AddRow(new string[] {
                        "C4",
                        "E6"});
            table15.AddRow(new string[] {
                        "C4",
                        "F7"});
            table15.AddRow(new string[] {
                        "C4",
                        "G8"});
            table15.AddRow(new string[] {
                        "H1",
                        "G1"});
#line 226
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table15, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for black bishops")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForBlackBishops()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for black bishops", ((string[])(null)));
#line 244
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table16.AddRow(new string[] {
                        "BK",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table16.AddRow(new string[] {
                        "BP",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table16.AddRow(new string[] {
                        "WP",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table16.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table16.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "BB",
                        "",
                        "",
                        "",
                        ""});
            table16.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table16.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WP",
                        "WK",
                        ""});
            table16.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 245
 testRunner.Given("I start a new game in the following state", ((string)(null)), table16, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Result"});
            table17.AddRow(new string[] {
                        "A1",
                        "A1",
                        "None"});
#line 255
 testRunner.Given("I have the following move history", ((string)(null)), table17, "Given ");
#line 258
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table18.AddRow(new string[] {
                        "A8",
                        "B8"});
            table18.AddRow(new string[] {
                        "D4",
                        "C5"});
            table18.AddRow(new string[] {
                        "D4",
                        "B6"});
            table18.AddRow(new string[] {
                        "D4",
                        "E3"});
            table18.AddRow(new string[] {
                        "D4",
                        "F2"});
            table18.AddRow(new string[] {
                        "D4",
                        "C3"});
            table18.AddRow(new string[] {
                        "D4",
                        "B2"});
            table18.AddRow(new string[] {
                        "D4",
                        "A1"});
            table18.AddRow(new string[] {
                        "D4",
                        "E5"});
            table18.AddRow(new string[] {
                        "D4",
                        "F6"});
            table18.AddRow(new string[] {
                        "D4",
                        "G7"});
            table18.AddRow(new string[] {
                        "D4",
                        "H8"});
#line 259
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table18, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for white rooks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForWhiteRooks()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for white rooks", ((string[])(null)));
#line 274
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table19.AddRow(new string[] {
                        "BK",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table19.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "BP",
                        "",
                        "",
                        "",
                        ""});
            table19.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table19.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "WR",
                        "",
                        "",
                        "",
                        ""});
            table19.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table19.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BP",
                        "BP"});
            table19.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "WP",
                        "",
                        "",
                        "",
                        "BP"});
            table19.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 275
 testRunner.Given("I start a new game in the following state", ((string)(null)), table19, "Given ");
#line 285
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table20.AddRow(new string[] {
                        "D2",
                        "D3"});
            table20.AddRow(new string[] {
                        "D2",
                        "D4"});
            table20.AddRow(new string[] {
                        "D5",
                        "E5"});
            table20.AddRow(new string[] {
                        "D5",
                        "F5"});
            table20.AddRow(new string[] {
                        "D5",
                        "G5"});
            table20.AddRow(new string[] {
                        "D5",
                        "H5"});
            table20.AddRow(new string[] {
                        "D5",
                        "C5"});
            table20.AddRow(new string[] {
                        "D5",
                        "B5"});
            table20.AddRow(new string[] {
                        "D5",
                        "A5"});
            table20.AddRow(new string[] {
                        "D5",
                        "D6"});
            table20.AddRow(new string[] {
                        "D5",
                        "D7"});
            table20.AddRow(new string[] {
                        "D5",
                        "D4"});
            table20.AddRow(new string[] {
                        "D5",
                        "D3"});
#line 286
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table20, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for black rooks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForBlackRooks()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for black rooks", ((string[])(null)));
#line 302
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table21.AddRow(new string[] {
                        "BK",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table21.AddRow(new string[] {
                        "WP",
                        "",
                        "",
                        "",
                        "BP",
                        "",
                        "",
                        ""});
            table21.AddRow(new string[] {
                        "WP",
                        "WP",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table21.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table21.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BR",
                        "",
                        "",
                        ""});
            table21.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table21.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table21.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "WR",
                        "",
                        "",
                        "WK"});
#line 303
 testRunner.Given("I start a new game in the following state", ((string)(null)), table21, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Result"});
            table22.AddRow(new string[] {
                        "A1",
                        "A1",
                        "None"});
#line 313
 testRunner.Given("I have the following move history", ((string)(null)), table22, "Given ");
#line 316
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table23.AddRow(new string[] {
                        "E4",
                        "F4"});
            table23.AddRow(new string[] {
                        "E4",
                        "G4"});
            table23.AddRow(new string[] {
                        "E4",
                        "H4"});
            table23.AddRow(new string[] {
                        "E4",
                        "D4"});
            table23.AddRow(new string[] {
                        "E4",
                        "C4"});
            table23.AddRow(new string[] {
                        "E4",
                        "B4"});
            table23.AddRow(new string[] {
                        "E4",
                        "A4"});
            table23.AddRow(new string[] {
                        "E4",
                        "E5"});
            table23.AddRow(new string[] {
                        "E4",
                        "E6"});
            table23.AddRow(new string[] {
                        "E4",
                        "E3"});
            table23.AddRow(new string[] {
                        "E4",
                        "E2"});
            table23.AddRow(new string[] {
                        "E4",
                        "E1"});
            table23.AddRow(new string[] {
                        "E7",
                        "E6"});
            table23.AddRow(new string[] {
                        "E7",
                        "E5"});
#line 317
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table23, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for white queens")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForWhiteQueens()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for white queens", ((string[])(null)));
#line 334
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table24.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BK"});
            table24.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "BP",
                        "",
                        "",
                        "",
                        ""});
            table24.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table24.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "WQ",
                        "",
                        "",
                        "",
                        ""});
            table24.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table24.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BP",
                        "BP"});
            table24.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "WP",
                        "",
                        "",
                        "",
                        "BP"});
            table24.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 335
 testRunner.Given("I start a new game in the following state", ((string)(null)), table24, "Given ");
#line 345
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table25.AddRow(new string[] {
                        "D2",
                        "D3"});
            table25.AddRow(new string[] {
                        "D2",
                        "D4"});
            table25.AddRow(new string[] {
                        "D5",
                        "E5"});
            table25.AddRow(new string[] {
                        "D5",
                        "F5"});
            table25.AddRow(new string[] {
                        "D5",
                        "G5"});
            table25.AddRow(new string[] {
                        "D5",
                        "H5"});
            table25.AddRow(new string[] {
                        "D5",
                        "C5"});
            table25.AddRow(new string[] {
                        "D5",
                        "B5"});
            table25.AddRow(new string[] {
                        "D5",
                        "A5"});
            table25.AddRow(new string[] {
                        "D5",
                        "D6"});
            table25.AddRow(new string[] {
                        "D5",
                        "D7"});
            table25.AddRow(new string[] {
                        "D5",
                        "D4"});
            table25.AddRow(new string[] {
                        "D5",
                        "D3"});
            table25.AddRow(new string[] {
                        "D5",
                        "C6"});
            table25.AddRow(new string[] {
                        "D5",
                        "B7"});
            table25.AddRow(new string[] {
                        "D5",
                        "A8"});
            table25.AddRow(new string[] {
                        "D5",
                        "E4"});
            table25.AddRow(new string[] {
                        "D5",
                        "F3"});
            table25.AddRow(new string[] {
                        "D5",
                        "G2"});
            table25.AddRow(new string[] {
                        "D5",
                        "C4"});
            table25.AddRow(new string[] {
                        "D5",
                        "B3"});
            table25.AddRow(new string[] {
                        "D5",
                        "A2"});
            table25.AddRow(new string[] {
                        "D5",
                        "E6"});
            table25.AddRow(new string[] {
                        "D5",
                        "F7"});
            table25.AddRow(new string[] {
                        "D5",
                        "G8"});
#line 346
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table25, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for black queens")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForBlackQueens()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for black queens", ((string[])(null)));
#line 374
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table26.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BK"});
            table26.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "BP",
                        "",
                        "",
                        "",
                        "WP"});
            table26.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WP",
                        "WP"});
            table26.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table26.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "BQ",
                        "",
                        "",
                        "",
                        ""});
            table26.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table26.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "WP",
                        "",
                        "",
                        "",
                        ""});
            table26.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 375
 testRunner.Given("I start a new game in the following state", ((string)(null)), table26, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Result"});
            table27.AddRow(new string[] {
                        "A1",
                        "A1",
                        "None"});
#line 385
 testRunner.Given("I have the following move history", ((string)(null)), table27, "Given ");
#line 388
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table28.AddRow(new string[] {
                        "D4",
                        "E4"});
            table28.AddRow(new string[] {
                        "D4",
                        "F4"});
            table28.AddRow(new string[] {
                        "D4",
                        "G4"});
            table28.AddRow(new string[] {
                        "D4",
                        "H4"});
            table28.AddRow(new string[] {
                        "D4",
                        "C4"});
            table28.AddRow(new string[] {
                        "D4",
                        "B4"});
            table28.AddRow(new string[] {
                        "D4",
                        "A4"});
            table28.AddRow(new string[] {
                        "D4",
                        "D5"});
            table28.AddRow(new string[] {
                        "D4",
                        "D6"});
            table28.AddRow(new string[] {
                        "D4",
                        "D3"});
            table28.AddRow(new string[] {
                        "D4",
                        "D2"});
            table28.AddRow(new string[] {
                        "D4",
                        "C5"});
            table28.AddRow(new string[] {
                        "D4",
                        "B6"});
            table28.AddRow(new string[] {
                        "D4",
                        "A7"});
            table28.AddRow(new string[] {
                        "D4",
                        "E3"});
            table28.AddRow(new string[] {
                        "D4",
                        "F2"});
            table28.AddRow(new string[] {
                        "D4",
                        "G1"});
            table28.AddRow(new string[] {
                        "D4",
                        "C3"});
            table28.AddRow(new string[] {
                        "D4",
                        "B2"});
            table28.AddRow(new string[] {
                        "D4",
                        "A1"});
            table28.AddRow(new string[] {
                        "D4",
                        "E5"});
            table28.AddRow(new string[] {
                        "D4",
                        "F6"});
            table28.AddRow(new string[] {
                        "D4",
                        "G7"});
            table28.AddRow(new string[] {
                        "D7",
                        "D6"});
            table28.AddRow(new string[] {
                        "D7",
                        "D5"});
#line 389
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table28, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for white King (no threats)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForWhiteKingNoThreats()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for white King (no threats)", ((string[])(null)));
#line 417
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table29.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table29.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table29.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table29.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "WK",
                        "",
                        "",
                        "",
                        ""});
            table29.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table29.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table29.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table29.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BK"});
#line 418
 testRunner.Given("I start a new game in the following state", ((string)(null)), table29, "Given ");
#line 428
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table30.AddRow(new string[] {
                        "D5",
                        "D6"});
            table30.AddRow(new string[] {
                        "D5",
                        "E5"});
            table30.AddRow(new string[] {
                        "D5",
                        "C4"});
            table30.AddRow(new string[] {
                        "D5",
                        "D4"});
            table30.AddRow(new string[] {
                        "D5",
                        "C5"});
            table30.AddRow(new string[] {
                        "D5",
                        "E6"});
            table30.AddRow(new string[] {
                        "D5",
                        "C6"});
            table30.AddRow(new string[] {
                        "D5",
                        "E4"});
#line 429
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table30, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for white King")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForWhiteKing()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for white King", ((string[])(null)));
#line 440
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table31.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table31.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table31.AddRow(new string[] {
                        "",
                        "",
                        "BB",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table31.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "WK",
                        "",
                        "",
                        "",
                        ""});
            table31.AddRow(new string[] {
                        "",
                        "",
                        "BQ",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table31.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table31.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table31.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BK"});
#line 441
 testRunner.Given("I start a new game in the following state", ((string)(null)), table31, "Given ");
#line 451
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table32.AddRow(new string[] {
                        "D5",
                        "D6"});
            table32.AddRow(new string[] {
                        "D5",
                        "E5"});
            table32.AddRow(new string[] {
                        "D5",
                        "C4"});
#line 452
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table32, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for black King (no threats)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForBlackKingNoThreats()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for black King (no threats)", ((string[])(null)));
#line 458
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table33.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table33.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table33.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table33.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "BK",
                        "",
                        "",
                        "",
                        ""});
            table33.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table33.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table33.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table33.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 459
 testRunner.Given("I start a new game in the following state", ((string)(null)), table33, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Result"});
            table34.AddRow(new string[] {
                        "A1",
                        "A1",
                        "None"});
#line 469
 testRunner.Given("I have the following move history", ((string)(null)), table34, "Given ");
#line 472
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table35.AddRow(new string[] {
                        "D5",
                        "D6"});
            table35.AddRow(new string[] {
                        "D5",
                        "E5"});
            table35.AddRow(new string[] {
                        "D5",
                        "C4"});
            table35.AddRow(new string[] {
                        "D5",
                        "D4"});
            table35.AddRow(new string[] {
                        "D5",
                        "C5"});
            table35.AddRow(new string[] {
                        "D5",
                        "E6"});
            table35.AddRow(new string[] {
                        "D5",
                        "C6"});
            table35.AddRow(new string[] {
                        "D5",
                        "E4"});
#line 473
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table35, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for black King")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForBlackKing()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for black King", ((string[])(null)));
#line 484
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table36.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table36.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table36.AddRow(new string[] {
                        "",
                        "",
                        "WB",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table36.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "BK",
                        "",
                        "",
                        "",
                        ""});
            table36.AddRow(new string[] {
                        "",
                        "",
                        "WQ",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table36.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table36.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table36.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 485
 testRunner.Given("I start a new game in the following state", ((string)(null)), table36, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Result"});
            table37.AddRow(new string[] {
                        "A1",
                        "A1",
                        "None"});
#line 495
 testRunner.Given("I have the following move history", ((string)(null)), table37, "Given ");
#line 498
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table38.AddRow(new string[] {
                        "D5",
                        "D6"});
            table38.AddRow(new string[] {
                        "D5",
                        "E5"});
            table38.AddRow(new string[] {
                        "D5",
                        "C4"});
#line 499
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table38, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find castle moves for white king")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindCastleMovesForWhiteKing()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find castle moves for white king", ((string[])(null)));
#line 505
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table39.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BK",
                        "",
                        "",
                        ""});
            table39.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table39.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table39.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table39.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table39.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table39.AddRow(new string[] {
                        "WP",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WP"});
            table39.AddRow(new string[] {
                        "WR",
                        "",
                        "",
                        "",
                        "WK",
                        "",
                        "",
                        "WR"});
#line 506
 testRunner.Given("I start a new game in the following state", ((string)(null)), table39, "Given ");
#line 516
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table40.AddRow(new string[] {
                        "E1",
                        "F1"});
            table40.AddRow(new string[] {
                        "E1",
                        "F2"});
            table40.AddRow(new string[] {
                        "E1",
                        "E2"});
            table40.AddRow(new string[] {
                        "E1",
                        "D2"});
            table40.AddRow(new string[] {
                        "E1",
                        "D1"});
            table40.AddRow(new string[] {
                        "E1",
                        "G1"});
            table40.AddRow(new string[] {
                        "E1",
                        "C1"});
            table40.AddRow(new string[] {
                        "A1",
                        "B1"});
            table40.AddRow(new string[] {
                        "A1",
                        "C1"});
            table40.AddRow(new string[] {
                        "A1",
                        "D1"});
            table40.AddRow(new string[] {
                        "A2",
                        "A3"});
            table40.AddRow(new string[] {
                        "A2",
                        "A4"});
            table40.AddRow(new string[] {
                        "H1",
                        "G1"});
            table40.AddRow(new string[] {
                        "H1",
                        "F1"});
            table40.AddRow(new string[] {
                        "H2",
                        "H3"});
            table40.AddRow(new string[] {
                        "H2",
                        "H4"});
#line 517
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table40, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find castle moves for black king")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindCastleMovesForBlackKing()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find castle moves for black king", ((string[])(null)));
#line 539
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table41.AddRow(new string[] {
                        "BR",
                        "",
                        "",
                        "",
                        "BK",
                        "",
                        "",
                        "BR"});
            table41.AddRow(new string[] {
                        "BP",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BP"});
            table41.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table41.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table41.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table41.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table41.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table41.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "WK",
                        "",
                        "",
                        ""});
#line 540
 testRunner.Given("I start a new game in the following state", ((string)(null)), table41, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Result"});
            table42.AddRow(new string[] {
                        "A1",
                        "A1",
                        "None"});
#line 550
 testRunner.Given("I have the following move history", ((string)(null)), table42, "Given ");
#line 553
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table43.AddRow(new string[] {
                        "E8",
                        "F8"});
            table43.AddRow(new string[] {
                        "E8",
                        "F7"});
            table43.AddRow(new string[] {
                        "E8",
                        "E7"});
            table43.AddRow(new string[] {
                        "E8",
                        "D7"});
            table43.AddRow(new string[] {
                        "E8",
                        "D8"});
            table43.AddRow(new string[] {
                        "E8",
                        "G8"});
            table43.AddRow(new string[] {
                        "E8",
                        "C8"});
            table43.AddRow(new string[] {
                        "A7",
                        "A6"});
            table43.AddRow(new string[] {
                        "A7",
                        "A5"});
            table43.AddRow(new string[] {
                        "A8",
                        "B8"});
            table43.AddRow(new string[] {
                        "A8",
                        "C8"});
            table43.AddRow(new string[] {
                        "A8",
                        "D8"});
            table43.AddRow(new string[] {
                        "H7",
                        "H6"});
            table43.AddRow(new string[] {
                        "H7",
                        "H5"});
            table43.AddRow(new string[] {
                        "H8",
                        "G8"});
            table43.AddRow(new string[] {
                        "H8",
                        "F8"});
#line 554
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table43, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void FindMovesShouldNOTFindCastleMovesForWhiteKingWhen(string testName, string moveHistorySource, string moveHistoryDestination, string b3, string c3, string d1, string f8, string g1, string expectedMoves, string nonExpectedMoves, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should NOT find castle moves for white king when", exampleTags);
#line 584
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table44.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BK",
                        string.Format("{0}", f8),
                        "",
                        ""});
            table44.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table44.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table44.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table44.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table44.AddRow(new string[] {
                        "",
                        string.Format("{0}", b3),
                        string.Format("{0}", c3),
                        "",
                        "",
                        "",
                        "",
                        ""});
            table44.AddRow(new string[] {
                        "WP",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WP"});
            table44.AddRow(new string[] {
                        "WR",
                        "",
                        "",
                        string.Format("{0}", d1),
                        "WK",
                        "",
                        string.Format("{0}", g1),
                        "WR"});
#line 585
 testRunner.Given("I start a new game in the following state", ((string)(null)), table44, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Result"});
            table45.AddRow(new string[] {
                        "D1",
                        "D1",
                        "None"});
            table45.AddRow(new string[] {
                        string.Format("{0}", moveHistorySource),
                        string.Format("{0}", moveHistoryDestination),
                        "None"});
#line 595
 testRunner.Given("I have the following move history", ((string)(null)), table45, "Given ");
#line 599
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 600
 testRunner.Then(string.Format("I expect the moves found should NOT contain \'{0}\'", nonExpectedMoves), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 601
 testRunner.Then(string.Format("I expect the moves found should contain \'{0}\'", expectedMoves), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should NOT find castle moves for white king when: king has moved")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "king has moved")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "king has moved")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistorySource", "E1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistoryDestination", "F1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:B3", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:C3", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:D1", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:F8", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:G1", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoves", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:NonExpectedMoves", "E1-G1,E1-C1")]
        public virtual void FindMovesShouldNOTFindCastleMovesForWhiteKingWhen_KingHasMoved()
        {
#line 584
this.FindMovesShouldNOTFindCastleMovesForWhiteKingWhen("king has moved", "E1", "F1", "", "", "", "", "", "", "E1-G1,E1-C1", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should NOT find castle moves for white king when: king is in check")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "king is in check")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "king is in check")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistorySource", "D4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistoryDestination", "D4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:B3", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:C3", "BB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:D1", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:F8", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:G1", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoves", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:NonExpectedMoves", "E1-G1,E1-C1")]
        public virtual void FindMovesShouldNOTFindCastleMovesForWhiteKingWhen_KingIsInCheck()
        {
#line 584
this.FindMovesShouldNOTFindCastleMovesForWhiteKingWhen("king is in check", "D4", "D4", "", "BB", "", "", "", "", "E1-G1,E1-C1", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should NOT find castle moves for white king when: eastern rook has mov" +
            "ed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "eastern rook has moved")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "eastern rook has moved")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistorySource", "H1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistoryDestination", "H3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:B3", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:C3", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:D1", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:F8", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:G1", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoves", "E1-C1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:NonExpectedMoves", "E1-G1")]
        public virtual void FindMovesShouldNOTFindCastleMovesForWhiteKingWhen_EasternRookHasMoved()
        {
#line 584
this.FindMovesShouldNOTFindCastleMovesForWhiteKingWhen("eastern rook has moved", "H1", "H3", "", "", "", "", "", "E1-C1", "E1-G1", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should NOT find castle moves for white king when: eastern path blocked" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "eastern path blocked")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "eastern path blocked")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistorySource", "D4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistoryDestination", "D4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:B3", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:C3", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:D1", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:F8", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:G1", "WN")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoves", "E1-C1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:NonExpectedMoves", "E1-G1")]
        public virtual void FindMovesShouldNOTFindCastleMovesForWhiteKingWhen_EasternPathBlocked()
        {
#line 584
this.FindMovesShouldNOTFindCastleMovesForWhiteKingWhen("eastern path blocked", "D4", "D4", "", "", "", "", "WN", "E1-C1", "E1-G1", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should NOT find castle moves for white king when: eastern path is thre" +
            "atened")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "eastern path is threatened")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "eastern path is threatened")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistorySource", "D4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistoryDestination", "D4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:B3", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:C3", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:D1", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:F8", "BR")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:G1", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoves", "E1-C1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:NonExpectedMoves", "E1-G1")]
        public virtual void FindMovesShouldNOTFindCastleMovesForWhiteKingWhen_EasternPathIsThreatened()
        {
#line 584
this.FindMovesShouldNOTFindCastleMovesForWhiteKingWhen("eastern path is threatened", "D4", "D4", "", "", "", "BR", "", "E1-C1", "E1-G1", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should NOT find castle moves for white king when: western rook has mov" +
            "ed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "western rook has moved")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "western rook has moved")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistorySource", "A1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistoryDestination", "D1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:B3", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:C3", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:D1", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:F8", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:G1", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoves", "E1-G1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:NonExpectedMoves", "E1-C1")]
        public virtual void FindMovesShouldNOTFindCastleMovesForWhiteKingWhen_WesternRookHasMoved()
        {
#line 584
this.FindMovesShouldNOTFindCastleMovesForWhiteKingWhen("western rook has moved", "A1", "D1", "", "", "", "", "", "E1-G1", "E1-C1", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should NOT find castle moves for white king when: western path blocked" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "western path blocked")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "western path blocked")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistorySource", "D4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistoryDestination", "D4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:B3", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:C3", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:D1", "WQ")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:F8", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:G1", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoves", "E1-G1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:NonExpectedMoves", "E1-C1")]
        public virtual void FindMovesShouldNOTFindCastleMovesForWhiteKingWhen_WesternPathBlocked()
        {
#line 584
this.FindMovesShouldNOTFindCastleMovesForWhiteKingWhen("western path blocked", "D4", "D4", "", "", "WQ", "", "", "E1-G1", "E1-C1", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should NOT find castle moves for white king when: western path is thre" +
            "atened")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "western path is threatened")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "western path is threatened")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistorySource", "D4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistoryDestination", "D4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:B3", "BB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:C3", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:D1", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:F8", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:G1", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoves", "E1-G1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:NonExpectedMoves", "E1-C1")]
        public virtual void FindMovesShouldNOTFindCastleMovesForWhiteKingWhen_WesternPathIsThreatened()
        {
#line 584
this.FindMovesShouldNOTFindCastleMovesForWhiteKingWhen("western path is threatened", "D4", "D4", "BB", "", "", "", "", "E1-G1", "E1-C1", ((string[])(null)));
#line hidden
        }
        
        public virtual void FindMovesShouldNOTFindCastleMovesForBlackKingWhen(string testName, string moveHistorySource, string moveHistoryDestination, string b6, string c6, string d8, string f1, string g8, string expectedMoves, string nonExpectedMoves, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should NOT find castle moves for black king when", exampleTags);
#line 613
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table46.AddRow(new string[] {
                        "BR",
                        "",
                        "",
                        string.Format("{0}", d8),
                        "BK",
                        "",
                        string.Format("{0}", g8),
                        "BR"});
            table46.AddRow(new string[] {
                        "BP",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BP"});
            table46.AddRow(new string[] {
                        "",
                        string.Format("{0}", b6),
                        string.Format("{0}", c6),
                        "",
                        "",
                        "",
                        "",
                        ""});
            table46.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table46.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table46.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table46.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table46.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "WK",
                        string.Format("{0}", f1),
                        "",
                        ""});
#line 614
 testRunner.Given("I start a new game in the following state", ((string)(null)), table46, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Result"});
            table47.AddRow(new string[] {
                        string.Format("{0}", moveHistorySource),
                        string.Format("{0}", moveHistoryDestination),
                        "None"});
#line 624
 testRunner.Given("I have the following move history", ((string)(null)), table47, "Given ");
#line 627
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 628
 testRunner.Then(string.Format("I expect the moves found should NOT contain \'{0}\'", nonExpectedMoves), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 629
 testRunner.Then(string.Format("I expect the moves found should contain \'{0}\'", expectedMoves), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should NOT find castle moves for black king when: king has moved")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "king has moved")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "king has moved")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistorySource", "E8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistoryDestination", "F8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:B6", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:C6", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:D8", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:F1", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:G8", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoves", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:NonExpectedMoves", "E8-G8,E8-C8")]
        public virtual void FindMovesShouldNOTFindCastleMovesForBlackKingWhen_KingHasMoved()
        {
#line 613
this.FindMovesShouldNOTFindCastleMovesForBlackKingWhen("king has moved", "E8", "F8", "", "", "", "", "", "", "E8-G8,E8-C8", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should NOT find castle moves for black king when: king is in check")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "king is in check")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "king is in check")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistorySource", "D4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistoryDestination", "D4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:B6", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:C6", "WB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:D8", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:F1", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:G8", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoves", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:NonExpectedMoves", "E8-G8,E8-C8")]
        public virtual void FindMovesShouldNOTFindCastleMovesForBlackKingWhen_KingIsInCheck()
        {
#line 613
this.FindMovesShouldNOTFindCastleMovesForBlackKingWhen("king is in check", "D4", "D4", "", "WB", "", "", "", "", "E8-G8,E8-C8", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should NOT find castle moves for black king when: eastern rook has mov" +
            "ed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "eastern rook has moved")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "eastern rook has moved")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistorySource", "H8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistoryDestination", "H3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:B6", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:C6", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:D8", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:F1", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:G8", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoves", "E8-C8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:NonExpectedMoves", "E8-G8")]
        public virtual void FindMovesShouldNOTFindCastleMovesForBlackKingWhen_EasternRookHasMoved()
        {
#line 613
this.FindMovesShouldNOTFindCastleMovesForBlackKingWhen("eastern rook has moved", "H8", "H3", "", "", "", "", "", "E8-C8", "E8-G8", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should NOT find castle moves for black king when: eastern path blocked" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "eastern path blocked")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "eastern path blocked")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistorySource", "D4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistoryDestination", "D4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:B6", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:C6", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:D8", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:F1", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:G8", "BN")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoves", "E8-C8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:NonExpectedMoves", "E8-G8")]
        public virtual void FindMovesShouldNOTFindCastleMovesForBlackKingWhen_EasternPathBlocked()
        {
#line 613
this.FindMovesShouldNOTFindCastleMovesForBlackKingWhen("eastern path blocked", "D4", "D4", "", "", "", "", "BN", "E8-C8", "E8-G8", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should NOT find castle moves for black king when: eastern path is thre" +
            "atened")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "eastern path is threatened")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "eastern path is threatened")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistorySource", "D4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistoryDestination", "D4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:B6", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:C6", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:D8", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:F1", "WR")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:G8", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoves", "E8-C8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:NonExpectedMoves", "E8-G8")]
        public virtual void FindMovesShouldNOTFindCastleMovesForBlackKingWhen_EasternPathIsThreatened()
        {
#line 613
this.FindMovesShouldNOTFindCastleMovesForBlackKingWhen("eastern path is threatened", "D4", "D4", "", "", "", "WR", "", "E8-C8", "E8-G8", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should NOT find castle moves for black king when: western rook has mov" +
            "ed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "western rook has moved")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "western rook has moved")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistorySource", "A8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistoryDestination", "D8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:B6", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:C6", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:D8", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:F1", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:G8", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoves", "E8-G8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:NonExpectedMoves", "E8-C8")]
        public virtual void FindMovesShouldNOTFindCastleMovesForBlackKingWhen_WesternRookHasMoved()
        {
#line 613
this.FindMovesShouldNOTFindCastleMovesForBlackKingWhen("western rook has moved", "A8", "D8", "", "", "", "", "", "E8-G8", "E8-C8", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should NOT find castle moves for black king when: western path blocked" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "western path blocked")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "western path blocked")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistorySource", "D4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistoryDestination", "D4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:B6", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:C6", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:D8", "BQ")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:F1", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:G8", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoves", "E8-G8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:NonExpectedMoves", "E8-C8")]
        public virtual void FindMovesShouldNOTFindCastleMovesForBlackKingWhen_WesternPathBlocked()
        {
#line 613
this.FindMovesShouldNOTFindCastleMovesForBlackKingWhen("western path blocked", "D4", "D4", "", "", "BQ", "", "", "E8-G8", "E8-C8", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should NOT find castle moves for black king when: western path is thre" +
            "atened")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "western path is threatened")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestName", "western path is threatened")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistorySource", "D4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:MoveHistoryDestination", "D4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:B6", "WB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:C6", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:D8", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:F1", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:G8", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoves", "E8-G8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:NonExpectedMoves", "E8-C8")]
        public virtual void FindMovesShouldNOTFindCastleMovesForBlackKingWhen_WesternPathIsThreatened()
        {
#line 613
this.FindMovesShouldNOTFindCastleMovesForBlackKingWhen("western path is threatened", "D4", "D4", "WB", "", "", "", "", "E8-G8", "E8-C8", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for pinned white pawns")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForPinnedWhitePawns()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for pinned white pawns", ((string[])(null)));
#line 646
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table48.AddRow(new string[] {
                        "BB",
                        "",
                        "",
                        "BR",
                        "",
                        "",
                        "BB",
                        ""});
            table48.AddRow(new string[] {
                        "",
                        "WP",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table48.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "WP",
                        "WP",
                        "",
                        "",
                        ""});
            table48.AddRow(new string[] {
                        "BN",
                        "BR",
                        "WP",
                        "WK",
                        "",
                        "WP",
                        "",
                        "BR"});
            table48.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table48.AddRow(new string[] {
                        "",
                        "WP",
                        "BR",
                        "",
                        "",
                        "WP",
                        "",
                        ""});
            table48.AddRow(new string[] {
                        "BB",
                        "",
                        "",
                        "WP",
                        "",
                        "",
                        "BB",
                        ""});
            table48.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "BR",
                        "",
                        "",
                        "",
                        "BK"});
#line 647
 testRunner.Given("I start a new game in the following state", ((string)(null)), table48, "Given ");
#line 657
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table49.AddRow(new string[] {
                        "D5",
                        "E5"});
            table49.AddRow(new string[] {
                        "D5",
                        "E4"});
            table49.AddRow(new string[] {
                        "D5",
                        "D4"});
            table49.AddRow(new string[] {
                        "B7",
                        "A8"});
            table49.AddRow(new string[] {
                        "D6",
                        "D7"});
            table49.AddRow(new string[] {
                        "D2",
                        "D3"});
            table49.AddRow(new string[] {
                        "D2",
                        "D4"});
#line 658
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table49, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for pinned black pawns")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForPinnedBlackPawns()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for pinned black pawns", ((string[])(null)));
#line 670
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table50.AddRow(new string[] {
                        "WB",
                        "",
                        "",
                        "WR",
                        "",
                        "",
                        "WB",
                        ""});
            table50.AddRow(new string[] {
                        "",
                        "BP",
                        "",
                        "BP",
                        "",
                        "",
                        "",
                        ""});
            table50.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BP",
                        "",
                        "",
                        ""});
            table50.AddRow(new string[] {
                        "WN",
                        "WR",
                        "BP",
                        "BK",
                        "",
                        "BP",
                        "",
                        "WR"});
            table50.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BP",
                        "",
                        "",
                        ""});
            table50.AddRow(new string[] {
                        "",
                        "BP",
                        "",
                        "BP",
                        "",
                        "",
                        "",
                        ""});
            table50.AddRow(new string[] {
                        "WB",
                        "",
                        "",
                        "",
                        "WP",
                        "",
                        "WB",
                        ""});
            table50.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "WR",
                        "",
                        "",
                        "",
                        "WK"});
#line 671
 testRunner.Given("I start a new game in the following state", ((string)(null)), table50, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Result"});
            table51.AddRow(new string[] {
                        "A1",
                        "A1",
                        "None"});
#line 681
 testRunner.Given("I have the following move history", ((string)(null)), table51, "Given ");
#line 684
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table52.AddRow(new string[] {
                        "D5",
                        "D6"});
            table52.AddRow(new string[] {
                        "D5",
                        "E5"});
            table52.AddRow(new string[] {
                        "D5",
                        "D4"});
            table52.AddRow(new string[] {
                        "D7",
                        "D6"});
            table52.AddRow(new string[] {
                        "D3",
                        "D2"});
            table52.AddRow(new string[] {
                        "B3",
                        "A2"});
#line 685
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table52, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for pinned white knights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForPinnedWhiteKnights()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for pinned white knights", ((string[])(null)));
#line 696
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table53.AddRow(new string[] {
                        "BB",
                        "",
                        "",
                        "BR",
                        "",
                        "",
                        "BB",
                        ""});
            table53.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table53.AddRow(new string[] {
                        "",
                        "",
                        "WN",
                        "WN",
                        "WN",
                        "",
                        "",
                        ""});
            table53.AddRow(new string[] {
                        "BR",
                        "",
                        "WN",
                        "WK",
                        "WN",
                        "",
                        "BR",
                        ""});
            table53.AddRow(new string[] {
                        "",
                        "",
                        "WN",
                        "WN",
                        "WN",
                        "",
                        "",
                        ""});
            table53.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table53.AddRow(new string[] {
                        "BB",
                        "",
                        "",
                        "BR",
                        "",
                        "",
                        "BB",
                        ""});
            table53.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BK"});
#line 697
 testRunner.Given("I start a new game in the following state", ((string)(null)), table53, "Given ");
#line 707
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 708
 testRunner.Then("I expect no moves were found", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for pinned black knights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForPinnedBlackKnights()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for pinned black knights", ((string[])(null)));
#line 710
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table54.AddRow(new string[] {
                        "WB",
                        "",
                        "",
                        "WR",
                        "",
                        "",
                        "WB",
                        ""});
            table54.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table54.AddRow(new string[] {
                        "",
                        "",
                        "BN",
                        "BN",
                        "BN",
                        "",
                        "",
                        ""});
            table54.AddRow(new string[] {
                        "WR",
                        "",
                        "BN",
                        "BK",
                        "BN",
                        "",
                        "WR",
                        ""});
            table54.AddRow(new string[] {
                        "",
                        "",
                        "BN",
                        "BN",
                        "BN",
                        "",
                        "",
                        ""});
            table54.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table54.AddRow(new string[] {
                        "WB",
                        "",
                        "",
                        "WR",
                        "",
                        "",
                        "WB",
                        ""});
            table54.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 711
 testRunner.Given("I start a new game in the following state", ((string)(null)), table54, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Result"});
            table55.AddRow(new string[] {
                        "A1",
                        "A1",
                        "None"});
#line 721
 testRunner.Given("I have the following move history", ((string)(null)), table55, "Given ");
#line 724
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 725
 testRunner.Then("I expect no moves were found", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for pinned white bishops")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForPinnedWhiteBishops()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for pinned white bishops", ((string[])(null)));
#line 727
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table56.AddRow(new string[] {
                        "BB",
                        "",
                        "",
                        "BR",
                        "",
                        "",
                        "BB",
                        ""});
            table56.AddRow(new string[] {
                        "",
                        "WB",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table56.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "WB",
                        "WB",
                        "",
                        "",
                        ""});
            table56.AddRow(new string[] {
                        "BR",
                        "",
                        "WB",
                        "WK",
                        "WB",
                        "",
                        "BR",
                        ""});
            table56.AddRow(new string[] {
                        "",
                        "",
                        "WB",
                        "WB",
                        "WB",
                        "",
                        "",
                        ""});
            table56.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table56.AddRow(new string[] {
                        "BB",
                        "",
                        "",
                        "BR",
                        "",
                        "",
                        "BB",
                        ""});
            table56.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BK"});
#line 728
 testRunner.Given("I start a new game in the following state", ((string)(null)), table56, "Given ");
#line 738
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table57.AddRow(new string[] {
                        "B7",
                        "A8"});
            table57.AddRow(new string[] {
                        "B7",
                        "C6"});
            table57.AddRow(new string[] {
                        "C4",
                        "B3"});
            table57.AddRow(new string[] {
                        "C4",
                        "A2"});
            table57.AddRow(new string[] {
                        "D5",
                        "C6"});
            table57.AddRow(new string[] {
                        "E4",
                        "F3"});
            table57.AddRow(new string[] {
                        "E4",
                        "G2"});
            table57.AddRow(new string[] {
                        "E6",
                        "F7"});
            table57.AddRow(new string[] {
                        "E6",
                        "G8"});
#line 739
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table57, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for pinned black bishops")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForPinnedBlackBishops()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for pinned black bishops", ((string[])(null)));
#line 751
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table58.AddRow(new string[] {
                        "WB",
                        "",
                        "",
                        "WR",
                        "",
                        "",
                        "WB",
                        ""});
            table58.AddRow(new string[] {
                        "",
                        "BB",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table58.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "BB",
                        "BB",
                        "",
                        "",
                        ""});
            table58.AddRow(new string[] {
                        "WR",
                        "",
                        "BB",
                        "BK",
                        "BB",
                        "",
                        "WR",
                        ""});
            table58.AddRow(new string[] {
                        "",
                        "",
                        "BB",
                        "BB",
                        "BB",
                        "",
                        "",
                        ""});
            table58.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table58.AddRow(new string[] {
                        "WB",
                        "",
                        "",
                        "WR",
                        "",
                        "",
                        "WB",
                        ""});
            table58.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 752
 testRunner.Given("I start a new game in the following state", ((string)(null)), table58, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Result"});
            table59.AddRow(new string[] {
                        "A1",
                        "A1",
                        "None"});
#line 762
 testRunner.Given("I have the following move history", ((string)(null)), table59, "Given ");
#line 765
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table60.AddRow(new string[] {
                        "B7",
                        "A8"});
            table60.AddRow(new string[] {
                        "B7",
                        "C6"});
            table60.AddRow(new string[] {
                        "C4",
                        "B3"});
            table60.AddRow(new string[] {
                        "C4",
                        "A2"});
            table60.AddRow(new string[] {
                        "D5",
                        "C6"});
            table60.AddRow(new string[] {
                        "E4",
                        "F3"});
            table60.AddRow(new string[] {
                        "E4",
                        "G2"});
            table60.AddRow(new string[] {
                        "E6",
                        "F7"});
            table60.AddRow(new string[] {
                        "E6",
                        "G8"});
#line 766
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table60, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for pinned white rooks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForPinnedWhiteRooks()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for pinned white rooks", ((string[])(null)));
#line 778
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table61.AddRow(new string[] {
                        "BB",
                        "",
                        "",
                        "BR",
                        "",
                        "",
                        "BB",
                        ""});
            table61.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table61.AddRow(new string[] {
                        "",
                        "",
                        "WR",
                        "WR",
                        "WR",
                        "",
                        "",
                        ""});
            table61.AddRow(new string[] {
                        "BR",
                        "",
                        "WR",
                        "WK",
                        "WR",
                        "",
                        "BR",
                        ""});
            table61.AddRow(new string[] {
                        "",
                        "",
                        "WR",
                        "",
                        "WR",
                        "",
                        "",
                        ""});
            table61.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "WR",
                        "",
                        "",
                        "",
                        ""});
            table61.AddRow(new string[] {
                        "BB",
                        "",
                        "",
                        "BR",
                        "",
                        "",
                        "BB",
                        ""});
            table61.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BK"});
#line 779
 testRunner.Given("I start a new game in the following state", ((string)(null)), table61, "Given ");
#line 789
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table62.AddRow(new string[] {
                        "D5",
                        "D4"});
            table62.AddRow(new string[] {
                        "D6",
                        "D7"});
            table62.AddRow(new string[] {
                        "D6",
                        "D8"});
            table62.AddRow(new string[] {
                        "E5",
                        "F5"});
            table62.AddRow(new string[] {
                        "E5",
                        "G5"});
            table62.AddRow(new string[] {
                        "D3",
                        "D4"});
            table62.AddRow(new string[] {
                        "D3",
                        "D2"});
            table62.AddRow(new string[] {
                        "C5",
                        "B5"});
            table62.AddRow(new string[] {
                        "C5",
                        "A5"});
#line 790
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table62, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for pinned black rooks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForPinnedBlackRooks()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for pinned black rooks", ((string[])(null)));
#line 802
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table63.AddRow(new string[] {
                        "WB",
                        "",
                        "",
                        "WR",
                        "",
                        "",
                        "WB",
                        ""});
            table63.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table63.AddRow(new string[] {
                        "",
                        "",
                        "BR",
                        "BR",
                        "BR",
                        "",
                        "",
                        ""});
            table63.AddRow(new string[] {
                        "WR",
                        "",
                        "BR",
                        "BK",
                        "BR",
                        "",
                        "WR",
                        ""});
            table63.AddRow(new string[] {
                        "",
                        "",
                        "BR",
                        "",
                        "BR",
                        "",
                        "",
                        ""});
            table63.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "BR",
                        "",
                        "",
                        "",
                        ""});
            table63.AddRow(new string[] {
                        "WB",
                        "",
                        "",
                        "WR",
                        "",
                        "",
                        "WB",
                        ""});
            table63.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 803
 testRunner.Given("I start a new game in the following state", ((string)(null)), table63, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Result"});
            table64.AddRow(new string[] {
                        "A1",
                        "A1",
                        "None"});
#line 813
 testRunner.Given("I have the following move history", ((string)(null)), table64, "Given ");
#line 816
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table65.AddRow(new string[] {
                        "D5",
                        "D4"});
            table65.AddRow(new string[] {
                        "D6",
                        "D7"});
            table65.AddRow(new string[] {
                        "D6",
                        "D8"});
            table65.AddRow(new string[] {
                        "E5",
                        "F5"});
            table65.AddRow(new string[] {
                        "E5",
                        "G5"});
            table65.AddRow(new string[] {
                        "D3",
                        "D4"});
            table65.AddRow(new string[] {
                        "D3",
                        "D2"});
            table65.AddRow(new string[] {
                        "C5",
                        "B5"});
            table65.AddRow(new string[] {
                        "C5",
                        "A5"});
#line 817
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table65, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for pinned white queens")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForPinnedWhiteQueens()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for pinned white queens", ((string[])(null)));
#line 829
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table66.AddRow(new string[] {
                        "BB",
                        "",
                        "",
                        "BR",
                        "",
                        "",
                        "BB",
                        ""});
            table66.AddRow(new string[] {
                        "",
                        "WQ",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table66.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "WQ",
                        "WQ",
                        "",
                        "",
                        ""});
            table66.AddRow(new string[] {
                        "BR",
                        "",
                        "WQ",
                        "WK",
                        "WQ",
                        "",
                        "BR",
                        ""});
            table66.AddRow(new string[] {
                        "",
                        "",
                        "WQ",
                        "",
                        "WQ",
                        "",
                        "",
                        ""});
            table66.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "WQ",
                        "",
                        "",
                        "",
                        ""});
            table66.AddRow(new string[] {
                        "BB",
                        "",
                        "",
                        "BR",
                        "",
                        "",
                        "BB",
                        ""});
            table66.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BK"});
#line 830
 testRunner.Given("I start a new game in the following state", ((string)(null)), table66, "Given ");
#line 840
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table67.AddRow(new string[] {
                        "D5",
                        "D4"});
            table67.AddRow(new string[] {
                        "D5",
                        "C6"});
            table67.AddRow(new string[] {
                        "D6",
                        "D7"});
            table67.AddRow(new string[] {
                        "D6",
                        "D8"});
            table67.AddRow(new string[] {
                        "E5",
                        "F5"});
            table67.AddRow(new string[] {
                        "E5",
                        "G5"});
            table67.AddRow(new string[] {
                        "D3",
                        "D4"});
            table67.AddRow(new string[] {
                        "D3",
                        "D2"});
            table67.AddRow(new string[] {
                        "C5",
                        "B5"});
            table67.AddRow(new string[] {
                        "C5",
                        "A5"});
            table67.AddRow(new string[] {
                        "B7",
                        "A8"});
            table67.AddRow(new string[] {
                        "B7",
                        "C6"});
            table67.AddRow(new string[] {
                        "C4",
                        "B3"});
            table67.AddRow(new string[] {
                        "C4",
                        "A2"});
            table67.AddRow(new string[] {
                        "E4",
                        "F3"});
            table67.AddRow(new string[] {
                        "E4",
                        "G2"});
            table67.AddRow(new string[] {
                        "E6",
                        "F7"});
            table67.AddRow(new string[] {
                        "E6",
                        "G8"});
#line 841
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table67, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for pinned black queens")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForPinnedBlackQueens()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for pinned black queens", ((string[])(null)));
#line 862
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table68.AddRow(new string[] {
                        "WB",
                        "",
                        "",
                        "WR",
                        "",
                        "",
                        "WB",
                        ""});
            table68.AddRow(new string[] {
                        "",
                        "BQ",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table68.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "BQ",
                        "BQ",
                        "",
                        "",
                        ""});
            table68.AddRow(new string[] {
                        "WR",
                        "",
                        "BQ",
                        "BK",
                        "BQ",
                        "",
                        "WR",
                        ""});
            table68.AddRow(new string[] {
                        "",
                        "",
                        "BQ",
                        "",
                        "BQ",
                        "",
                        "",
                        ""});
            table68.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "BQ",
                        "",
                        "",
                        "",
                        ""});
            table68.AddRow(new string[] {
                        "WB",
                        "",
                        "",
                        "WR",
                        "",
                        "",
                        "WB",
                        ""});
            table68.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 863
 testRunner.Given("I start a new game in the following state", ((string)(null)), table68, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Result"});
            table69.AddRow(new string[] {
                        "A1",
                        "A1",
                        "None"});
#line 873
 testRunner.Given("I have the following move history", ((string)(null)), table69, "Given ");
#line 876
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table70.AddRow(new string[] {
                        "D5",
                        "D4"});
            table70.AddRow(new string[] {
                        "D5",
                        "C6"});
            table70.AddRow(new string[] {
                        "D6",
                        "D7"});
            table70.AddRow(new string[] {
                        "D6",
                        "D8"});
            table70.AddRow(new string[] {
                        "E5",
                        "F5"});
            table70.AddRow(new string[] {
                        "E5",
                        "G5"});
            table70.AddRow(new string[] {
                        "D3",
                        "D4"});
            table70.AddRow(new string[] {
                        "D3",
                        "D2"});
            table70.AddRow(new string[] {
                        "C5",
                        "B5"});
            table70.AddRow(new string[] {
                        "C5",
                        "A5"});
            table70.AddRow(new string[] {
                        "B7",
                        "A8"});
            table70.AddRow(new string[] {
                        "B7",
                        "C6"});
            table70.AddRow(new string[] {
                        "C4",
                        "B3"});
            table70.AddRow(new string[] {
                        "C4",
                        "A2"});
            table70.AddRow(new string[] {
                        "E4",
                        "F3"});
            table70.AddRow(new string[] {
                        "E4",
                        "G2"});
            table70.AddRow(new string[] {
                        "E6",
                        "F7"});
            table70.AddRow(new string[] {
                        "E6",
                        "G8"});
#line 877
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table70, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for double checked white king")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForDoubleCheckedWhiteKing()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for double checked white king", ((string[])(null)));
#line 903
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table71 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table71.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WQ",
                        ""});
            table71.AddRow(new string[] {
                        "",
                        "",
                        "BN",
                        "",
                        "",
                        "BB",
                        "",
                        ""});
            table71.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BR"});
            table71.AddRow(new string[] {
                        "",
                        "WR",
                        "",
                        "WK",
                        "",
                        "",
                        "",
                        ""});
            table71.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WR",
                        "",
                        ""});
            table71.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BN",
                        "",
                        ""});
            table71.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table71.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BK"});
#line 904
 testRunner.Given("I start a new game in the following state", ((string)(null)), table71, "Given ");
#line 914
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table72 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table72.AddRow(new string[] {
                        "D5",
                        "C5"});
            table72.AddRow(new string[] {
                        "D5",
                        "E4"});
#line 915
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table72, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for double checked black king")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForDoubleCheckedBlackKing()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for double checked black king", ((string[])(null)));
#line 920
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table73 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table73.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table73.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table73.AddRow(new string[] {
                        "",
                        "",
                        "WR",
                        "",
                        "BK",
                        "",
                        "",
                        ""});
            table73.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table73.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table73.AddRow(new string[] {
                        "",
                        "WB",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table73.AddRow(new string[] {
                        "BQ",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table73.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK"});
#line 921
 testRunner.Given("I start a new game in the following state", ((string)(null)), table73, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table74 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Result"});
            table74.AddRow(new string[] {
                        "C1",
                        "C1",
                        "None"});
#line 931
 testRunner.Given("I have the following move history", ((string)(null)), table74, "Given ");
#line 934
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table75 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table75.AddRow(new string[] {
                        "E6",
                        "E7"});
            table75.AddRow(new string[] {
                        "E6",
                        "E5"});
            table75.AddRow(new string[] {
                        "E6",
                        "D7"});
            table75.AddRow(new string[] {
                        "E6",
                        "F5"});
#line 935
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table75, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for white king checked by pawn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForWhiteKingCheckedByPawn()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for white king checked by pawn", ((string[])(null)));
#line 942
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table76.AddRow(new string[] {
                        "",
                        "WR",
                        "",
                        "WN",
                        "WB",
                        "",
                        "",
                        ""});
            table76.AddRow(new string[] {
                        "",
                        "BP",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table76.AddRow(new string[] {
                        "WQ",
                        "",
                        "BP",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table76.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "WK",
                        "",
                        "",
                        "",
                        ""});
            table76.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table76.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table76.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table76.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BK"});
#line 943
 testRunner.Given("I start a new game in the following state", ((string)(null)), table76, "Given ");
#line 953
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table77.AddRow(new string[] {
                        "A6",
                        "C6"});
            table77.AddRow(new string[] {
                        "D5",
                        "D6"});
            table77.AddRow(new string[] {
                        "D5",
                        "D4"});
            table77.AddRow(new string[] {
                        "D5",
                        "E5"});
            table77.AddRow(new string[] {
                        "D5",
                        "C5"});
            table77.AddRow(new string[] {
                        "D5",
                        "E6"});
            table77.AddRow(new string[] {
                        "D5",
                        "E4"});
            table77.AddRow(new string[] {
                        "D5",
                        "C4"});
            table77.AddRow(new string[] {
                        "D8",
                        "C6"});
            table77.AddRow(new string[] {
                        "E8",
                        "C6"});
#line 954
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table77, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for black king checked by pawn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForBlackKingCheckedByPawn()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for black king checked by pawn", ((string[])(null)));
#line 967
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table78 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table78.AddRow(new string[] {
                        "",
                        "",
                        "BQ",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table78.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table78.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table78.AddRow(new string[] {
                        "BB",
                        "",
                        "",
                        "",
                        "BP",
                        "",
                        "",
                        ""});
            table78.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "BK",
                        "BN",
                        "",
                        "",
                        ""});
            table78.AddRow(new string[] {
                        "",
                        "",
                        "WP",
                        "",
                        "",
                        "",
                        "",
                        "BR"});
            table78.AddRow(new string[] {
                        "",
                        "WP",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table78.AddRow(new string[] {
                        "",
                        "WK",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 968
 testRunner.Given("I start a new game in the following state", ((string)(null)), table78, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table79 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Result"});
            table79.AddRow(new string[] {
                        "C1",
                        "C1",
                        "None"});
#line 978
 testRunner.Given("I have the following move history", ((string)(null)), table79, "Given ");
#line 981
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table80 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table80.AddRow(new string[] {
                        "A5",
                        "C3"});
            table80.AddRow(new string[] {
                        "C8",
                        "C3"});
            table80.AddRow(new string[] {
                        "D4",
                        "D5"});
            table80.AddRow(new string[] {
                        "D4",
                        "D3"});
            table80.AddRow(new string[] {
                        "D4",
                        "C4"});
            table80.AddRow(new string[] {
                        "D4",
                        "C5"});
            table80.AddRow(new string[] {
                        "D4",
                        "E3"});
            table80.AddRow(new string[] {
                        "E4",
                        "C3"});
            table80.AddRow(new string[] {
                        "H3",
                        "C3"});
#line 982
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table80, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for white king checked by knight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForWhiteKingCheckedByKnight()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for white king checked by knight", ((string[])(null)));
#line 994
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table81 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table81.AddRow(new string[] {
                        "",
                        "WQ",
                        "",
                        "",
                        "",
                        "",
                        "WB",
                        "BK"});
            table81.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BP"});
            table81.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table81.AddRow(new string[] {
                        "WN",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table81.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table81.AddRow(new string[] {
                        "",
                        "BN",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WR"});
            table81.AddRow(new string[] {
                        "WP",
                        "WP",
                        "WP",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table81.AddRow(new string[] {
                        "WK",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 995
 testRunner.Given("I start a new game in the following state", ((string)(null)), table81, "Given ");
#line 1005
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table82 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table82.AddRow(new string[] {
                        "A1",
                        "B1"});
            table82.AddRow(new string[] {
                        "A2",
                        "B3"});
            table82.AddRow(new string[] {
                        "A5",
                        "B3"});
            table82.AddRow(new string[] {
                        "B8",
                        "B3"});
            table82.AddRow(new string[] {
                        "C2",
                        "B3"});
            table82.AddRow(new string[] {
                        "G8",
                        "B3"});
            table82.AddRow(new string[] {
                        "H3",
                        "B3"});
#line 1006
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table82, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for black king checked by knight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void FindMovesShouldFindAllMovesForBlackKingCheckedByKnight()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for black king checked by knight", ((string[])(null)));
#line 1016
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table83 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table83.AddRow(new string[] {
                        "BK",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table83.AddRow(new string[] {
                        "BP",
                        "BP",
                        "BP",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table83.AddRow(new string[] {
                        "",
                        "WN",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BR"});
            table83.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table83.AddRow(new string[] {
                        "BN",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table83.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table83.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WP"});
            table83.AddRow(new string[] {
                        "",
                        "BQ",
                        "",
                        "",
                        "",
                        "",
                        "BB",
                        "WK"});
#line 1017
 testRunner.Given("I start a new game in the following state", ((string)(null)), table83, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table84 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Result"});
            table84.AddRow(new string[] {
                        "C1",
                        "C1",
                        "None"});
#line 1027
 testRunner.Given("I have the following move history", ((string)(null)), table84, "Given ");
#line 1030
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table85 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table85.AddRow(new string[] {
                        "A4",
                        "B6"});
            table85.AddRow(new string[] {
                        "A7",
                        "B6"});
            table85.AddRow(new string[] {
                        "A8",
                        "B8"});
            table85.AddRow(new string[] {
                        "B1",
                        "B6"});
            table85.AddRow(new string[] {
                        "C7",
                        "B6"});
            table85.AddRow(new string[] {
                        "G1",
                        "B6"});
            table85.AddRow(new string[] {
                        "H6",
                        "B6"});
#line 1031
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table85, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void FindMovesShouldFindAllMovesForWhiteKingCheckedBy(string testName, string h8, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for white king checked by", exampleTags);
#line 1041
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table86 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table86.AddRow(new string[] {
                        "BK",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        string.Format("{0}", h8)});
            table86.AddRow(new string[] {
                        "BP",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table86.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table86.AddRow(new string[] {
                        "",
                        "WR",
                        "",
                        "WN",
                        "",
                        "",
                        "",
                        ""});
            table86.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WQ"});
            table86.AddRow(new string[] {
                        "WB",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table86.AddRow(new string[] {
                        "WP",
                        "",
                        "WP",
                        "WP",
                        "",
                        "",
                        "",
                        ""});
            table86.AddRow(new string[] {
                        "WK",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 1042
 testRunner.Given("I start a new game in the following state", ((string)(null)), table86, "Given ");
#line 1052
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table87 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table87.AddRow(new string[] {
                        "A1",
                        "B1"});
            table87.AddRow(new string[] {
                        "C2",
                        "C3"});
            table87.AddRow(new string[] {
                        "D2",
                        "D4"});
            table87.AddRow(new string[] {
                        "D5",
                        "C3"});
            table87.AddRow(new string[] {
                        "D5",
                        "F6"});
            table87.AddRow(new string[] {
                        "A3",
                        "B2"});
            table87.AddRow(new string[] {
                        "B5",
                        "B2"});
            table87.AddRow(new string[] {
                        "H4",
                        "D4"});
            table87.AddRow(new string[] {
                        "H4",
                        "H8"});
            table87.AddRow(new string[] {
                        "H4",
                        "F6"});
#line 1053
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table87, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for white king checked by: Bishop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Bishop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test name", "Bishop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:H8", "BB")]
        public virtual void FindMovesShouldFindAllMovesForWhiteKingCheckedBy_Bishop()
        {
#line 1041
this.FindMovesShouldFindAllMovesForWhiteKingCheckedBy("Bishop", "BB", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for white king checked by: Queen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Queen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test name", "Queen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:H8", "BQ")]
        public virtual void FindMovesShouldFindAllMovesForWhiteKingCheckedBy_Queen()
        {
#line 1041
this.FindMovesShouldFindAllMovesForWhiteKingCheckedBy("Queen", "BQ", ((string[])(null)));
#line hidden
        }
        
        public virtual void FindMovesShouldFindAllMovesForBlackKingCheckedBy(string testName, string h1, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find moves should find all moves for black king checked by", exampleTags);
#line 1070
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table88 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table88.AddRow(new string[] {
                        "BK",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table88.AddRow(new string[] {
                        "BP",
                        "",
                        "BP",
                        "BP",
                        "",
                        "",
                        "",
                        ""});
            table88.AddRow(new string[] {
                        "BB",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table88.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BQ"});
            table88.AddRow(new string[] {
                        "",
                        "BR",
                        "",
                        "BN",
                        "",
                        "",
                        "",
                        ""});
            table88.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table88.AddRow(new string[] {
                        "WP",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table88.AddRow(new string[] {
                        "WK",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        string.Format("{0}", h1)});
#line 1071
 testRunner.Given("I start a new game in the following state", ((string)(null)), table88, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table89 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Result"});
            table89.AddRow(new string[] {
                        "C1",
                        "C1",
                        "None"});
#line 1081
 testRunner.Given("I have the following move history", ((string)(null)), table89, "Given ");
#line 1084
 testRunner.When("I find moves for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table90 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table90.AddRow(new string[] {
                        "A8",
                        "B8"});
            table90.AddRow(new string[] {
                        "A6",
                        "B7"});
            table90.AddRow(new string[] {
                        "B4",
                        "B7"});
            table90.AddRow(new string[] {
                        "C7",
                        "C6"});
            table90.AddRow(new string[] {
                        "D4",
                        "C6"});
            table90.AddRow(new string[] {
                        "D4",
                        "F3"});
            table90.AddRow(new string[] {
                        "D7",
                        "D5"});
            table90.AddRow(new string[] {
                        "H5",
                        "D5"});
            table90.AddRow(new string[] {
                        "H5",
                        "H1"});
            table90.AddRow(new string[] {
                        "H5",
                        "F3"});
#line 1085
 testRunner.Then("I expect the moves found should contain", ((string)(null)), table90, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for black king checked by: Bishop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Bishop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test name", "Bishop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:H1", "WB")]
        public virtual void FindMovesShouldFindAllMovesForBlackKingCheckedBy_Bishop()
        {
#line 1070
this.FindMovesShouldFindAllMovesForBlackKingCheckedBy("Bishop", "WB", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find moves should find all moves for black king checked by: Queen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Queen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test name", "Queen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:H1", "WQ")]
        public virtual void FindMovesShouldFindAllMovesForBlackKingCheckedBy_Queen()
        {
#line 1070
this.FindMovesShouldFindAllMovesForBlackKingCheckedBy("Queen", "WQ", ((string[])(null)));
#line hidden
        }
        
        public virtual void MakeMoveShouldNotAllowAMoveIfTheGamestateIsIn(string gameState, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make move should not allow a move if the gamestate is in", exampleTags);
#line 1106
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line 1107
 testRunner.Given("I start a new game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1108
 testRunner.Given(string.Format("The game is in the following gamestate \'{0}\'", gameState), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1109
 testRunner.Given("I expect an exception to be thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table91 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table91.AddRow(new string[] {
                        "A2",
                        "A3"});
#line 1110
 testRunner.When("I make the following move", ((string)(null)), table91, "When ");
#line hidden
            TechTalk.SpecFlow.Table table92 = new TechTalk.SpecFlow.Table(new string[] {
                        "ErrorCode",
                        "Message"});
            table92.AddRow(new string[] {
                        "InvalidMoveGameOver",
                        "The move is not valid because the game is over."});
#line 1113
 testRunner.Then("I expect the following ChessException to be thrown", ((string)(null)), table92, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should not allow a move if the gamestate is in: WhiteWin")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "WhiteWin")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:GameState", "WhiteWin")]
        public virtual void MakeMoveShouldNotAllowAMoveIfTheGamestateIsIn_WhiteWin()
        {
#line 1106
this.MakeMoveShouldNotAllowAMoveIfTheGamestateIsIn("WhiteWin", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should not allow a move if the gamestate is in: BlackWin")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "BlackWin")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:GameState", "BlackWin")]
        public virtual void MakeMoveShouldNotAllowAMoveIfTheGamestateIsIn_BlackWin()
        {
#line 1106
this.MakeMoveShouldNotAllowAMoveIfTheGamestateIsIn("BlackWin", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should not allow a move if the gamestate is in: DrawStalemate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "DrawStalemate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:GameState", "DrawStalemate")]
        public virtual void MakeMoveShouldNotAllowAMoveIfTheGamestateIsIn_DrawStalemate()
        {
#line 1106
this.MakeMoveShouldNotAllowAMoveIfTheGamestateIsIn("DrawStalemate", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should not allow a move if the gamestate is in: DrawThreeFoldRepetition" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "DrawThreeFoldRepetition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:GameState", "DrawThreeFoldRepetition")]
        public virtual void MakeMoveShouldNotAllowAMoveIfTheGamestateIsIn_DrawThreeFoldRepetition()
        {
#line 1106
this.MakeMoveShouldNotAllowAMoveIfTheGamestateIsIn("DrawThreeFoldRepetition", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should not allow a move if the gamestate is in: DrawFiftyMoveRule")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "DrawFiftyMoveRule")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:GameState", "DrawFiftyMoveRule")]
        public virtual void MakeMoveShouldNotAllowAMoveIfTheGamestateIsIn_DrawFiftyMoveRule()
        {
#line 1106
this.MakeMoveShouldNotAllowAMoveIfTheGamestateIsIn("DrawFiftyMoveRule", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should not allow a move if the gamestate is in: DrawInDeadPosition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "DrawInDeadPosition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:GameState", "DrawInDeadPosition")]
        public virtual void MakeMoveShouldNotAllowAMoveIfTheGamestateIsIn_DrawInDeadPosition()
        {
#line 1106
this.MakeMoveShouldNotAllowAMoveIfTheGamestateIsIn("DrawInDeadPosition", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should not allow a move if the gamestate is in: DrawInsufficientMateria" +
            "l")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "DrawInsufficientMaterial")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:GameState", "DrawInsufficientMaterial")]
        public virtual void MakeMoveShouldNotAllowAMoveIfTheGamestateIsIn_DrawInsufficientMaterial()
        {
#line 1106
this.MakeMoveShouldNotAllowAMoveIfTheGamestateIsIn("DrawInsufficientMaterial", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should not allow a move if the move is illegal")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void MakeMoveShouldNotAllowAMoveIfTheMoveIsIllegal()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make move should not allow a move if the move is illegal", ((string[])(null)));
#line 1126
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table93 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table93.AddRow(new string[] {
                        "BR",
                        "BN",
                        "BB",
                        "BQ",
                        "BK",
                        "BB",
                        "BN",
                        "BR"});
            table93.AddRow(new string[] {
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP",
                        "BP"});
            table93.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table93.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table93.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table93.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table93.AddRow(new string[] {
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP",
                        "WP"});
            table93.AddRow(new string[] {
                        "WR",
                        "WN",
                        "WB",
                        "WQ",
                        "WK",
                        "WB",
                        "WN",
                        "WR"});
#line 1127
 testRunner.Given("I start a new game in the following state", ((string)(null)), table93, "Given ");
#line 1137
 testRunner.Given("I expect an exception to be thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table94 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination"});
            table94.AddRow(new string[] {
                        "A4",
                        "F3"});
#line 1138
 testRunner.When("I make the following move", ((string)(null)), table94, "When ");
#line hidden
            TechTalk.SpecFlow.Table table95 = new TechTalk.SpecFlow.Table(new string[] {
                        "ErrorCode",
                        "Message"});
            table95.AddRow(new string[] {
                        "IllegalMove",
                        "The move is not valid because it is not legal."});
#line 1141
 testRunner.Then("I expect the following ChessException to be thrown", ((string)(null)), table95, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should make moves for famous game Fischer V Spassky 1972")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void MakeMoveShouldMakeMovesForFamousGameFischerVSpassky1972()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make move should make moves for famous game Fischer V Spassky 1972", ((string[])(null)));
#line 1149
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line 1150
 testRunner.Given("I have a match factory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1151
 testRunner.When("I load the match \'fischer_spassky_1972.pgn\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1152
 testRunner.Then("I expect the gamestate to be \'InPlay\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table96 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Result"});
            table96.AddRow(new string[] {
                        "C2",
                        "C4",
                        "None"});
            table96.AddRow(new string[] {
                        "E7",
                        "E6",
                        "None"});
            table96.AddRow(new string[] {
                        "G1",
                        "F3",
                        "None"});
            table96.AddRow(new string[] {
                        "D7",
                        "D5",
                        "None"});
            table96.AddRow(new string[] {
                        "D2",
                        "D4",
                        "None"});
            table96.AddRow(new string[] {
                        "G8",
                        "F6",
                        "None"});
            table96.AddRow(new string[] {
                        "B1",
                        "C3",
                        "None"});
            table96.AddRow(new string[] {
                        "F8",
                        "E7",
                        "None"});
            table96.AddRow(new string[] {
                        "C1",
                        "G5",
                        "None"});
            table96.AddRow(new string[] {
                        "E8",
                        "G8",
                        "Castle"});
            table96.AddRow(new string[] {
                        "E2",
                        "E3",
                        "None"});
            table96.AddRow(new string[] {
                        "H7",
                        "H6",
                        "None"});
            table96.AddRow(new string[] {
                        "G5",
                        "H4",
                        "None"});
            table96.AddRow(new string[] {
                        "B7",
                        "B6",
                        "None"});
            table96.AddRow(new string[] {
                        "C4",
                        "D5",
                        "Capture"});
            table96.AddRow(new string[] {
                        "F6",
                        "D5",
                        "Capture"});
            table96.AddRow(new string[] {
                        "H4",
                        "E7",
                        "Capture"});
            table96.AddRow(new string[] {
                        "D8",
                        "E7",
                        "Capture"});
            table96.AddRow(new string[] {
                        "C3",
                        "D5",
                        "Capture"});
            table96.AddRow(new string[] {
                        "E6",
                        "D5",
                        "Capture"});
            table96.AddRow(new string[] {
                        "A1",
                        "C1",
                        "None"});
            table96.AddRow(new string[] {
                        "C8",
                        "E6",
                        "None"});
            table96.AddRow(new string[] {
                        "D1",
                        "A4",
                        "None"});
            table96.AddRow(new string[] {
                        "C7",
                        "C5",
                        "None"});
            table96.AddRow(new string[] {
                        "A4",
                        "A3",
                        "None"});
            table96.AddRow(new string[] {
                        "F8",
                        "C8",
                        "None"});
            table96.AddRow(new string[] {
                        "F1",
                        "B5",
                        "None"});
            table96.AddRow(new string[] {
                        "A7",
                        "A6",
                        "None"});
            table96.AddRow(new string[] {
                        "D4",
                        "C5",
                        "Capture"});
            table96.AddRow(new string[] {
                        "B6",
                        "C5",
                        "Capture"});
            table96.AddRow(new string[] {
                        "E1",
                        "G1",
                        "Castle"});
            table96.AddRow(new string[] {
                        "A8",
                        "A7",
                        "None"});
            table96.AddRow(new string[] {
                        "B5",
                        "E2",
                        "None"});
            table96.AddRow(new string[] {
                        "B8",
                        "D7",
                        "None"});
            table96.AddRow(new string[] {
                        "F3",
                        "D4",
                        "None"});
            table96.AddRow(new string[] {
                        "E7",
                        "F8",
                        "None"});
            table96.AddRow(new string[] {
                        "D4",
                        "E6",
                        "Capture"});
            table96.AddRow(new string[] {
                        "F7",
                        "E6",
                        "Capture"});
            table96.AddRow(new string[] {
                        "E3",
                        "E4",
                        "None"});
            table96.AddRow(new string[] {
                        "D5",
                        "D4",
                        "None"});
            table96.AddRow(new string[] {
                        "F2",
                        "F4",
                        "None"});
            table96.AddRow(new string[] {
                        "F8",
                        "E7",
                        "None"});
            table96.AddRow(new string[] {
                        "E4",
                        "E5",
                        "None"});
            table96.AddRow(new string[] {
                        "C8",
                        "B8",
                        "None"});
            table96.AddRow(new string[] {
                        "E2",
                        "C4",
                        "None"});
            table96.AddRow(new string[] {
                        "G8",
                        "H8",
                        "None"});
            table96.AddRow(new string[] {
                        "A3",
                        "H3",
                        "None"});
            table96.AddRow(new string[] {
                        "D7",
                        "F8",
                        "None"});
            table96.AddRow(new string[] {
                        "B2",
                        "B3",
                        "None"});
            table96.AddRow(new string[] {
                        "A6",
                        "A5",
                        "None"});
            table96.AddRow(new string[] {
                        "F4",
                        "F5",
                        "None"});
            table96.AddRow(new string[] {
                        "E6",
                        "F5",
                        "Capture"});
            table96.AddRow(new string[] {
                        "F1",
                        "F5",
                        "Capture"});
            table96.AddRow(new string[] {
                        "F8",
                        "H7",
                        "None"});
            table96.AddRow(new string[] {
                        "C1",
                        "F1",
                        "None"});
            table96.AddRow(new string[] {
                        "E7",
                        "D8",
                        "None"});
            table96.AddRow(new string[] {
                        "H3",
                        "G3",
                        "None"});
            table96.AddRow(new string[] {
                        "A7",
                        "E7",
                        "None"});
            table96.AddRow(new string[] {
                        "H2",
                        "H4",
                        "None"});
            table96.AddRow(new string[] {
                        "B8",
                        "B7",
                        "None"});
            table96.AddRow(new string[] {
                        "E5",
                        "E6",
                        "None"});
            table96.AddRow(new string[] {
                        "B7",
                        "C7",
                        "None"});
            table96.AddRow(new string[] {
                        "G3",
                        "E5",
                        "None"});
            table96.AddRow(new string[] {
                        "D8",
                        "E8",
                        "None"});
            table96.AddRow(new string[] {
                        "A2",
                        "A4",
                        "None"});
            table96.AddRow(new string[] {
                        "E8",
                        "D8",
                        "None"});
            table96.AddRow(new string[] {
                        "F1",
                        "F2",
                        "None"});
            table96.AddRow(new string[] {
                        "D8",
                        "E8",
                        "None"});
            table96.AddRow(new string[] {
                        "F2",
                        "F3",
                        "None"});
            table96.AddRow(new string[] {
                        "E8",
                        "D8",
                        "None"});
            table96.AddRow(new string[] {
                        "C4",
                        "D3",
                        "None"});
            table96.AddRow(new string[] {
                        "D8",
                        "E8",
                        "None"});
            table96.AddRow(new string[] {
                        "E5",
                        "E4",
                        "None"});
            table96.AddRow(new string[] {
                        "H7",
                        "F6",
                        "None"});
            table96.AddRow(new string[] {
                        "F5",
                        "F6",
                        "Capture"});
            table96.AddRow(new string[] {
                        "G7",
                        "F6",
                        "Capture"});
            table96.AddRow(new string[] {
                        "F3",
                        "F6",
                        "Capture"});
            table96.AddRow(new string[] {
                        "H8",
                        "G8",
                        "None"});
            table96.AddRow(new string[] {
                        "D3",
                        "C4",
                        "None"});
            table96.AddRow(new string[] {
                        "G8",
                        "H8",
                        "None"});
            table96.AddRow(new string[] {
                        "E4",
                        "F4",
                        "None"});
#line 1153
 testRunner.Then("I expect the following move history", ((string)(null)), table96, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table97 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table97.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "BQ",
                        "",
                        "",
                        "BK"});
            table97.AddRow(new string[] {
                        "",
                        "",
                        "BR",
                        "",
                        "BR",
                        "",
                        "",
                        ""});
            table97.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "WP",
                        "WR",
                        "",
                        "BP"});
            table97.AddRow(new string[] {
                        "BP",
                        "",
                        "BP",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table97.AddRow(new string[] {
                        "WP",
                        "",
                        "WB",
                        "BP",
                        "",
                        "WQ",
                        "",
                        "WP"});
            table97.AddRow(new string[] {
                        "",
                        "WP",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table97.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WP",
                        ""});
            table97.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WK",
                        ""});
#line 1236
 testRunner.Then("I expect the current board to contain the following", ((string)(null)), table97, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make move should make moves for famous game Kasparov V Topalov 1999")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void MakeMoveShouldMakeMovesForFamousGameKasparovVTopalov1999()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make move should make moves for famous game Kasparov V Topalov 1999", ((string[])(null)));
#line 1247
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line 1248
 testRunner.Given("I have a match factory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1249
 testRunner.When("I load the match \'kasparov_topalov_1999.pgn\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1250
 testRunner.Then("I expect the gamestate to be \'InPlay\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table98 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Destination",
                        "Result"});
            table98.AddRow(new string[] {
                        "E2",
                        "E4",
                        "None"});
            table98.AddRow(new string[] {
                        "D7",
                        "D6",
                        "None"});
            table98.AddRow(new string[] {
                        "D2",
                        "D4",
                        "None"});
            table98.AddRow(new string[] {
                        "G8",
                        "F6",
                        "None"});
            table98.AddRow(new string[] {
                        "B1",
                        "C3",
                        "None"});
            table98.AddRow(new string[] {
                        "G7",
                        "G6",
                        "None"});
            table98.AddRow(new string[] {
                        "C1",
                        "E3",
                        "None"});
            table98.AddRow(new string[] {
                        "F8",
                        "G7",
                        "None"});
            table98.AddRow(new string[] {
                        "D1",
                        "D2",
                        "None"});
            table98.AddRow(new string[] {
                        "C7",
                        "C6",
                        "None"});
            table98.AddRow(new string[] {
                        "F2",
                        "F3",
                        "None"});
            table98.AddRow(new string[] {
                        "B7",
                        "B5",
                        "None"});
            table98.AddRow(new string[] {
                        "G1",
                        "E2",
                        "None"});
            table98.AddRow(new string[] {
                        "B8",
                        "D7",
                        "None"});
            table98.AddRow(new string[] {
                        "E3",
                        "H6",
                        "None"});
            table98.AddRow(new string[] {
                        "G7",
                        "H6",
                        "Capture"});
            table98.AddRow(new string[] {
                        "D2",
                        "H6",
                        "Capture"});
            table98.AddRow(new string[] {
                        "C8",
                        "B7",
                        "None"});
            table98.AddRow(new string[] {
                        "A2",
                        "A3",
                        "None"});
            table98.AddRow(new string[] {
                        "E7",
                        "E5",
                        "None"});
            table98.AddRow(new string[] {
                        "E1",
                        "C1",
                        "Castle"});
            table98.AddRow(new string[] {
                        "D8",
                        "E7",
                        "None"});
            table98.AddRow(new string[] {
                        "C1",
                        "B1",
                        "None"});
            table98.AddRow(new string[] {
                        "A7",
                        "A6",
                        "None"});
            table98.AddRow(new string[] {
                        "E2",
                        "C1",
                        "None"});
            table98.AddRow(new string[] {
                        "E8",
                        "C8",
                        "Castle"});
            table98.AddRow(new string[] {
                        "C1",
                        "B3",
                        "None"});
            table98.AddRow(new string[] {
                        "E5",
                        "D4",
                        "Capture"});
            table98.AddRow(new string[] {
                        "D1",
                        "D4",
                        "Capture"});
            table98.AddRow(new string[] {
                        "C6",
                        "C5",
                        "None"});
            table98.AddRow(new string[] {
                        "D4",
                        "D1",
                        "None"});
            table98.AddRow(new string[] {
                        "D7",
                        "B6",
                        "None"});
            table98.AddRow(new string[] {
                        "G2",
                        "G3",
                        "None"});
            table98.AddRow(new string[] {
                        "C8",
                        "B8",
                        "None"});
            table98.AddRow(new string[] {
                        "B3",
                        "A5",
                        "None"});
            table98.AddRow(new string[] {
                        "B7",
                        "A8",
                        "None"});
            table98.AddRow(new string[] {
                        "F1",
                        "H3",
                        "None"});
            table98.AddRow(new string[] {
                        "D6",
                        "D5",
                        "None"});
            table98.AddRow(new string[] {
                        "H6",
                        "F4",
                        "None"});
            table98.AddRow(new string[] {
                        "B8",
                        "A7",
                        "None"});
            table98.AddRow(new string[] {
                        "H1",
                        "E1",
                        "None"});
            table98.AddRow(new string[] {
                        "D5",
                        "D4",
                        "None"});
            table98.AddRow(new string[] {
                        "C3",
                        "D5",
                        "None"});
            table98.AddRow(new string[] {
                        "B6",
                        "D5",
                        "Capture"});
            table98.AddRow(new string[] {
                        "E4",
                        "D5",
                        "Capture"});
            table98.AddRow(new string[] {
                        "E7",
                        "D6",
                        "None"});
            table98.AddRow(new string[] {
                        "D1",
                        "D4",
                        "Capture"});
            table98.AddRow(new string[] {
                        "C5",
                        "D4",
                        "Capture"});
            table98.AddRow(new string[] {
                        "E1",
                        "E7",
                        "None"});
            table98.AddRow(new string[] {
                        "A7",
                        "B6",
                        "None"});
            table98.AddRow(new string[] {
                        "F4",
                        "D4",
                        "Capture"});
            table98.AddRow(new string[] {
                        "B6",
                        "A5",
                        "Capture"});
            table98.AddRow(new string[] {
                        "B2",
                        "B4",
                        "None"});
            table98.AddRow(new string[] {
                        "A5",
                        "A4",
                        "None"});
            table98.AddRow(new string[] {
                        "D4",
                        "C3",
                        "None"});
            table98.AddRow(new string[] {
                        "D6",
                        "D5",
                        "Capture"});
            table98.AddRow(new string[] {
                        "E7",
                        "A7",
                        "None"});
            table98.AddRow(new string[] {
                        "A8",
                        "B7",
                        "None"});
            table98.AddRow(new string[] {
                        "A7",
                        "B7",
                        "Capture"});
            table98.AddRow(new string[] {
                        "D5",
                        "C4",
                        "None"});
            table98.AddRow(new string[] {
                        "C3",
                        "F6",
                        "Capture"});
            table98.AddRow(new string[] {
                        "A4",
                        "A3",
                        "Capture"});
            table98.AddRow(new string[] {
                        "F6",
                        "A6",
                        "Capture"});
            table98.AddRow(new string[] {
                        "A3",
                        "B4",
                        "Capture"});
            table98.AddRow(new string[] {
                        "C2",
                        "C3",
                        "None"});
            table98.AddRow(new string[] {
                        "B4",
                        "C3",
                        "Capture"});
            table98.AddRow(new string[] {
                        "A6",
                        "A1",
                        "None"});
            table98.AddRow(new string[] {
                        "C3",
                        "D2",
                        "None"});
            table98.AddRow(new string[] {
                        "A1",
                        "B2",
                        "None"});
            table98.AddRow(new string[] {
                        "D2",
                        "D1",
                        "None"});
            table98.AddRow(new string[] {
                        "H3",
                        "F1",
                        "None"});
            table98.AddRow(new string[] {
                        "D8",
                        "D2",
                        "None"});
            table98.AddRow(new string[] {
                        "B7",
                        "D7",
                        "None"});
            table98.AddRow(new string[] {
                        "D2",
                        "D7",
                        "Capture"});
            table98.AddRow(new string[] {
                        "F1",
                        "C4",
                        "Capture"});
            table98.AddRow(new string[] {
                        "B5",
                        "C4",
                        "Capture"});
            table98.AddRow(new string[] {
                        "B2",
                        "H8",
                        "Capture"});
            table98.AddRow(new string[] {
                        "D7",
                        "D3",
                        "None"});
            table98.AddRow(new string[] {
                        "H8",
                        "A8",
                        "None"});
            table98.AddRow(new string[] {
                        "C4",
                        "C3",
                        "None"});
            table98.AddRow(new string[] {
                        "A8",
                        "A4",
                        "None"});
            table98.AddRow(new string[] {
                        "D1",
                        "E1",
                        "None"});
            table98.AddRow(new string[] {
                        "F3",
                        "F4",
                        "None"});
            table98.AddRow(new string[] {
                        "F7",
                        "F5",
                        "None"});
            table98.AddRow(new string[] {
                        "B1",
                        "C1",
                        "None"});
            table98.AddRow(new string[] {
                        "D3",
                        "D2",
                        "None"});
            table98.AddRow(new string[] {
                        "A4",
                        "A7",
                        "None"});
#line 1251
 testRunner.Then("I expect the following move history", ((string)(null)), table98, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table99 = new TechTalk.SpecFlow.Table(new string[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H"});
            table99.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table99.AddRow(new string[] {
                        "WQ",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BP"});
            table99.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BP",
                        ""});
            table99.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "BP",
                        "",
                        ""});
            table99.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "WP",
                        "",
                        ""});
            table99.AddRow(new string[] {
                        "",
                        "",
                        "BP",
                        "",
                        "",
                        "",
                        "WP",
                        ""});
            table99.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "BR",
                        "",
                        "",
                        "",
                        "WP"});
            table99.AddRow(new string[] {
                        "",
                        "",
                        "WK",
                        "",
                        "BK",
                        "",
                        "",
                        ""});
#line 1340
 testRunner.Then("I expect the current board to contain the following", ((string)(null)), table99, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
